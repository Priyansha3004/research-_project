S_No,Content,Type,Source
0,"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')",Code,Human
1,"def add_two_numbers(num1, num2):
    sum = num1 + num2
    return sum",Code,Human
2,"num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3
print(f'largest:{largest}')",Code,Human
3,"num1 = 10
num2 = 12
num3 = 14
if (num1 <= num2) and (num1 <= num3):
   smallest = num1
elif (num2 <= num1) and (num2 <= num3):
   smallest = num2
else:
   smallest = num3
print(f'smallest:{smallest}')",Code,Human
4,"def merge_lists(l1, l2):
    return l1 + l2",Code,Human
5,"num = 337

if num > 1:
   for i in range(2, num//2 + 1):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           print(f""{i} times {num//i} is {num}"")
           break
   else:
       print(f""{num} is a prime number"")

else:
   print(f""{num} is not a prime number"")",Code,Human
6,"def print_factors(x):
   print(f""The factors of {x} are:"")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)",Code,Human
7,"num = 13
factorial = 1

if num < 0:
   print(""No factorials for negative numbers!"")

elif num == 0:
   print(""The factorial of 0 is 1"")

else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(f""The factorial of {num} is {factorial}"")",Code,Human
8,"def check_pnz(num):
    if num > 0:
       print(""Positive number"")

    elif num == 0:
       print(""Zero"")

    else:
       print(""Negative number"")",Code,Human
9,"num = 9
for i in range(1, 11):
   print(f""{num} x {i} = {num*i}"")",Code,Human
10,"def two_power(terms):
    result = list(map(lambda x: 2 ** x, range(terms)))

    print(f""The total terms are: {terms}"")
    for i in range(terms):
       print(f""2^{i} = {result[i]}"")",Code,Human
11,"my_list = [11, 45, 74, 89, 132, 239, 721, 21]

num = 3
result = list(filter(lambda x: (x % num == 0), my_list))

print(f""Numbers divisible by {num} are {result}"")",Code,Human
12,"def sum_natural(num):
    if num < 0:
       print(""Please enter a positive number!"")
    else:
       sum = 0
       while(num > 0):
           sum += num
           num -= 1
       return num",Code,Human
13,"my_list = [1, 2, 3, 4, 5, 6]
my_list[0], my_list[-1] = my_list[-1], my_list[0]",Code,Human
14,"def findArea(r): 
    PI = 3.142
    return PI * (r*r)",Code,Human
15,"n = 21
sum_n = 0
for i in range(1, n+1):
    sum_n += i**2
print(sum_n)",Code,Human
16,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

print(len(my_list))",Code,Human
17,"my_tuple = (1, 2, 3, 4, 5, 6, 7, 8)

print(len(my_tuple))",Code,Human
18,"def custom_print(l):
    for _ in l:
        print(_)",Code,Human
19,"def remove_odd(my_list):
    result = list(filter(lambda x: (x % 2 == 0), my_list))
    return result",Code,Human
20,"def remove_even(my_list):
    result = list(filter(lambda x: (x % 2 != 0), my_list))
    return result",Code,Human
21,"def zip_list(list1, list2):
    return list(zip(list1, list2))",Code,Human
22,"file_name = 'temp.txt'
with open(file_name, 'r') as f:
    print(f.read())",Code,Human
23,"def lcm(a, b):
    if a>b:
        min_ = a
    else:
        min_ = b
    while True:
        if min_%a==0 and min_%b==0:
            break
        min_+=1
    return min_",Code,Human
24,"my_list = [1, 2, 4, 5, 2, 3, 1, 5, 4, 7, 8, 2, 4, 5, 2, 7, 3]

print(set(my_list))",Code,Human
25,"def digisum(num):
    sum_=0
    while num > 0:
        dig = num % 10
        sum_+=dig
        num//=10
    return sum_",Code,Human
26,"num = 12321
temp = num
rev = 0
while num > 0:
    dig = num % 10
    rev = rev*10 + dig
    num//=10
if temp==rev :
    print(""The number is a palindrome!"")
else:
    print(""The number isn't a palindrome!"")",Code,Human
27,"def print_n(val, n):
    for _ in range(n):
        print(val)",Code,Human
28,"def square_area(a):
    return a*a",Code,Human
29,"def square_perimeter(a):
    return 4*a",Code,Human
30,"def rectangle_area(l, b):
    return l*b",Code,Human
31,"def rectangle_perimeter(l, b):
    return 2*(l+b)",Code,Human
32,"def findArea(r): 
    PI = 3.142
    return PI * (r*r)",Code,Human
33,"def calc_elect_bill(units):
    if units > 0:
        if units <= 750:
            return 5*units
        else:
            return 5*(750) + 7*(units-750)

    else:
        return -1",Code,Human
34,"def give_day(n):
    day_dict = {1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}
    return day_dict[n]",Code,Human
35,"r = 3
h = 5
pi = 3.14
volume = pi*(r**2)*h
print(volume)",Code,Human
36,"def calc_avg(*args):
    if len(args) > 0:
        return sum(args)/len(args)
    return None",Code,Human
37,"def comp_int(p, r, t):
    amount = p * (1 + (r/100))**t
    interest = amount - p
    return interest",Code,Human
38,"def simp_int(p, r, t):
    interest = (p*r*t)/100
    return interest",Code,Human
39,"st = ""Where is this going? Could you please help me understand!""
vowels = ""AEIOUaeiou""

for v in vowels:
    st = st.replace(v, '_')

print(st)",Code,Human
40,"def is_perfect(n):
    sum_ = 0
    for i in range(1, n//2 + 1):
        if n%i == 0:
            sum_+=i
    if sum_ == n:
        return True
    return False",Code,Human
41,"def seperate_pn(l):
    pos_list = []
    neg_list = []
    for _ in l:
        if _<0:
            neg_list.append(_)
        else:
            pos_list.append(_)
    return pos_list, neg_list",Code,Human
42,"h = 12
w = 11
area = 0.5*h*w
print(area)",Code,Human
43,"def acc(u, v, t):
    return (v-u)/t",Code,Human
44,"multiply = lambda a, b: a*b",Code,Human
45,"add = lambda a, b: a+b",Code,Human
46,even = lambda a: True if a%2 == 0 else False,Code,Human
47,ascii = lambda a: chr(a),Code,Human
48,dig_cnt = lambda a: len(str(a)),Code,Human
49,"def is_valid_triangle_angle(a, b c):
    if a+b+c == 180:
        return True
    return False",Code,Human
50,"def is_valid_triangle_length(a, b c):
    if a>0 and b>0 and c>0:
        if a+b > c and a+c > b and b+c > a:
            return True
    return False",Code,Human
51,count_word = lambda s: len(s.split(' ')),Code,Human
52,"num = int(input(""Enter a number with multiple digit: ""))
n=0
while num>0:
    a = num%10
    num = num - a
    num = num/10
    print(int(a),end="""")
    n = n + 1",Code,Human
53,"def bmi(height: ""Meters"", weight: ""Kgs""):
    bmi = weight/(height**2) 
    print(""Your BMI is: {0} and you are "".format(bmi), end='')
    if ( bmi < 16):
       print(""severely underweight."")
    elif ( bmi >= 16 and bmi < 18.5):
       print(""underweight."")
    elif ( bmi >= 18.5 and bmi < 25):
       print(""healthy."")
    elif ( bmi >= 25 and bmi < 30):
       print(""overweight."")
    elif ( bmi >=30):
       print(""severely overweight."")",Code,Human
54,"string = ""$john.snow#@Got.bad_ending/com""
for ch in string:
    if (ch>='A' and ch<='Z') or (ch>='a' and ch<='z'):
        print(ch, end='')
    else:
        pass",Code,Human
55,"def hanoi(x):
    if x == 1:
        return 1
    else:
        return 2*hanoi(x-1) + 1",Code,Human
56,cm_to_inch = lambda x: x/2.54,Code,Human
57,"union = lambda a, b: list(set(a)|set(b))",Code,Human
58,"intersection = lambda a, b: list(set(a)&set(b))",Code,Human
59,"a = 32
b = 21

result = a**2 + b**2
print(result)",Code,Human
60,"def con_str(*args, sep = ' '):
  return sep.join(args)",Code,Human
61,"r1, r2 = 1, 28

for _ in range(r1, r2+1):
  if _%2 == 0:
    print(_)",Code,Human
62,"dict1 = {'car': [7, 6, 3],  
             'bike': [2, 10, 3],  
             'truck': [19, 4]}

print(f""The original dictionary is : {str(dict1)}"") 

res = dict() 
for key in sorted(dict1): 
    res[key] = sorted(dict1[key])

print(f""The sorted dictionary : {str(res)}"")",Code,Human
63,"import datetime
now = datetime.datetime.now()
time= now.strftime(""%Y-%m-%d %H:%M:%S"")
print(f""Current date and time : {time}"")",Code,Human
64,"num = -10
print(f'Absolute of {num} is {abs(num)}')",Code,Human
65,"sample_list = ['a','b','c']
print(f'length of sample_list is {len(sample_list)}')",Code,Human
66,"from datetime import date
f_date = date(2019, 4, 15)",Code,Human
67,"l_date = date(2020, 4, 15)",Code,Human
68,"delta = l_date - f_date
print(f'No of days between {f_date} and {l_date} is:{delta.days}')",Code,Human
69,"import json
python_dict =  {""name"": ""David"", ""age"": 6, ""class"":""I""}
json_dict = json.dumps(python_dict, sort_keys=True, indent=4)
print(f""json dict : {json_dict}"")",Code,Human
70,"def max_num_in_list(list):
    max = list[0]
    for a in list:
        max = a if a > max else max
    return max
print(f'max_num_in_list [1, 10, -8, 0], Ans:{max_num_in_list([1, 10, -8, 0])}')",Code,Human
71,"a = [10,20,30,20,10,50,60,40,80,50,40]

dup_items = set()
uniq_items = []
for x in a:
    if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)

print(f'dup_items:{dup_items}')",Code,Human
72,"import itertools
original_list = [[2,4,3],[1,5,6], [9], [7,9,0], [1,2,3,4]]
new_merged_list = list(itertools.chain(*original_list))
print(f'merged list/flatten:{new_merged_list}')",Code,Human
73,"obj = {}
for i in range(1, 11):
    obj[str(i)] = []
print(f'create multiple list:{obj}')",Code,Human
74,"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(f'merge two dictionaries:{d}')",Code,Human
75,"my_dict = {'data1':100,'data2':-54,'data3':247}
print(f'Sum all the items in a dictionary:{sum(my_dict.values())}')",Code,Human
76,"my_dict = {'x':500, 'y':5874, 'z': 560}

key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))

print('Maximum Value in a dictionary: ',my_dict[key_max])
print('Minimum Value in a dictionary: ',my_dict[key_min])",Code,Human
77,"if 1 + 1 == 2:
    pass",Code,Human
78,,Code,Human
79,"for count, value in enumerate(obj):
    print(count, value)",Code,Human
80,"a_dict = {'a':1}
a_dict.setdefault('b',2)
print(f'After appending with new value:{a_dict}')",Code,Human
81,"def square(number):
    return number ** 2

numbers = [1, 2, 3, 4, 5]

squared = map(square, numbers)

print(f'mapped numbers:{list(squared)}')",Code,Human
82,print(f'modulo 15 % 4: Sol->{15 % 4}'),Code,Human
83,"x = 'global'

def f():
    x = 'enclosing'
    def g():
        print(x)
    g()
    return x
obj1 = f()
print('explain global scope:',obj1)",Code,Human
84,"def f1():
    x = 'enclosing'
    def g():
        x = 'local'
        return x
    x=g()
    return x
obj2 = f1()
print('explain local scope:',obj2)",Code,Human
85,"import re
print('Find the characters in the given string:',re.findall(r'[a-z]+', '123FOO456', flags=re.IGNORECASE))",Code,Human
86,"s = 'foo123bar'
m = re.findall('123', s)
print('find the number position:',m)",Code,Human
87,"a = 'string'
print(f'convert lowercase to uppercase:{a.upper()}')",Code,Human
88,"a = 'STRING'
print(f'convert lowercase to uppercase:{a.lower()}')",Code,Human
89,"num = 8 

num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))",Code,Human
90,"kilometers = 10.0

conv_fac = 0.621371

miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",Code,Human
91,"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))",Code,Human
92,"num = 10
if num > 0:
   print(""Positive number"")
elif num == 0:
   print(""Zero"")
else:
   print(""Negative number"")",Code,Human
93,"num = 100
if (num % 2) == 0:
   print(""{0} is Even"".format(num))
else:
   print(""{0} is Odd"".format(num))",Code,Human
94,"num = 12
for i in range(1, 11):
   print(num, 'x', i, '=', num*i)",Code,Human
95,"import random
min = 1
max = 6

print(""Rolling the dices...and the values are"",random.randint(min, max))
print(""Rolling the dices...and the values are"",random.randint(min, max))",Code,Human
96,"list1 = [1,3,4,5]
average = (sum(list1)) / len(list1)
print(f""the average score is:  {average} "")",Code,Human
97,print(f'reverese the given list elements:{list1[::-1]}'),Code,Human
98,"import threading
from threading import Thread
import time

def print_time( threadName, delay):
    count = 0
    while count < 5:
        time.sleep(delay)
        count += 1
        print(""%s: %s"" % ( threadName, time.ctime(time.time()) ))",Code,Human
99,,Code,Human
100,,Code,Human
101,,Code,Human
102,,Code,Human
103,,Code,Human
104,"def near_thousand(n):
      return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))
print('near to 1000',near_thousand(1000))
print('near to 1300',near_thousand(1300))",Code,Human
105,"x = ['ab', 'cd']
for i in x:
    print(i.upper())",Code,Human
106,"i = 1
while True:
    if i%3 == 0:
        break
    print(i)
 
    i+= 1",Code,Human
107,"names1 = ['Amir', 'Bala', 'Chales']
for n in names1:
    name = n.lower()
    if 'amir' == name:
        print('Yes name exists:',name)
    else:
        print('No')",Code,Human
108,"matrix = [[1, 2, 3, 4],
       [4, 5, 6, 7],
       [8, 9, 10, 11],
       [12, 13, 14, 15]]
 
for i in range(0, 4):
    print(matrix[i][1], end = "" "")",Code,Human
109,"from time import localtime

activities = {8: 'Sleeping',
              9: 'Commuting',
              17: 'Working',
              18: 'Commuting',
              20: 'Eating',
              22: 'Resting' }

time_now = localtime()
hour = time_now.tm_hour

for activity_time in sorted(activities.keys()):
    if hour < activity_time:
        print (activities[activity_time])
        break
else:
    print ('Unknown, AFK or sleeping!')",Code,Human
110,"fname = 'sample.txt'
l='keyword'",Code,Human
111,"k = 0
 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        for i in words:
            if(i==l):
                k=k+1
print(""Occurrences of the letter:"",k)",Code,Human
112,"t = (1, 2, 4, 3, 8, 9)
print([t[i] for i in range(0, len(t), 2)])",Code,Human
113,"a=(2,3,1,5)
tuple_sorted = sorted(a)
print(tuple(tuple_sorted))",Code,Human
114,"l1=[1,2,3]
l2=[4,5,6]
print('multiply two list values:',[x*y for x in l1 for y in l2])",Code,Human
115,"l1=[1,2,3,-4,-8]

print('negative integers:', [x for x in l1 if x<0])",Code,Human
116,"s=[""pune"", ""mumbai"", ""delhi""]
print([(w.upper(), len(w)) for w in s])",Code,Human
117,"l1=[2,4,6]
l2=[-2,-4,-6]
for i in zip(l1, l2):
	print(i)",Code,Human
118,"l1=[10, 20, 30]
l2=[-10, -20, -30]
l3=[x+y for x, y in zip(l1, l2)]
print('added two list:',l3)",Code,Human
119,"l=[1, 2, 3, 4, 5, 6, 7, 8, 9]
print([x**3 for x in l])",Code,Human
120,"l=[[1 ,2, 3], [4, 5, 6], [7, 8, 9]]
print([[row[i] for row in l] for i in range(3)])",Code,Human
121,"def unpack(a,b,c,d):
    print(a+d)
x = [1,2,3,4]
unpack(*x)",Code,Human
122,"lamb = lambda x: x ** 3
print(lamb(5))",Code,Human
123,"a = 'python'
print(a*5)",Code,Human
124,"def maximum(x, y):
    if x > y:
        return x
    elif x == y:
        return 'The numbers are equal'
    else:
        return y
 
print(maximum(2, 3))",Code,Human
125,"a={""a"":1,""b"":2,""c"":3}
b=dict(zip(a.values(),a.keys()))
print(b)",Code,Human
126,"a={1:5,2:3,3:4}
a.pop(3)
print(a)",Code,Human
127,"d1 = {""john"":40, ""peter"":45}
d2 = {""john"":466, ""peter"":45}
d1 == d2",Code,Human
128,"d = {""john"":40, ""peter"":45}
print(list(d.keys()))

#write a python program to check two lists are equal or not

a=[1, 4, 3, 5, 2]
b=[3, 1, 5, 2, 4]
print(a==b)

#write a python program to check two lists are equal or not

a=frozenset(set([5,6,7]))
print(a)

#write a python program to sum the set of unqiue elements

a={5,6,7}
print(sum(a,5))

#write a python program to implement try catch code

try:
    s={5,6}
    s*3
except Exception as e:
    print(e)


#write a python program to count the len of unique elements

nums = set([1,1,2,3,3,3,4,4])
print(len(nums))

#write a python program to split in python

print('abcdefcdghcd'.split('cd', 2))",Code,Human
129,print('ab cd-ef'.title()),Code,Human
130,print('ab'.zfill(5)),Code,Human
131,"print('abcdef12'.replace('cd', '12'))",Code,Human
132,"str1 = 'Hello!2@#World'
if str1.istitle():
    print('Yes string is title')",Code,Human
133,print('xyyzxxyxyy'.lstrip('xyy')),Code,Human
134,print('for'.isidentifier()),Code,Human
135,print('11'.isnumeric()),Code,Human
136,print('1@ a'.isprintable()),Code,Human
137,print(''''''.isspace()),Code,Human
138,print('HelloWorld'.istitle()),Code,Human
139,"print('ab,12'.isalnum())",Code,Human
140,print('ab'.isalpha()),Code,Human
141,print('0xa'.isdigit()),Code,Human
142,"var1 = 'python language'
print(f'f-string is an good feature in {var1}')",Code,Human
143,"D=dict(p='san', q='foundry')
print('{p}{q}'.format(**D))",Code,Human
144,"a='1 0 0 1'
print(a.replace(' ', '1'))",Code,Human
145,"def f11(x):
    yield x+1
g=f11(8)
print(next(g))",Code,Human
146,"def f12(x):
    yield x+1
    print(""test"")
    yield x+2
g=f12(9)
print(next(g))",Code,Human
147,"a = re.compile('[0-9]')
z= a.findall('3 trees')
print(z)",Code,Human
148,"import os
print(os.getcwd())",Code,Human
149,print([ord(ch) for ch in 'abc']),Code,Human
150,"a=[13,56,17]
a.append([87])
a.extend([45,67])
print(a)",Code,Human
151,"my_string = 'balaji'
k = [print(i) for i in my_string if i not in ""aeiou""]
print('Not a vowel',k)",Code,Human
152,x = [i**+1 for i in range(3)]; print(x),Code,Human
153,"print([i+j for i in ""abc"" for j in ""def""])",Code,Human
154,"l1=[1,2,3]
l2=[4,5,6]
print([x*y for x in l1 for y in l2])",Code,Human
155,"l=[""good"", ""oh!"", ""excellent!"", ""#450""]
print([n for n in l if n.isalpha() or n.isdigit()])",Code,Human
156,"tday=datetime.date.today()
print(tday)",Code,Human
157,"a=(1,2,3)
try:
    a = a+1
except Exception as e:
    print(e)",Code,Human
158,"import functools 
n =5
print(functools.reduce(lambda x, y: x * y, range(1, n+1)))",Code,Human
159,"words = ['cat', 'window', 'defenestrate']
for w in words:
    print(w, len(w))",Code,Human
160,"def make_incrementor(n):
    return lambda x: x + n
f = make_incrementor(42)
f(0)
print(f(1))",Code,Human
161,"pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key=lambda pair: pair[1])
print(pairs)",Code,Human
162,"a = [-1, 1, 66.25, 333, 333, 1234.5]
del a[0]
print(a)",Code,Human
163,"word = ""goal""
word = ""f"" + word[1:]
print(word)",Code,Human
164,"phrase = ""the surprise is in here somewhere""
print(phrase.find(""surprise""))",Code,Human
165,"n = 3
m = 4
print(f""{n} times {m} is {n*m}"")",Code,Human
166,,Code,Human
167,,Code,Human
168,,Code,Human
169,,Code,Human
170,"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')",Code,Human
171,"def divide_first_number_by_second(num1, num2):
    return (num1 // num2), (num1 % num2)",Code,Human
172,"def largest_and_smallest(list_of_nums):
    if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
    else:
        return",Code,Human
173,"def fibonacci_recursive(n):
   if n <= 1:
       return n
   else:
       return (recur_fibo(n-1) + recur_fibo(n-2))",Code,Human
174,"def read_and_print_file(filepath):
    with open(filepath, ""r"") as infile:
        print( infile.read() )",Code,Human
175,"n = 62
for num in range(n):
    print(num)",Code,Human
176,"def sort_ascending(list_to_be_sorted):
    return sorted(list_to_be_sorted)",Code,Human
177,"def sort_descending(list_to_be_sorted):
    return sorted(list_to_be_sorted, reverse=True)",Code,Human
178,"def sum_first_n(n):
    return ( n * (n+1) ) // 2",Code,Human
179,"def sum_first_n_recursive(n):
    if n == 0:
        return 0
    return sum_first_n_recursive(n-1) + n",Code,Human
180,"def filter_with_key_value(list_of_dicts, key, value):
    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )",Code,Human
181,"def reverse(seq):
    SeqType = type(seq)
    emptySeq = SeqType()
    if seq == emptySeq:
        return emptySeq
    restrev = reverse(seq[1:])
    first = seq[0:1]
    result = restrev + first
    return result",Code,Human
182,"def square(x):
    return x**2",Code,Human
183,"def selection_sort(list_to_be_sorted):
    sorted_list = list_to_be_sorted[:]
    for i in range(len(sorted_list)):
        new_min = sorted_list[i]
        new_min_old_place = i
        for j in range(i+1, len(sorted_list)):
            if new_min > sorted_list[j]:
                new_min = sorted_list[j]
                new_min_old_place = j
        old_val = sorted_list[i]
        sorted_list[i] = new_min
        sorted_list[new_min_old_place] = old_val
    return sorted_list",Code,Human
184,"a = input(""User Input"")
print(a)",Code,Human
185,"def shift_and_scale(list_of_nums, mean, std):
    return [ (x-mean) / std for x in list_of_nums ]",Code,Human
186,"def zip_(list_of_seq):
    return list(zip(*list_of_seq))",Code,Human
187,"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
    guess2 = input(""Is it <= 2? enter y/n \n"")
    if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
    else:
        print(""Yay! found the number, its 3"")
else:
    guess2 = input(""Is it 4? enter y/n \n"")
    if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
    else:
        print(""Yay! found the number, its 5"")",Code,Human
188,"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)",Code,Human
189,"def reverse_string(str_to_be_reversed):
    return str_to_be_reversed[::-1]",Code,Human
190,"print(""Hello World"")",Code,Human
191,"a = 10
b = 15
a, b = b, a",Code,Human
192,"a = {""a"":1, ""b"":2, ""c"":3, ""d"":4}
for k, v in a.items():
    print(k, v)",Code,Human
193,"def print_ascii(char):
    print(ord(char))",Code,Human
194,"def hcf(num1, num2):
    smaller = num1 if num1 < num2 else num2
    for i in range(1, smaller+1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
    return hcf",Code,Human
195,"def lcm(num1, num2):
    bigger = num1 if num1 > num2 else num2
    while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
    return bigger",Code,Human
196,"def recursive_sum(n):
    if n <= 1:
        return n
    else:
        return n + recursive_sum(n-1)",Code,Human
197,"def delete_last_element(list_to_be_processed):
    deleted_element = list_to_be_processed.pop()
    return list_to_be_processed, deleted_element",Code,Human
198,"def square_list_elements(list_to_be_squared):
    return list( map(lambda x: x**2, list_to_be_squared) )",Code,Human
199,"def find_integer_square_roots(num):
    found = False
    for k in range(1, (num//2)+1):
        if ((k**2)==num):
            found = True
            break
    if not found:
        return ""Error - the square root is not an integer""
    return -k, k",Code,Human
200,"input_num = 27
while input_num:
    print(input_num)
    input_num -= 1",Code,Human
201,"def divide(num1, num2):
    if num2 == 0:
        return
    else:
        return num1 / num2",Code,Human
202,"seq = ""abcde""
for k in seq:
    if k == ""f"":
        break
else:
    print(""f Not Found!"")",Code,Human
203,"def sort_and_merge(l1, l2):
    new_list = []
    i = 0
    j = 0
    l1_len = len(l1)
    l2_len = len(l2)
    while (i <= l1_len-1) and (j <= l2_len-1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i +=1
        else:
            new_list.append(l2[j])
            j +=1
    if i <= (l1_len-1):
        new_list += l1[i:]
    if j <= (l2_len-1):
        new_list += l2[j:]
    return new_list

def recursive_merge_sort(list_to_be_sorted):
    final_list = []
    first = 0
    last = len(list_to_be_sorted)
    if last <= 1:
        final_list.extend( list_to_be_sorted )
    else:
        mid = last // 2
        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )
        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )
        final_list.extend( sort_and_merge( l1, l2 ) )
    return final_list",Code,Human
204,"def cal_mean(num_list:list)->float:
    if num_list:
        return sum(num_list)/len(num_list)
    else:
        return None",Code,Human
205,"def cal_median(num_list:list)->float:
    if num_list:
        if len(num_list)%2 != 0:
            return sorted(num_list)[int(len(num_list)/2) - 1]
        else:
            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2
    else:
        return None",Code,Human
206,"def cal_triangle_area(a:float,b:float,c:float)->float:
    if a or b or c:
        s = (a+b+c)/2
        if s>a and s>b and s>c:
            area = (s*(s-a)*(s-b)*(s-c))**(1/2)
            return round(area,2)
        else:
            return None
    return None",Code,Human
207,"def cal_eq_triangle_area(a:float)->float:
    if a:
        return (3**(1/2))*(a**2)/4
    else:
        return None",Code,Human
208,"def cal_rt_triangle_area(base:float,height:float)->float:
    if base and height:
        return (base*height)/2
    else:
        return None",Code,Human
209,"def cal_dist_from_orign(x:float,y:float)->float:
    return (x**2+y**2)**(1/2)",Code,Human
210,"def cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:
    return ((x1-x2)**2+(y1-y2)**2)**(1/2)",Code,Human
211,"def root_type(a:float,b:float,c:float):
    if b**2-4*a*c >= 0:
        return 'real'
    else:
        return 'imaginary'",Code,Human
212,"def sum_of_roots(a:float,c:float):
    if a:
        return c/a
    else:
        return None",Code,Human
213,"def prod_of_roots(a:float,b:float):
    if a:
        return -b/a
    else:
        return None",Code,Human
214,"def roots_of_qad_eq(a:float,b:float,c:float):
    d = b**2-4*a*c
    if d >= 0:
        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a
    else:
        return None",Code,Human
215,"def find_profit_or_loss(cp,sp):
    if cp > sp:
        return 'loss', cp-sp
    elif cp < sp:
        return 'profit', sp-cp
    else:
        return 'no profit or loss', 0",Code,Human
216,"def cal_area_rect(length, breadth):
    return length*breadth",Code,Human
217,"def cal_area_square(side):
    return side**2",Code,Human
218,"def cal_area_rhombus(q1,q2):
    return (q1*q2)/2",Code,Human
219,"def cal_area_trapezium(a,b,h):
    return h*(a+b)/2",Code,Human
220,"def cal_area_circle(r):
    pi = 3.14
    return pi*r**2",Code,Human
221,"def cal_circumference(r):
    pi = 3.14
    return 2*pi*r",Code,Human
222,"def cal_perimeter_rect(length, bredth):
    return 2*(length+bredth)",Code,Human
223,"def cal_perimeter_triangle(s1,s2,s3):
    return s1+s2+s3",Code,Human
224,"def cal_perimeter_square(side):
    return 4*side",Code,Human
225,"def cal_perimeter_eq_triangle(a):
    return 3*a",Code,Human
226,"def cal_perimeter_iso_triangle(s1,s2):
    return 2*s1+s2",Code,Human
227,"def cal_area_ellipse(minor, major):
    pi = 3.14
    return pi*(minor*major)",Code,Human
228,"def cal_cylinder_lat_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius*height",Code,Human
229,"def cal_cone_curved_surf_area(slant_height,radius):
    pi=3.14
    return pi*radius*slant_height",Code,Human
230,"def cal_surface_area_cube(a):
    return 6*(a**2)",Code,Human
231,"def cal_surface_area_cuboid(l,b,h):
    return 2*(l*b+b*h+h*l)",Code,Human
232,"def cal_area_sphere(radius):
    pi = 3.14
    return 4*pi*(radius**2)",Code,Human
233,"def cal_area_hemisphere(radius):
    pi = 3.14
    return 2*pi*(radius**2)",Code,Human
234,"def cal_cylinder_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius**2*+2*pi*radius*height",Code,Human
235,"def cal_cone_lateral_surf_area(height,radius):
    pi=3.14
    return pi*radius*(((height**2)+(radius**2))**(1/2))",Code,Human
236,"def cal_cylinder_volume(height, radius):
    pi=3.14
    return pi*(radius**2)*height",Code,Human
237,"def cal_cone_volume(height,radius):
    pi=3.14
    return pi*(radius**2)*height/3",Code,Human
238,"def cal_hemisphere_volume(radius:float)->float:
    pi=3.14
    return (2/3)*pi*(radius**3)",Code,Human
239,"def cal_sphere_volume(radius:float)->float:
    pi=3.14
    return (4/3)*pi*(radius**3)",Code,Human
240,"def cal_cuboid_volume(length:float, breadth:float, height:float)->float:
    return length*breadth*height",Code,Human
241,"def cal_cube_volume(side:float)->float:
    return side**3",Code,Human
242,"def cal_speed(distance:float,time:float)->float:
    return distance/time",Code,Human
243,"def cal_distance(time:float,speed:float)->float:
    return time*speed",Code,Human
244,"def cal_time(distance:float,speed:float)->float:
    return distance/speed",Code,Human
245,"def cal_torque(force:float,theta:float,r:float)->float:
    import math
    return force*r*math.sin(theta)",Code,Human
246,"def cal_angular_velocity(angular_dist:float,time:float)->float:
    return angular_dist/time",Code,Human
247,"def cal_focal_length_of_lense(u:float,v:float)->float:
    return (u*v)/(u+v)",Code,Human
248,"def cal_gforce(mass1:float,mass2:float, distance:float)->float:
    g = 6.674*(10)**(-11)
    return (g*mass1*mass2)/(distance**2)",Code,Human
249,"def cal_current(resistance:float, voltage:float)->float:
    return voltage/resistance",Code,Human
250,"def cal_total_cap_in_parallel(cap_list:list)->float:
    return sum(cap_list)",Code,Human
251,"def cal_total_res_in_parallel(res_list:list)->float:
    return sum([1/r for r in res_list])",Code,Human
252,"def cal_total_res_in_series(res_list:list)->float:
    return sum(res_list)",Code,Human
253,"def cal_mi_ring(mass:float,radius:float)->float:
    return mass*(radius**2)",Code,Human
254,"def cal_mi_sphere(mass:float,radius:float)->float:
    return (7/5)*mass*(radius**2)",Code,Human
255,"def find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:
    r = 8.3145",Code,Human
256,return (n*r*temp)/volume,Code,Human
257,"def find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:
    r = 8.3145",Code,Human
258,return (n*r*temp)/pressure,Code,Human
259,"def find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:
    r = 8.3145",Code,Human
260,return (pressure*volume)/n*r,Code,Human
261,"def cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity + accelration*time",Code,Human
262,"def cal_displacement(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity*time + .5*accelration*(time)**2",Code,Human
263,"def cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:
    return initail_quatity*((1/2)**(time_elapsed/half_life))",Code,Human
264,"def cal_sp_after_discount(sp:float,discount:float)->float:
    return sp*(1 - discount/100)",Code,Human
265,"def get_si(p:float, r:float, t:float)->float:
    return (p*r*t)/100",Code,Human
266,"def get_ci(p:float, r:float, t:float, n:float)->float:
    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)",Code,Human
267,"def cal_energy_by_mass(mass:float)->float:
    c = 300000
    return mass * (c**2)",Code,Human
268,"def cal_ke(mass:float,velocity:float)->float:
    return (mass*(velocity)**2)/2",Code,Human
269,"def cal_pe(mass:float,height:float)->float:
    g = 9.8
    return (mass*g*height)",Code,Human
270,"def cal_electrostatic_force(q1,q2,d):
    k = 9*(10**9)
    return (k*q1*q2)/(d**2)",Code,Human
271,"def cal_density(mass,volume):
    return (mass/volume)",Code,Human
272,"def temp_converter(temp,temp_given_in = 'f'):",Code,Human
273,if temp_given_in.lower() == 'f':,Code,Human
274,"return (temp - 32) * (5/9)
    else:",Code,Human
275,"return (temp * 9/5) + 32



#python code to merge dictionaries
def merge1():
    test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
    test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
    print(""The original list 1 is : "" + str(test_list1))
    print(""The original list 2 is : "" + str(test_list2))
    for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

    print(""The Merged Dictionary list : "" + str(test_list1))



#python program for vertical concatenating of mqatrix
def vertical_concatenation():
    test_list = [[""this"",""is""], [""program"", ""for""], [""vertical"",""concatenation""]]
    print(""The original list : "" + str(test_list))
    res = []
    N = 0
    while N != len(test_list):
        temp = ''
        for idx in test_list:
            try: temp = temp + idx[N]
            except IndexError: pass
        res.append(temp)
        N = N + 1
    res = [ele for ele in res if ele]
    print(""List after column Concatenation : "" + str(res))
vertical_concatenation()",Code,Human
276,"def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):

    print(""The original list is : "" + str(test_list))
    K =k
    res = list(zip(*test_list)[K])
    print(""The Kth column of matrix is : "" + str(res))",Code,Human
277,"def printSubArrays(arr, start, end):
    if end == len(arr):
        return
    elif start > end:
        return printSubArrays(arr, 0, end + 1)
    else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)

arr = [1, 2, 3]
printSubArrays(arr, 0, 0)",Code,Human
278,"total = 0
def sum_nestedlist(l):
    global total
    for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]

sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)

#python program to find power of number using recursion
def power(N, P):
    if (P == 0 or P == 1):
        return N
    else:
        return (N * power(N, P - 1))

print(power(5, 2))",Code,Human
279,"def f_substring():
    test_list = ['program ', 'to', 'filter', 'for', 'substring']
    print(""The original list is : "" + str(test_list))
    sub_str = 'geeks'
    i, j = 0, 5
    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
    print(""Filtered list : "" + str(res))",Code,Human
280,"def r_punc():
    test_str = ""end, is best : for ! Nlp ;""
    print(""The original string is : "" + test_str)
    punc = '''!()-[]{};:'""\, <>./?@#$%^&*_~'''
    for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
    print(""The string after punctuation filter : "" + test_str)


htness_4",Code,Human
281,"def gnomeSort(arr, n):
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
    return arr
arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
    print(i)",Code,Human
282,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
    holes = [0] * size
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
    print(a[i], end="" "")



#python program to implement stooge sort
def stoogesort(arr, l, h):
    if l >= h:
        return
    if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
    if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))

arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
    print(arr[i], end= \' \')",Code,Human
283,"def difference(h1, m1, h2, m2):

    t1 = h1 * 60 + m1
    t2 = h2 * 60 + m2
    if (t1 == t2):
        print(""Both are same times"")
        return
    else:
        diff = t2 - t1
    h = (int(diff / 60)) % 24
    m = diff % 60
    print(h, "":"", m)
difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)",Code,Human
284,"def convert24(str1):
    if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
    elif str1[-2:] == ""AM"":
        return str1[:-2]

    elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
    else:
        return str(int(str1[:2]) + 12) + str1[2:8]
print(convert24(""08:05:45 PM""))",Code,Human
285,"def calcAngle(hh, mm):
    hour_angle = 0.5 * (hh * 60 + mm)
    minute_angle = 6 * mm
    angle = abs(hour_angle - minute_angle)
    angle = min(360 - angle, angle)
    return angle",Code,Human
286,"def printTime(theta):
    for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
    print(""Input angle not valid."")
    return
theta = 90.0
printTime(theta)",Code,Human
287,"def counter(fn):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count += 1
        print(f'Function {fn.__name__} was called {count} times.')
        return fn(*""args, **kwargs)    
    return inner",Code,Human
288,"def remove_duplicatesinlist(lst):
    return len(lst) == len(set(lst))",Code,Human
289,"def timed(fn):
    from time import perf_counter
    from functools import wraps

    @wraps(fn) 
    def inner(*args, **kwargs):
        start = perf_counter()
        result = fn(*args, **kwargs)
        end = perf_counter()
        elapsed = end - start

        args_ = [str(a) for a in args]
        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]
        all_args = args_ + kwargs_
        args_str = ','.join(all_args)",Code,Human
290,"print(f'{fn.__name__}({args_str}) took {elapsed} seconds')

        return result",Code,Human
291,return inner,Code,Human
292,"input_string = input(""Enter a list element separated by space "")
list1  = input_string.split()
input_string = input(""Enter a list element separated by space "")
list2  = input_string.split()
list1 = [int(i) for i in list1] 
list2 = [int(i) for i in list2] 
result = map(lambda x, y: x + y, list1, list2) 
print(list(result))",Code,Human
293,"def stringlist_to_intlist(sList): 
  return(list(map(int, sList)))",Code,Human
294,"def map_values(*args):
  return set(zip(*args))",Code,Human
295,"def nextSquare(): 
    i = 1;",Code,Human
296,"while True: 
        yield i*i                 
        i += 1",Code,Human
297,def fib(limit):,Code,Human
298,"a, b = 0, 1",Code,Human
299,"while a < limit: 
        yield a 
        a, b = b, a + b",Code,Human
300,"userInput = input(""Enter a tuple:"")
x = map(lambda x:len(x), tuple(x.strip() for x in userInput.split(',')))
print(list(x))",Code,Human
301,"def find_evennumbers(input_list):
  list_using_comp = [var for var in input_list if var % 2 == 0] 
  return list_using_comp",Code,Human
302,"def dict_using_comp(list1, list2):
  dict_using_comp = {key:value for (key, value) in zip(list1, list2)} 
  return dict_using_comp

#Write a function to get list of profanity words from Google profanity URL
def profanitytextfile():
    url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
    html = urlopen(url).read()
    soup = BeautifulSoup(html, features=""html.parser"")

    textlist = []
    table = soup.find('table')
    trs = table.find_all('tr')
    for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
    return textlist

#write a python program to find the biggest character in a string 
bigChar = lambda word: reduce(lambda x,y: x if ord(x) > ord(y) else y, word)

#write a python function to sort list using heapq 
def heapsort(iterable):
    from heapq import heappush, heappop
    h = []
    for value in iterable:
        heappush(h, value)
    return [heappop(h) for i in range(len(h))]",Code,Human
303,"def take(n, iterable):    
    import itertools
    return list(itertools.islice(iterable, n))",Code,Human
304,"def prepend(value, iterator):    
    import itertools
    return itertools.chain([value], iterator)",Code,Human
305,"def tail(n, iterable):    
    from collections import deque
    return iter(deque(iterable, maxlen=n))",Code,Human
306,"def consume(iterator, n=None):
    import itertools
    from collections import deque
    ""Advance the iterator n-steps ahead. If n is None, consume entirely.""",Code,Human
307,if n is None:,Code,Human
308,"deque(iterator, maxlen=0)
    else:",Code,Human
309,"next(itertools.islice(iterator, n, n), None)",Code,Human
310,"def nth(iterable, n, default=None):
    from itertools import islice
    return next(islice(iterable, n, None), default)",Code,Human
311,"def all_equal(iterable):
    from itertools import groupby
    g = groupby(iterable)
    return next(g, True) and not next(g, False)",Code,Human
312,"def quantify(iterable, pred=bool):
    return sum(map(pred, iterable))",Code,Human
313,"def pad_none(iterable):
    """"""Returns the sequence elements and then returns None indefinitely.

    Useful for emulating the behavior of the built-in map() function.
    """"""
    from itertools import chain, repeat
    return chain(iterable, repeat(None))",Code,Human
314,"def ncycles(iterable, n):
    from itertools import chain, repeat
    return chain.from_iterable(repeat(tuple(iterable), n))",Code,Human
315,"def dotproduct(vec1, vec2):
    return sum(map(operator.mul, vec1, vec2))",Code,Human
316,"def flatten(list_of_lists):
    from itertools import chain
    return chain.from_iterable(list_of_lists)",Code,Human
317,"def repeatfunc(func, times=None, *args):
    from itertools import starmap, repeat
    if times is None:
        return starmap(func, repeat(args))
    return starmap(func, repeat(args, times))",Code,Human
318,"def pairwise(iterable):
    from itertools import tee
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)",Code,Human
319,"def grouper(iterable, n, fillvalue=None):
    from itertools import zip_longest",Code,Human
320,"args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)",Code,Human
321,"def roundrobin(*iterables):    
    from itertools import islice, cycle",Code,Human
322,"num_active = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:",Code,Human
323,"num_active -= 1
            nexts = cycle(islice(nexts, num_active))",Code,Human
324,"def partition(pred, iterable):
    from itertools import filterfalse, tee",Code,Human
325,"t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)",Code,Human
326,"def powerset(iterable):
    ""powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)""
    from itertools import chain, combinations
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

list(powerset([1,2,3]))",Code,Human
327,"def unique_everseen(iterable, key=None):
    from itertools import filterfalse",Code,Human
328,,Code,Human
329,"seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element",Code,Human
330,"def unique_justseen(iterable, key=None):
    import operator
    from itertools import groupby",Code,Human
331,,Code,Human
332,"return map(next, map(operator.itemgetter(1), groupby(iterable, key)))",Code,Human
333,"def iter_except(func, exception, first=None):
    """"""Converts a call-until-exception interface to an iterator interface.
    Like builtins.iter(func, sentinel) but uses an exception instead
    of a sentinel to end the loop.
    Examples:
        iter_except(s.pop, KeyError)",Code,Human
334,"""""""
    try:
        if first is not None:
            yield first()",Code,Human
335,"while True:
            yield func()
    except exception:
        pass",Code,Human
336,"def random_product(*args, repeat=1):
    import random
    pools = [tuple(pool) for pool in args] * repeat
    return tuple(map(random.choice, pools))",Code,Human
337,"def random_permutation(iterable, r=None):
    import random
    pool = tuple(iterable)
    r = len(pool) if r is None else r
    return tuple(random.sample(pool, r))",Code,Human
338,"def random_combination(iterable, r):
    import random
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.sample(range(n), r))
    return tuple(pool[i] for i in indices)",Code,Human
339,"def random_combination_with_replacement(iterable, r):
    import random
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.choices(range(n), k=r))
    return tuple(pool[i] for i in indices)",Code,Human
340,"def index(a, x):
    from bisect import bisect_left    
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError",Code,Human
341,"def find_lt(a, x):
    from bisect import bisect_left  
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError",Code,Human
342,"def find_le(a, x):
    from bisect import bisect_right  
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError",Code,Human
343,"def find_gt(a, x):
    from bisect import bisect_right 
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError",Code,Human
344,"def find_ge(a, x):
    from bisect import bisect_left 
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError",Code,Human
345,"def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
    from bisect import bisect
    i = bisect(breakpoints, score)
    return grades[i]",Code,Human
346,"import re
text = input(""Enter a string: "")
for m in re.finditer(r""\w+ly"", text):
    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))",Code,Human
347,"def read_csv(filename):
    import csv
    with open(filename, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            print(row)",Code,Human
348,"test_list = [4, 5, 8, 9, 10] 
list(zip(range(len(test_list)), test_list))",Code,Human
349,"def split(word): 
    return [char for char in word]",Code,Human
350,"def pickle_data(data, pickle_file):
  import pickle
  with open(pickle_file, 'wb') as f:
      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
  return None",Code,Human
351,"def load_pickle_data(pickle_file):
  import pickle
  with open(pickle_file, 'rb') as f:
      data = pickle.load(f)
  return data",Code,Human
352,"def add_even_odd_list(l1:list,l2:list)-> list:
    return [a+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0]",Code,Human
353,"def strip_vowels(input_str:str)->str:

    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]
    return ''.join(list(filter(lambda x: x not in vowels, input_str)))",Code,Human
354,"def relu_list(input_list:list)->list:
    return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]",Code,Human
355,"def factorial(n):
    if n == 0 or n ==1:
        return 1
    else:
        return n*factorial(n-1)",Code,Human
356,"def list_length(l):
    return len(l)",Code,Human
357,"def biggest_no(l:list)->int:
    sorted(l)",Code,Human
358,"def print_repeatnstring(text:str, n:int)-> str:
    return text*n",Code,Human
359,"def merge_lists(l1:list, l2:list):
    return list(zip(l1,l2))",Code,Human
360,"def merge_lists(l1:list, l2:list):
    return list(zip(l1,l2))",Code,Human
361,"def append_lists(l1:list, l2:list)->list:
    return l1.extend(l2)",Code,Human
362,"def reverse_list(l1:list)->list:
    return l1[::-1]",Code,Human
363,"def adds_listelements(l1:list, l2:list):
    return [i+j for i, j in zip(l1,l2)]",Code,Human
364,"def sub_listelements(l1:list, l2:list):
    return [i-j for i, j in zip(l1,l2)]",Code,Human
365,"def adds_listevenelements(l1:list, l2:list):
    return [i+j for i, j in zip(l1,l2) if i*j%2 == 0]",Code,Human
366,"def adds_listoddelements(l1:list, l2:list):
    return [i*j for i, j in zip(l1,l2) if i*j%2 == 1]",Code,Human
367,"def n_power(l1:list, power:int)->list:
    return [i**power for i in l1]",Code,Human
368,"def Fibonacci(n:int)-> int:
    if n==1:
        fibonacci = 0
    elif n==2:
        fibonacci = 1
    else:
        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)
    return fibonacci",Code,Human
369,"def sin(x:float) -> float:
    import math
    return math.sin(x)",Code,Human
370,"def derivative_sin(x:float)-> float:
    import math
    return math.cos(x)",Code,Human
371,"def tan(x:float) -> float:
    import math
    return math.tan(x)",Code,Human
372,"def derivative_tan(x:float)-> float:
    import math
    return (1/math.cos(x))**2",Code,Human
373,"def cos(x:float) -> float:
    import math
    return math.cos(x)",Code,Human
374,"def derivative_cos(x:float)-> float:
    import math
    return -(math.sin(x))",Code,Human
375,"def exp(x) -> float:
    import math
    return math.exp(x)",Code,Human
376,"def derivative_exp(x:float) -> float:
    import math
    return math.exp(x)",Code,Human
377,"def log(x:float)->float:
    import math
    return math.log(x)",Code,Human
378,"def derivative_log(x:float)->float:
    return (1/x)",Code,Human
379,"def relu(x:float) -> float:
    x = 0 if x < 0 else x
    return x",Code,Human
380,"def derivative_relu(x:float) -> float:
    x = 1 if x > 0 else 0
    return x",Code,Human
381,"def clear_memory():
    import gc
    gc.collect()",Code,Human
382,"def time_it(fn, *args, repetitons= 1, **kwargs):
    import time
    total_time = []

    for _ in range(repetitons):
        start_time = time.perf_counter()
        fn(*args,**kwargs)
        end_time = time.perf_counter()
        ins_time = end_time - start_time
        total_time.append(ins_time)
    return sum(total_time)/len(total_time)",Code,Human
383,"def check_value(d:dict, value)->bool:
    return any(v == value for v in dict.values())",Code,Human
384,"def count_value(d:dict, value)->bool:
    return list(v == value for v in dict.values()).count(True)",Code,Human
385,"def check_listvalue(l:list, value)->bool:
    return value in l",Code,Human
386,"def check_tuplevalue(l:tuple, value)->bool:
    return value in l",Code,Human
387,"def str_lowercase(s:str):
    return s.lower()",Code,Human
388,"def str_uppercase(s:str):
    return s.upper()",Code,Human
389,"def clean_str(s):
    import re
    return re.sub('[^A-Za-z0-9]+', '', s)",Code,Human
390,"def ascending_sort(l:list):
    sorted(l, reverse=False)",Code,Human
391,"def descending_sort(l:list):
    sorted(l, reverse=True)",Code,Human
392,"def descending_dict_valuesort(d:dict):
    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[1])}",Code,Human
393,"def ascending_dict_valuesort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}",Code,Human
394,"def descending_dict_keysort(d:dict):
    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[0])}",Code,Human
395,"def ascending_dict_keysort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}",Code,Human
396,"def replace_values(s:str, old, new)->str:
    s.replace(old, new)",Code,Human
397,"def join_elements(l:list)-> str:
    return (''.join(str(l)))",Code,Human
398,"def split_elements(s:str, seperator)-> list:
    return s.split(seperator)",Code,Human
399,"def sum_elements(l:list):
    return sum(l)",Code,Human
400,"def sum_even_elements(l:list):
    return sum([i for i in l if i%2==0])",Code,Human
401,"def sum_odd_elements(l:list):
    return sum([i for i in l if i%2==1])

#1 write a program to reverse a list 
lst = [11, 5, 17, 18, 23]
def reverse(lst): 
    new_lst = lst[::-1] 
    return new_lst
	
#2 write a program to find sum of elements in list
list1 = [11, 5, 17, 18, 23]
total = sum(list1)
print(""Sum of all elements in given list: "", total)

#3 write a program to find the largest number in a list 
list1 = [10, 20, 4, 45, 99] 
list1.sort() 
print(""Largest element is:"", list1[-1]) 

#4 write a program to print Even Numbers in a List 
list1 = [10, 21, 4, 45, 66, 93] 
for num in list1: 
    if num % 2 == 0: 
       print(num, end = "" "") 
       
#5 write a program to print negative Numbers in given range 
start, end = -4, 19
for num in range(start, end + 1): 
    if num < 0: 
        print(num, end = "" "") 
        
#6 write a program to remove empty List from List using list comprehension 
test_list = [5, 6, [], 3, [], [], 9] 
print(""The original list is : "" + str(test_list)) 
res = [ele for ele in test_list if ele != []] 
print (""List after empty list removal : "" + str(res)) 

#7 write a  program to remove empty tuples from a list of tuples 
def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples",Code,Human
402,"tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  
          ('krishna', 'akbar', '45'), ('',''),()] 
print Remove(tuples)

#8 write a program to break a list into chunks of size N
l = [1, 2, 3, 4, 5, 6, 7, 8, 9]  
n = 4 
x = [l[i:i + n] for i in range(0, len(l), n)]  
print(x)

#9 write a program to find the frequency of words present in a string  
  
test_str = 'times of india times new india express'
print(""The original string is : "" + str(test_str)) 

res = {key: test_str.count(key) for key in test_str.split()} 
print(""The words frequency : "" + str(res))

#10 write a program to accept a string if it contains all vowels
def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") 
  
if __name__==""__main__"": 
  string=""helloworld""
  print(check(string)) 
  

#11 write a program to rotate string left and right by d length  
def rotate(input,d):  
  
    Lfirst = input[0 : d]  
    Lsecond = input[d :]  
    Rfirst = input[0 : len(input)-d]  
    Rsecond = input[len(input)-d : ]  
  
    print (""Left Rotation : "", (Lsecond + Lfirst) ) 
    print (""Right Rotation : "", (Rsecond + Rfirst))  
  
if __name__ == ""__main__"":  
    input = 'helloworld'
    d=2
    rotate(input,d) 
    

#12 write a program to convert key-values list to flat dictionary 

from itertools import product 
test_dict = {'month' : [1, 2, 3], 
             'name' : ['Jan', 'Feb', 'March']} 
  
print(""The original dictionary is : "" + str(test_dict)) 
  
res = dict(zip(test_dict['month'], test_dict['name'])) 
print(""Flattened dictionary : "" + str(res))",Code,Human
403,"s = ""Hello world Hello""
l = s.split() 
k = [] 
for i in l: 
    if (s.count(i)>1 and (i not in k)or s.count(i)==1): 
        k.append(i) 
print(' '.join(k)) 


#13 write a program to convert into dictionary 
def Convert(tup, di): 
    for a, b in tup: 
        di.setdefault(a, []).append(b) 
    return di 
      
tups = [(""A"", 10), (""B"", 20), (""C"", 30),  
     (""D"", 40), (""E"", 50), (""F"", 60)] 
dictionary = {} 
print (Convert(tups, dictionary)) 


#14 write program to extract digits from Tuple list 
from itertools import chain 
test_list = [(15, 3), (3, 9), (1, 10), (99, 2)] 
print(""The original list is : "" + str(test_list)) 
temp = map(lambda ele: str(ele), chain.from_iterable(test_list)) 
res = set() 
for sub in temp: 
    for ele in sub: 
        res.add(ele) 
print(""The extrated digits : "" + str(res))  

#15 write a program to Remove Tuples of Length K Using list comprehension 
  
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] 
print(""The original list : "" + str(test_list)) 
K = 1
res = [ele for ele in test_list if len(ele) != K] 
print(""Filtered list : "" + str(res)) 

#16 write a program to find Maximum and Minimum K elements in Tuple 
test_tup = (5, 20, 3, 7, 6, 8) 
print(""The original tuple is : "" + str(test_tup)) 
K = 2
test_tup = list(test_tup) 
temp = sorted(test_tup) 
res = tuple(temp[:K] + temp[-K:]) 
print(""The extracted values : "" + str(res))  

#17 write a program to get current date and time 
import datetime  
current_time = datetime.datetime.now()  
    
print (""Time now at greenwich meridian is : "" , end = """")  
print (current_time)

#18 write a program to convert time from 12 hour to 24 hour format 
  
def convert24(str1):",Code,Human
404,,Code,Human
405,"if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
        return ""00"" + str1[2:-2]",Code,Human
406,"elif str1[-2:] == ""AM"": 
        return str1[:-2]",Code,Human
407,,Code,Human
408,"elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
        return str1[:-2] 
          
    else:",Code,Human
409,return str(int(str1[:2]) + 12) + str1[2:8],Code,Human
410,"print(convert24(""08:05:45 PM""))   

#19 write a program to find the difference between two times",Code,Human
411,"def difference(h1, m1, h2, m2):",Code,Human
412,t1 = h1 * 60 + m1,Code,Human
413,"t2 = h2 * 60 + m2 
      
    if (t1 == t2):  
        print(""Both are same times"") 
        return 
    else:",Code,Human
414,diff = t2-t1,Code,Human
415,h = (int(diff / 60)) % 24,Code,Human
416,"m = diff % 60
  
    print(h, "":"", m)",Code,Human
417,"if __name__ == ""__main__"": 
      
    difference(7, 20, 9, 45) 
    difference(15, 23, 18, 54) 
    difference(16, 20, 16, 20) 
    
#20 write program to find yesterday, today and tomorrow",Code,Human
418,,Code,Human
419,"from datetime import datetime, timedelta",Code,Human
420,presentday = datetime.now(),Code,Human
421,,Code,Human
422,yesterday = presentday - timedelta(1),Code,Human
423,tomorrow = presentday + timedelta(1),Code,Human
424,,Code,Human
425,"print(""Yesterday = "", yesterday.strftime('%d-%m-%Y')) 
print(""Today = "", presentday.strftime('%d-%m-%Y')) 
print(""Tomorrow = "", tomorrow.strftime('%d-%m-%Y')) 

#21 write a program to remove all the characters except numbers and alphabets 
  
import re",Code,Human
426,"ini_string = ""123abcjw:, .@! eiw""",Code,Human
427,"print (""initial string : "", ini_string) 
  
result = re.sub('[\W_]+', '', ini_string)",Code,Human
428,"print (""final string"", result) 

#22 write a program to merge dict using update() method
def Merge(dict1, dict2):
    return(dict2.update(dict1))",Code,Human
429,"dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
 
print(Merge(dict1, dict2))
print(dict2)

#23 write a program to print even length words in a string  
  
def printWords(s): 
    s = s.split(' ')  
    for word in s:  
        if len(word)%2==0: 
            print(word)",Code,Human
430,"s = ""hello world"" 
printWords(s)

#24 write a program to delete all duplicate letters in a string 

def removeDuplicate(str): 
    s=set(str) 
    s="""".join(s) 
    print(""Without Order:"",s) 
    t="""" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
        print(""With Order:"",t) 
      
str=""helloworld""
removeDuplicate(str) 

#25 write a program to print Maximum frequency character in String",Code,Human
431,"test_str = ""Helloworld""
  
print (""The original string is : "" + test_str) 
  
all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = max(all_freq, key = all_freq.get)  
  
print (""The maximum of all characters in Helloworld is : "" + str(res)) 

#26 write a program to check if a string contains any special character 
  
import re 
def run(string): 
  
    regex = re.compile('[@_!#$%^&*()<>?/\|}{~:]') 
      
    if(regex.search(string) == None): 
        print(""String is accepted"") 
          
    else: 
        print(""String is not accepted."") 
      
  
if __name__ == '__main__' :",Code,Human
432,"string = ""Hello@World""",Code,Human
433,"run(string) 
    
#27 write a program to check if a string is binary or not 
def check(string) : 
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        print(""Yes"") 
    else : 
        print(""No"")",Code,Human
434,"if __name__ == ""__main__"" : 
  
    string = ""101010000111""
    check(string) 
   
#28 write a program to check whether a given string is Heterogram or not  
  
def heterogram(input): 
  
     alphabets = [ ch for ch in input if ( ord(ch) >= ord('a') and ord(ch) <= ord('z') )] 
  
     if len(set(alphabets))==len(alphabets): 
         print ('Yes') 
     else: 
         print ('No')",Code,Human
435,"if __name__ == ""__main__"": 
    input = 'Hello World'
    heterogram(input) 

#29 write a program to check whether a given key already exists in a dictionary. 
  
def checkKey(dict, key): 
      
    if key in dict.keys(): 
        print(""Present, "", end ="" "") 
        print(""value ="", dict[key]) 
    else: 
        print(""Not present"")",Code,Human
436,"dict = {'a': 100, 'b':200, 'c':300} 
  
key = 'b'
checkKey(dict, key) 
  
key = 'w'
checkKey(dict, key) 

#30 write a program to check whether the string is a palindrome or not 
def isPalindrome(s):
    return s == s[::-1]
s = ""malayalam""
ans = isPalindrome(s)
 
if ans:
    print(""Yes"")
else:
    print(""No"")

#31 write a program that extract words starting with Vowel From A list",Code,Human
437,"test_list = [""have"", ""a"", ""good"", ""one""]",Code,Human
438,"print(""The original list is : "" + str(test_list)) 
  
res = [] 
vow = ""aeiou""
for sub in test_list: 
    flag = False",Code,Human
439,"for ele in vow: 
        if sub.startswith(ele): 
            flag = True 
            break
    if flag: 
        res.append(sub)",Code,Human
440,"print(""The extracted words : "" + str(res)) 

#32 write a program to replace vowels by next vowel using list comprehension + zip() 
  
test_str = 'helloworld'
print(""The original string is : "" + str(test_str)) 
vow = 'a e i o u'.split() 
temp = dict(zip(vow, vow[1:] + [vow[0]])) 
res = """".join([temp.get(ele, ele) for ele in test_str]) 
print(""The replaced string : "" + str(res)) 

#33 write a program to reverse words of string  
  
def rev_sentence(sentence):  
    words = sentence.split(' ')  
    reverse_sentence = ' '.join(reversed(words))  
    return reverse_sentence  
  
if __name__ == ""__main__"":  
    input = 'have a good day'
    print (rev_sentence(input)) 
    
#34 write a program to find the least Frequent Character in String 

test_str = ""helloworld""
print (""The original string is : "" + test_str) 
all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)  
  
print (""The minimum of all characters in the given word is : "" + str(res)) 

#35 write a program to find the most frequent element in a list 
  
def most_frequent(List): 
    counter = 0
    num = List[0] 
      
    for i in List: 
        curr_frequency = List.count(i) 
        if(curr_frequency> counter): 
            counter = curr_frequency 
            num = i 
  
    return num 
  
List = [2, 1, 2, 2, 1, 3] 
print(most_frequent(List)) 

#36 write a program insert character after every character pair",Code,Human
441,"test_str = ""HellowWorld""

print(""The original string is : "" + test_str) 
res = ', '.join(test_str[i:i + 2] for i in range(0, len(test_str), 2)) 
 
print(""The string after inserting comma after every character pair : "" + res) 

#37 write a program to remove i-th indexed character from a string 
  
def remove(string, i):  
  
    a = string[ : i]  
    b = string[i + 1: ] 
    return a + b",Code,Human
442,"if __name__ == '__main__': 
      
    string = ""HellowWorld""",Code,Human
443,i = 5,Code,Human
444,"print(remove(string, i)) 

#38 write a program to check if a string has at least one letter and one number
def checkString(str): 
    
    flag_l = False
    flag_n = False
      
    for i in str:",Code,Human
445,"if i.isalpha(): 
            flag_l = True",Code,Human
446,"if i.isdigit(): 
            flag_n = True
      
    return flag_l and flag_n",Code,Human
447,"print(checkString('helloworld')) 
print(checkString('helloworld2020'))

#39 write a program extract least frequency element 

from collections import defaultdict 
test_list = [1, 3, 4, 5, 1, 3, 5]",Code,Human
448,"print(""The original list : "" + str(test_list))",Code,Human
449,"res = defaultdict(int) 
for ele in test_list: 
   res[ele] += 1 
min_occ = 9999
for ele in res: 
    if min_occ > res[ele]: 
        min_occ = res[ele] 
        tar_ele = ele",Code,Human
450,"print(""The minimum occurring element is : "" + str(tar_ele)) 

#40 write a program to check 2 lists and find if any element is common
  
def common_data(list1, list2): 
    result = False
  
    for x in list1:",Code,Human
451,for y in list2:,Code,Human
452,"if x == y: 
                result = True
                return result  
                  
    return result",Code,Human
453,"a = [1, 2, 3, 4, 5] 
b = [5, 6, 7, 8, 9] 
print(common_data(a, b)) 
  
a = [1, 2, 3, 4, 5] 
b = [6, 7, 8, 9] 
print(common_data(a, b)) 

#41 write a program to find area of a triangle

a = float(input('Enter first side: '))  
b = float(input('Enter second side: '))  
c = float(input('Enter third side: '))  
  
s = (a + b + c) / 2  
  
area = (s*(s-a)*(s-b)*(s-c)) ** 0.5  
print('The area of the triangle is %0.2f' %area)   

#42 write a program to swap two variables
x = input('Enter value of x: ')  
y = input('Enter value of y: ')  
  
temp = x  
x = y  
y = temp  
 
print('The value of x after swapping: {}'.format(x))  
print('The value of y after swapping: {}'.format(y)) 

#43 write a program to convert kilometers to miles

kilometers = float(input('How many kilometers?: '))  
conv_fac = 0.621371  
miles = kilometers * conv_fac  
print('%0.3f kilometers is equal to %0.3f miles' %(kilometers,miles))  

#44 write a program to convert Celsius to Fahrenheit

celsius = float(input('Enter temperature in Celsius: '))  
fahrenheit = (celsius * 1.8) + 32  
print('%0.1f  Celsius is equal to %0.1f degree Fahrenheit'%(celsius,fahrenheit))  

#45 write a program to display the calender

import calendar  
yy = int(input(""Enter year: ""))  
mm = int(input(""Enter month: ""))  
  
print(calendar.month(yy,mm))  

#46 write a program to check if the year is a leap year

year = int(input(""Enter a year: ""))  
if (year % 4) == 0:  
   if (year % 100) == 0:  
       if (year % 400) == 0:  
           print(""{0} is a leap year"".format(year))  
       else:  
           print(""{0} is not a leap year"".format(year))  
   else:  
       print(""{0} is a leap year"".format(year))  
else:  
   print(""{0} is not a leap year"".format(year))  
   
#47 write a program to check if the number is a prime numnber

num = int(input(""Enter a number: ""))  
  
if num > 1:  
   for i in range(2,num):  
       if (num % i) == 0:  
           print(num,""is not a prime number"")  
           print(i,""times"",num//i,""is"",num)  
           break  
   else:  
       print(num,""is a prime number"")  
         
else:  
   print(num,""is not a prime number"")  
   
#48 write a program to print all prime numbers between an interval

lower = int(input(""Enter lower range: ""))  
upper = int(input(""Enter upper range: ""))  
  
for num in range(lower,upper + 1):  
   if num > 1:  
       for i in range(2,num):  
           if (num % i) == 0:  
               break  
       else:  
           print(num)  
           
#49 write a program to find the factorial of a number

num = int(input(""Enter a number: ""))  
factorial = 1  
if num < 0:  
   print(""Sorry, factorial does not exist for negative numbers"")  
elif num == 0:  
   print(""The factorial of 0 is 1"")  
else:  
   for i in range(1,num + 1):  
       factorial = factorial*i  
   print(""The factorial of"",num,""is"",factorial) 
   
#50 write a program to display the multiplication table of a number

num = int(input(""Show the multiplication table of? ""))",Code,Human
454,"for i in range(1,11):  
   print(num,'x',i,'=',num*i)  
   
#51 write a program to print Fibonacci sequence

nterms = int(input(""How many terms you want? ""))",Code,Human
455,"n1 = 0  
n2 = 1  
count = 2",Code,Human
456,"if nterms <= 0:  
   print(""Plese enter a positive integer"")  
elif nterms == 1:  
   print(""Fibonacci sequence:"")  
   print(n1)  
else:  
   print(""Fibonacci sequence:"")  
   print(n1,"","",n2,end=', ')  
   while count < nterms:  
       nth = n1 + n2  
       print(nth,end=' , ')",Code,Human
457,"n1 = n2  
       n2 = nth  
       count += 1  
       
#52 write a program to check Armstrong number

num = int(input(""Enter a number: ""))  
sum = 0  
temp = num  
  
while temp > 0:  
   digit = temp % 10  
   sum += digit ** 3  
   temp //= 10  
  
if num == sum:  
   print(num,""is an Armstrong number"")  
else:  
   print(num,""is not an Armstrong number"")  
   
#53 write a program to find Armstrong number in an interval

lower = int(input(""Enter lower range: ""))  
upper = int(input(""Enter upper range: ""))  
  
for num in range(lower,upper + 1):  
   sum = 0  
   temp = num  
   while temp > 0:  
       digit = temp % 10  
       sum += digit ** 3  
       temp //= 10  
       if num == sum:  
            print(num)  
            
#54 write a  program to find the sum of natural numbers

num = int(input(""Enter a number: ""))  
  
if num < 0:  
   print(""Enter a positive number"")  
else:  
   sum = 0",Code,Human
458,"while(num > 0):  
       sum += num  
       num -= 1  
   print(""The sum is"",sum)  

#55 write a  program to find LCM

def lcm(x, y):  
   if x > y:  
       greater = x  
   else:  
       greater = y  
  while(True):  
       if((greater % x == 0) and (greater % y == 0)):  
           lcm = greater  
           break  
       greater += 1  
   return lcm  
  
  
num1 = int(input(""Enter first number: ""))  
num2 = int(input(""Enter second number: ""))  
print(""The L.C.M. of"", num1,""and"", num2,""is"", lcm(num1, num2)) 

#56 write a  program to find HCF

def hcf(x, y):  
   if x > y:  
       smaller = y  
   else:  
       smaller = x  
   for i in range(1,smaller + 1):  
       if((x % i == 0) and (y % i == 0)):  
           hcf = i  
   return hcf  
  
num1 = int(input(""Enter first number: ""))  
num2 = int(input(""Enter second number: ""))  
print(""The H.C.F. of"", num1,""and"", num2,""is"", hcf(num1, num2))  

#57 write a  program to convert decimal to binary, octal and hexadecimal
dec = int(input(""Enter a decimal number: ""))  
  
print(bin(dec),""in binary."")  
print(oct(dec),""in octal."")  
print(hex(dec),""in hexadecimal.""  

#58 python program to find ascii value of a character

c = input(""Enter a character: "")  
print(""The ASCII value of '"" + c + ""' is"",ord(c))

#59 write a program to make a simple calculator",Code,Human
459,"def add(x, y):  
   """"""This function adds two numbers""""""
   return x + y 
def subtract(x, y): 
   """"""This function subtracts two numbers"""""" 
   return x - y 
def multiply(x, y): 
   """"""This function multiplies two numbers"""""" 
   return x * y 
def divide(x, y): 
   """"""This function divides two numbers""""""  
   return x / y",Code,Human
460,"print(""Select operation."")  
print(""1.Add"")  
print(""2.Subtract"")  
print(""3.Multiply"")  
print(""4.Divide"")  
  
choice = input(""Enter choice(1/2/3/4):"")  
  
num1 = int(input(""Enter first number: ""))  
num2 = int(input(""Enter second number: ""))  
  
if choice == '1':  
   print(num1,""+"",num2,""="", add(num1,num2))  
  
elif choice == '2':  
   print(num1,""-"",num2,""="", subtract(num1,num2))  
  
elif choice == '3':  
   print(num1,""*"",num2,""="", multiply(num1,num2))  
elif choice == '4':  
   print(num1,""/"",num2,""="", divide(num1,num2))  
else:  
   print(""Invalid input"")    
   
#60 write a  program to sort words in alphabetic order

my_str = input(""Enter a string: "")",Code,Human
461,words = my_str.split(),Code,Human
462,words.sort(),Code,Human
463,"for word in words:  
   print(word)  
   
#61 write a program to print the elements of an array present on even position
arr = [1, 2, 3, 4, 5];     
     
print(""Elements of given array present on even position: "");    
    
for i in range(1, len(arr), 2):    
    print(arr[i]);   
    
#62 write a program to sort the elements of the array

arr = [5, 2, 8, 7, 1];     
temp = 0;    
print(""Elements of original array: "");    
for i in range(0, len(arr)):    
    print(arr[i], end="" "");    
     
for i in range(0, len(arr)):    
    for j in range(i+1, len(arr)):    
        if(arr[i] > arr[j]):    
            temp = arr[i];    
            arr[i] = arr[j];    
            arr[j] = temp;    
     
print();    
     
print(""Elements of array sorted in ascending order: "");    
for i in range(0, len(arr)):    
    print(arr[i], end="" "");   
    
#63 write a program to check if the given number is a disarium number

def calculateLength(n):    
    length = 0;    
    while(n != 0):    
        length = length + 1;    
        n = n//10;    
    return length;    
     
num = 175;    
rem = sum = 0;    
len = calculateLength(num);    
     
n = num;    
     
while(num > 0):    
    rem = num%10;    
    sum = sum + int(rem**len);    
    num = num//10;    
    len = len - 1;    
     
if(sum == n):    
    print(str(n) + "" is a disarium number"");    
else:    
    print(str(n) + "" is not a disarium number"");   
    
#64 write a program to print all disarium numbers between 1 and 100

def calculateLength(n):    
    length = 0;    
    while(n != 0):    
        length = length + 1;    
        n = n//10;    
    return length;    
   
def sumOfDigits(num):    
    rem = sum = 0;    
    len = calculateLength(num);    
        
    while(num > 0):    
        rem = num%10;    
        sum = sum + (rem**len);    
        num = num//10;    
        len = len - 1;    
    return sum;    
      
result = 0;    
     
print(""Disarium numbers between 1 and 100 are"");    
for i in range(1, 101):    
    result = sumOfDigits(i);    
        
    if(result == i):    
        print(i),  
        
#65 write a program to add two matrices using nested loop

X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[0,0,0],
         [0,0,0],
         [0,0,0]]",Code,Human
464,for i in range(len(X)):,Code,Human
465,"for j in range(len(X[0])):
       result[i][j] = X[i][j] + Y[i][j]

for r in result:
   print(r)  

#66 write a program to transpose a matrix using a nested loop

X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]",Code,Human
466,for i in range(len(X)):,Code,Human
467,"for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)  

#67 write a program to multiply two matrices using nested loops


X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]

result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]


for i in range(len(X)):

   for j in range(len(Y[0])):

       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)   
   
#68 write a program to remove punctuation from a string 

punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''

my_str = ""Hello!!!, he said ---and went.""

no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char

print(no_punct)

#69 write a program to shuffle a deck of card

import itertools, random

deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))
random.shuffle(deck)

print(""You got:"")
for i in range(5):
   print(deck[i][0], ""of"", deck[i][1])
   
#70 write a program to display the powers of 2 using anonymous function

terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))

print(""The total terms are:"",terms)
for i in range(terms):
   print(""2 raised to power"",i,""is"",result[i])

#71 write a program to add 2 binary numbers

num1 = '00001'
num2 = '10001'

sum = bin(int(num1,2) + int(num2,2))
print(sum)

#71 write a program to find simple interest 

p = float(input(""Enter the principle amount : ""))
r = float(input(""Enter the rate of interest : ""))
t = float(input(""Enter the time in the years: ""))",Code,Human
468,si = (p*r*t)/100,Code,Human
469,"print(""Principle amount: "", p)
print(""Interest rate   : "", r)
print(""Time in years   : "", t)
print(""Simple Interest : "", si)

#72 write a program to find compound interest 

p = float(input(""Enter the principle amount : ""))
r = float(input(""Enter the rate of interest : ""))
t = float(input(""Enter the time in the years: ""))",Code,Human
470,"ci =  p * (pow((1 + r / 100), t))",Code,Human
471,"print(""Principle amount  : "", p)
print(""Interest rate     : "", r)
print(""Time in years     : "", t)
print(""compound Interest : "", ci)

#73 write a program to print a pattern of stars (*)

for row in range (0,5):
    for column in range (0, row+1):
        print (""*"", end="""")",Code,Human
472,"print('\r')
    
#74 write a program to return the absolute value in Python

def get_absolute_value(n):
	if n >= 0:
		return n
	else:
		return -n

print(get_absolute_value(101))

#75 write a program to find the power of a number

a = 10
b = 3

result = a**b

print (a, "" to the power of "", b, "" is = "", result)

#76 write a program to print the binary value of the numbers from 1 to N

n = int(input(""Enter the value of N: ""))

for i in range(1, n+1):
    print(""Binary value of "", i, "" is: "", bin(i))
    
#77 write a program to find number of bits necessary to represent an integer in binary

num = int(input(""Enter an integer number: ""))

bits = num.bit_length()

print(""bits required to store "", num, "" = "", bits)
print(""binary value of "", num, "" is = "", bin(num))

#78 write a program to find the difference between 2 lists

list1 = [10, 20, 30, 40, 50]
list2 = [10, 20, 30, 60, 70]

print ""list1:"", list1
print ""list2:"", list2

print ""Difference elements:""
print (list (set(list1) - set (list2)))

#79 write a program to add an element at specified index in a list

list = [10, 20, 30]
print (list)
list.insert (1, ""ABC"")
print (list)
list.insert (3, ""PQR"")
print (list)

#80 write a program to print EVEN length words of a string 
str = ""Python is a programming language""

words = list(str.split(' '))

print ""str: "", str
print ""list converted string: "", words
print ""EVEN length words:""
for W in words:
	if(len(W)%2==0 ):
		print W
        
#81 write a program to create N copies of a given string 

str1 = ""Hello""
n = 3

str2 = str1 * 3 

print ""str1: "", str1 
print ""str2: "", str2

#82 write a program to extract the mobile number from the given string in Python",Code,Human
473,import re,Code,Human
474,string='''hello you can call me at 018002089898.''',Code,Human
475,"Phonenumber=re.compile(r'\d\d\d\d\d\d\d\d\d\d\d\d')
m=Phonenumber.search(string)",Code,Human
476,"print('mobile number found from the string : ',m.group())

#83 write a program to Capitalizes the first letter of each word in a string

def capitalize(text):
  return text.title()

str1 = ""Hello world!""
str2 = ""hello world!""
str3 = ""HELLO WORLD!""
str4 = ""includehelp.com is a tutorials site""

print(""str1: "", str1)
print(""str2: "", str2)
print(""str3: "", str3)
print(""str4: "", str4)
print()

#84 write a program to design a dice throw function

import random

def dice():
    return random.choice([1,2,3,4,5,6])
    
#85 write a program to print perfect numbers from the given list of integers

def checkPerfectNum(n) :
	i = 2;sum = 1;

	while(i <= n//2 ) :
		if (n % i == 0) :
			sum += i			
		
		i += 1
		if sum == n :
			print(n,end=' ')

if __name__ == ""__main__"" :

	print(""Enter list of integers: "")
	list_of_intgers = list(map(int,input().split()))

	print(""Given list of integers:"",list_of_intgers)

	print(""Perfect numbers present in the list is: "")
	for num in list_of_intgers :
		checkPerfectNum(num)
        
#86 write a program to convert meters into yards
num = float(input(""Enter the distance measured in centimeter : ""))

inc = num/2.54 
print(""Distance in inch : "", inc)

#87 write a program Tower of Hanoi 

def hanoi(x):
    global repN
    repN += 1
    if x == 1:
        return 2
    
    else:
        return 3*hanoi(x-1) + 2
    
x = int(input(""ENTER THE NUMBER OF DISKS: ""))

global repN
repN =0

print('NUMBER OF STEPS: ', hanoi(x), ' :', repN)

#88 write a program to find variance of a dataset

def variance(X):
    mean = sum(X)/len(X)
    tot = 0.0
    for x in X:
        tot = tot + (x - mean)**2
    return tot/len(X)",Code,Human
477,,Code,Human
478,"sample = [1, 2, 3, 4, 5] 
print(""variance of the sample is: "", variance(sample))

#89 write a program to find winner of the day

def find_winner_of_the_day(*match_tuple):
    team1_count = 0
    team2_count = 0
     
    for team_name in match_tuple :
         
        if team_name == ""Team1"" :
            team1_count += 1
        else :
            team2_count += 1
             
    if team1_count == team2_count :
        return ""Tie""
         
    elif team1_count > team2_count :
        return ""Team1""
     
    else :
        return ""Team2""
     
     
if __name__ == ""__main__"" :
     
    print(find_winner_of_the_day(""Team1"",""Team2"",""Team1""))
    print(find_winner_of_the_day(""Team1"",""Team2"",""Team1"",""Team2""))
    print(find_winner_of_the_day(""Team1"",""Team2"",""Team2"",""Team1"",""Team2""))
    
#90 write a program for swapping the value of two integers without third variable

x = int(input(""Enter the value of x :""))
y = int(input(""Enter the value of y :""))

(x,y) = (y,x)

print('Value of x: ', x, '\nValue of y: ', y, '\nWOO!! Values SWAPPEDDD')

#91 write a program to check eligibility for voting",Code,Human
479,"age = int(input(""Enter Age : ""))

if age>=18:
        status=""Eligible""
else:
    status=""Not Eligible""

print(""You are "",status,"" for Vote."")

#92 write a program to print the version information

import sys

print(""Python version: "", sys.version)
print(""Python version info: "", sys.version_info)

#93 write a program to find sum of all digits of a number

def sumDigits(num):
  if num == 0:
    return 0
  else:
    return num % 10 + sumDigits(int(num / 10))

x = 0
print(""Number: "", x)
print(""Sum of digits: "", sumDigits(x))
print()

#94 write a program to print double quotes with the string variable
str1 = ""Hello world"";

print(""\""%s\"""" % str1)
print('""%s""' % str1)
print('""{}""'.format(str1))

#95 write a program to Remove leading zeros from an IP address

import re
def removeLeadingZeros(ip):
    modified_ip = re.sub(regex, '.', ip)
    print(modified_ip)


if __name__ == '__main__' : 
	
	ip = ""216.08.094.196""
	removeLeadingZeros(ip)

#96 write a program for binary search

def binary_search(l, num_find):

    start = 0
    end = len(l) - 1
    mid = (start + end) // 2
    
    found = False
    position = -1

    while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2

    return (found, position)

if __name__=='__main__':
    
    l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    num = 6
    found = binary_search(l, num)
    if found[0]:
        print('Number %d found at position %d'%(num, found[1]+1))
    else:
        print('Number %d not found'%num)
        
#97 write a program to copy odd lines of one file to another file

file1 = open('file1.txt', 'r') 
file2 = open('file2.txt', 'w') 

lines = file1.readlines() 
type(lines) 
for i in range(0, len(lines)): 
	if(i % 2 != 0): 
		file2.write(lines[i]) 

file1.close()
file2.close() 

file1 = open('file1.txt', 'r') 
file2 = open('file2.txt', 'r') 

str1 = file1.read()
str2 = file2.read()

print(""file1 content..."")
print(str1)

print()",Code,Human
480,"print(""file2 content..."")
print(str2)

file1.close()
file2.close()

#98 write a program to reverse a string that contains digits in Python

def reverse(n):
    s=str(n) 
    p=s[::-1]
    return p 

num = int(input('Enter a positive value: '))
print('The reverse integer:',reverse(num))

#99 write a program to input a string and find total number uppercase and lowercase letters

print(""Input a string: "")
str1 = input()

no_of_ucase, no_of_lcase = 0,0

for c in str1:
    if c>='A' and c<='Z':
        no_of_ucase += 1
    if c>='a' and c<='z':
        no_of_lcase += 1

print(""Input string is: "", str1)
print(""Total number of uppercase letters: "", no_of_ucase)
print(""Total number of lowercase letters: "", no_of_lcase)

#100 write a program to input a string and find total number of letters and digits

print(""Input a string: "")
str1 = input()

no_of_letters, no_of_digits = 0,0

for c in str1:
    if (c>='a' and c<='z') or (c>='A' and c<='Z'):
        no_of_letters += 1
    if c>='0' and c<='9':
        no_of_digits += 1

print(""Input string is: "", str1)
print(""Total number of letters: "", no_of_letters)
print(""Total number of digits: "", no_of_digits)",Code,Human
481,"def hanoi(disks, source, auxiliary, target):
    if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return
 
    hanoi(disks - 1, source, target, auxiliary)
    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
    hanoi(disks - 1, auxiliary, source, target)",Code,Human
482,"class Stack:
    def __init__(self):
        self.q = Queue()
 
    def is_empty(self):
        return self.q.is_empty()
 
    def push(self, data):
        self.q.enqueue(data)
 
    def pop(self):
        for _ in range(self.q.get_size() - 1):
            dequeued = self.q.dequeue()
            self.q.enqueue(dequeued)
        return self.q.dequeue()
 
 
class Queue:
    def __init__(self):
        self.items = []
        self.size = 0
 
    def is_empty(self):
        return self.items == []
 
    def enqueue(self, data):
        self.size += 1
        self.items.append(data)
 
    def dequeue(self):
        self.size -= 1
        return self.items.pop(0)
 
    def get_size(self):
        return self.size
 
 
s = Stack()
 
print('Menu')
print('push <value>')
print('pop')
print('quit')
 
while True:
    do = input('What would you like to do? ').split()
 
    operation = do[0].strip().lower()
    if operation == 'push':
        s.push(int(do[1]))
    elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
    elif operation == 'quit':
        break",Code,Human
483,"class Dequeue:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def append(self, data):
        self.items.append(data)
 
    def append_left(self, data):
        self.items.insert(0, data)
 
    def pop(self):
        return self.items.pop()
 
    def pop_left(self):
        return self.items.pop(0)
 
 
q = Dequeue()
print('Menu')
print('append <value>')
print('appendleft <value>')
print('pop')
print('popleft')
print('quit')
 
while True:
    do = input('What would you like to do? ').split()
 
    operation = do[0].strip().lower()
    if operation == 'append':
        q.append(int(do[1]))
    elif operation == 'appendleft':
        q.append_left(int(do[1]))
    elif operation == 'pop':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from right: ', q.pop())
    elif operation == 'popleft':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from left: ', q.pop_left())
    elif operation == 'quit':
        break",Code,Human
484,"class Stack:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def push(self, data):
        self.items.append(data)
 
    def pop(self):
        return self.items.pop()
 
 
s = Stack()
text = ""ABA""
 
for character in text:
    s.push(character)
 
reversed_text = ''
while not s.is_empty():
    reversed_text = reversed_text + s.pop()
 
if text == reversed_text:
    print('The string is a palindrome.')
else:
    print('The string is not a palindrome.')",Code,Human
485,"class Stack:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def push(self, data):
        self.items.append(data)
 
    def pop(self):
        return self.items.pop()
 
 
s = Stack()
exp = ""(x+y""
 
for c in exp:
    if c == '(':
        s.push(1)
    elif c == ')':
        if s.is_empty():
            is_balanced = False
            break
        s.pop()
else:
    if s.is_empty():
        is_balanced = True
    else:
        is_balanced = False
 
if is_balanced:
    print('Expression is correctly parenthesized.')
else:
    print('Expression is not correctly parenthesized.')",Code,Human
486,"def linear_search(alist, key):
    """"""Return index of key in alist. Return -1 if key not present.""""""
    for i in range(len(alist)):
        if alist[i] == key:
            return i
    return -1
 
 
alist = [2, 3, 5, 6, 4, 5]

key = 6
 
index = linear_search(alist, key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')",Code,Human
487,"def binary_search(alist, key):
    """"""Search key in alist[start... end - 1].""""""
    start = 0
    end = len(alist)
    while start < end:
        mid = (start + end)//2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
    return -1
 
 
alist = [2, 3, 5, 6, 4, 5]

key = 6
 
index = binary_search(alist, key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')",Code,Human
488,"def binary_search_rec(alist, start, end, key):
    """"""Search key in alist[start... end - 1].""""""
    if not start < end:
        return -1
 
    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search_rec(alist, mid + 1, end, key)
    elif alist[mid] > key:
        return binary_search_rec(alist, start, mid, key)
    else:
        return mid
 
 
alist = [2, 3, 5, 6, 4, 5]

key = 6
 
index = binary_search_rec(alist, 0, len(alist), key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')",Code,Human
489,"def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return
 
 
alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
490,"def selection_sort(alist):
    for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]
 
 
alist = [2, 3, 5, 6, 4, 5]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
491,"def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
 
 
alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
492,"def merge_sort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        mid = (start + end)//2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)
 
def merge_list(alist, start, mid, end):
    left = alist[start:mid]
    right = alist[mid:end]
    k = start
    i = 0
    j = 0
    while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
    if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
    else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1
 
 
alist = [2, 3, 5, 6, 4, 5]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)",Code,Human
493,"def quicksort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)
 
 
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
 
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
 
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
 
 
alist = [2, 3, 5, 6, 4, 5]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)",Code,Human
494,"def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)
 
def parent(i):
    return (i - 1)//2
 
def left(i):
    return 2*i + 1
 
def right(i):
    return 2*i + 2
 
def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1
 
def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)
 
 
alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
495,"def counting_sort(alist, largest):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1
 
    c[0] = c[0] - 1 
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]
 
    result = [None]*len(alist)
 
    for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1
 
    return result
 
 
alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)",Code,Human
496,"def radix_sort(alist, base=10):
    if alist == []:
        return
 
    def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index]//(base**digit)) % base)
        return key
    largest = max(alist)
    exp = 0
    while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
    return alist
 
def counting_sort(alist, largest, key):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1
 
    c[0] = c[0] - 1
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]
 
    result = [None]*len(alist)
    for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1
 
    return result
 
alist = [2, 3, 5, 6, 4, 5]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)",Code,Human
497,"def bucket_sort(alist):
    largest = max(alist)
    length = len(alist)
    size = largest/length
 
    buckets = [[] for _ in range(length)]
    for i in range(length):
        j = int(alist[i]/size)
        if j != length:
            buckets[j].append(alist[i])
        else:
            buckets[length - 1].append(alist[i])
 
    for i in range(length):
        insertion_sort(buckets[i])
 
    result = []
    for i in range(length):
        result = result + buckets[i]
 
    return result
 
def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
 
 
alist = [2, 3, 5, 6, 4, 5]
sorted_list = bucket_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)",Code,Human
498,"def gnome_sort(alist):
    for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1
 
 
alist = [2, 3, 5, 6, 4, 5]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
499,"def cocktail_shaker_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]
 
    upper = len(alist) - 1
    lower = 0
 
    no_swap = False
    while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1
 
        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1
 
 
alist = [2, 3, 5, 6, 4, 5]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
500,"def comb_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]
 
    gap = len(alist)
    shrink = 1.3
 
    no_swap = False
    while not no_swap:
        gap = int(gap/shrink)
 
        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False
 
        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1
 
 
alist = [2, 3, 5, 6, 4, 5]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
501,"def gaps(size):
    length = size.bit_length()
    for k in range(length - 1, 0, -1):
        yield 2**k - 1
 
 
def shell_sort(alist):
    def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp
 
    for g in gaps(len(alist)):
        insertion_sort_with_gap(g)
 
 
alist = [2, 3, 5, 6, 4, 5]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
502,"class rectangle():
    def __init__(self,breadth,length):
        self.breadth=breadth
        self.length=length
    def area(self):
        return self.breadth*self.length
a=6
b=4
obj=rectangle(a,b)
print(""Area of rectangle:"",obj.area())",Code,Human
503,"class CircleArea():
    def __init__(self,radius):
        self.radius=radius
    def area(self):
        return 3.14 * self.radius * self.radius
a=6
obj=CircleArea(a)
print(""Area of rectangle:"",obj.area())",Code,Human
504,"class CirclePerimeter():
    def __init__(self,radius):
        self.radius=radius
    def perimeter(self):
        return 2 * 3.14 * self.radius
a=6
obj=CirclePerimeter(a)
print(""Perimeter of rectangle:"",obj.perimeter())",Code,Human
505,"class sub:  
    def f1(self, s1):  
        return self.f2([], sorted(s1))  
 
    def f2(self, curr, s1):  
        if s1:  
            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  
        return [curr]  
a=[2, 3, 5, 6, 4, 5]

print(""Subsets: "")
print(sub().f1(a))",Code,Human
506,"a=str(input(""Enter file name .txt extension:""))
file2=open(a,'r')
line=file2.readline()
while(line!=""""):
    print(line)
    line=file2.readline()
file2.close()",Code,Human
507,"fname = input(""Enter file name: "")
 
num_words = 0
 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)",Code,Human
508,"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)",Code,Human
509,"fname = input(""Enter file name: "")
word='the'
k = 0
 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        for i in words:
            if(i==word):
                k=k+1
print(f""Frequency of Occurrences of the word {a} is:"")
print(k)",Code,Human
510,"def copy(from_file, to_file):
    with open(from_file) as f:
        with open(to_file, ""w"") as f1:
            for line in f:
                f1.write(line)",Code,Human
511,"def count_letter(fname, l):
    k = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter==l):
                        k=k+1
    return k",Code,Human
512,"def print_number(fname):
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)",Code,Human
513,"def count_blank_space(fname):
    k = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isspace):
                        k=k+1
    return k",Code,Human
514,"def capitalize(fname):
    with open(fname, 'r') as f:
        for line in f:
            l=line.title()
            print(l)",Code,Human
515,"def reverse_content(filename):
    for line in reversed(list(open(filename))):
        print(line.rstrip())",Code,Human
516,"a=[[1,[[2]],[[[3]]]],[[4],5]]
flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]
print(flatten(a))",Code,Human
517,"def lcm(a,b):
    lcm.multiple=lcm.multiple+b
    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple
    else:
        lcm(a, b)
    return lcm.multiple
lcm.multiple=0
a=4
b=7
if(a>b):
    LCM=lcm(b,a)
else:
    LCM=lcm(a,b)

print(LCM)",Code,Human
518,"def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)",Code,Human
519,"def check(n, div = None):
    if div is None:
        div = n - 1
    while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div-1)
    else:
        print(""Number is prime"")
        return 'True'",Code,Human
520,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))",Code,Human
521,"def sum1(lst):
    total = 0
    for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
    return total",Code,Human
522,"def count_vowels(s):
    count = 0
    vowels = set(""aeiou"")
    for letter in s:
        if letter in vowels:
            count += 1
    return count",Code,Human
523,"s1='python'
s2='schoolofai'
a=list(set(s1)&set(s2))
print(""The common letters are:"")
for i in a:
    print(i)",Code,Human
524,"s1='python'
s2='schoolofai'
a=list(set(s1)-set(s2))
print(""The letters are:"")
for i in a:
    print(i)",Code,Human
525,"def concat_dic(d1, d2):
    return d1.update(d2)",Code,Human
526,"def mul_dict(d):
    tot=1
    for i in d:    
        tot=tot*d[i]
    return tot",Code,Human
527,"def remove_item_dict(d, key):
    if key in d: 
        del d[key]
    else:
        print(""Key not found!"")
        exit(0)",Code,Human
528,"def map_dict(keys, values):
    return dict(zip(keys,values))",Code,Human
529,"def remove(string, n):  
      first = string[:n]   
      last = string[n+1:]  
      return first + last",Code,Human
530,"def anagram_check(s1, s2):
    if(sorted(s1)==sorted(s2)):
        return True
    else:
        return False",Code,Human
531,"def change(string):
      return string[-1:] + string[1:-1] + string[:1]",Code,Human
532,"def modify(string):  
    final = """"   
    for i in range(len(string)):  
        if i % 2 == 0:  
            final = final + string[i]  
    return final",Code,Human
533,"string1='python'
string2='theschoolofai'
count1=0
count2=0
for i in string1:
      count1=count1+1
for j in string2:
      count2=count2+1
if(count1<count2):
      print(""Larger string is:"")
      print(string2)
elif(count1==count2):
      print(""Both strings are equal."")
else:
      print(""Larger string is:"")
      print(string1)",Code,Human
534,"string='This is an Assignment'
count=0
for i in string:
      if(i.islower()):
            count=count+1
print(""The number of lowercase characters is:"")
print(count)",Code,Human
535,"a=[2, 3, 8, 9, 2, 4, 6]
even=[]
odd=[]
for j in a:
    if(j%2==0):
        even.append(j)
    else:
        odd.append(j)
print(""The even list"",even)
print(""The odd list"",odd)",Code,Human
536,"a=[['A',34],['B',21],['C',26]]
for i in range(0,len(a)):
    for j in range(0,len(a)-i-1):
        if(a[j][1]>a[j+1][1]):
            temp=a[j]
            a[j]=a[j+1]
            a[j+1]=temp",Code,Human
537,"a=[2, 3, 8, 9, 2, 4, 6]
for i in range(0,len(a)):
    for j in range(0,len(a)-i-1):
        if(a[j]>a[j+1]):
            temp=a[j]
            a[j]=a[j+1]
            a[j+1]=temp",Code,Human
538,"def main(alist, blist):
    def intersection(a, b):
        return list(set(a) & set(b))
    return intersection(alist, blist)",Code,Human
539,"l_range=2
u_range=5
a=[(x,x**2) for x in range(l_range,u_range+1)]",Code,Human
540,"l=6
u=9
a=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]
print(a)",Code,Human
541,"a=[2, 3, 8, 9, 2, 4, 6]
n = len(a)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print(""New list is:"")
print(a)",Code,Human
542,"a=[2, 3, 8, 9, 2, 4, 6]
b = set()
unique = []
for x in a:
    if x not in b:
        unique.append(x)
        b.add(x)
print(""Non-duplicate items:"")
print(unique)",Code,Human
543,"a=['the', 'tsai', 'python']
max1=len(a[0])
temp=a[0]
for i in a:
    if(len(i)>max1):
       max1=len(i)
       temp=i
print(""The word with the longest length is:"")
print(temp)",Code,Human
544,"a=['the', 'tsai', 'python' ,'a' ,'the', 'a']
c=[]
count=0
b='a'
n=3
for i in a:
    if(i==b):
        count=count+1
        if(count!=n):
            c.append(i)
    else:
        c.append(i)
if(count==0):
    print(""Item not found "")
else: 
    print(""The number of repetitions is: "",count)
    print(""Updated list is: "",c)
    print(""The distinct elements are: "",set(a))",Code,Human
545,"def find_odd_occurring(alist):
    """"""Return the element that occurs odd number of times in alist.
 
    alist is a list in which all elements except one element occurs an even
    number of times.
    """"""
    ans = 0
 
    for element in alist:
        ans ^= element
 
    return ans",Code,Human
546,"date=""20/04/2021""
dd,mm,yy=date.split('/')
dd=int(dd)
mm=int(mm)
yy=int(yy)
if(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):
    max1=31
elif(mm==4 or mm==6 or mm==9 or mm==11):
    max1=30
elif(yy%4==0 and yy%100!=0 or yy%400==0):
    max1=29
else:
    max1=28
if(mm<1 or mm>12):
    print(""Date is invalid."")
elif(dd<1 or dd>max1):
    print(""Date is invalid."")
elif(dd==max1 and mm!=12):
    dd=1
    mm=mm+1
    print(""The incremented date is: "",dd,mm,yy)
elif(dd==31 and mm==12):
    dd=1
    mm=1
    yy=yy+1
    print(""The incremented date is: "",dd,mm,yy)
else:
    dd=dd+1
    print(""The incremented date is: "",dd,mm,yy)",Code,Human
547,"def leapyear_check(year):
    if(year%4==0 and year%100!=0 or year%400==0):
        return True
    else:
        return False",Code,Human
548,"n=24
print(""Factors are:"")
i=1
while(i<=n):
    k=0
    if(n%i==0):
        j=1
        while(j<=i):
            if(i%j==0):
                k=k+1
            j=j+1
        if(k==2):
            print(i)
    i=i+1",Code,Human
549,"n=60
print(""The divisors of the number are:"")
for i in range(1,n+1):
    if(n%i==0):
        print(i)",Code,Human
550,"def amstrong_check(n):
    a=list(map(int,str(n)))
    b=list(map(lambda x:x**3,a))
    if(sum(b)==n):
        return True
    else:
        return False",Code,Human
551,"n=10
a=[]
for i in range(n):
    a.append([])
    a[i].append(1)
    for j in range(1,i):
        a[i].append(a[i-1][j-1]+a[i-1][j])
    if(n!=0):
        a[i].append(1)
for i in range(n):
    print(""   ""*(n-i),end="" "",sep="" "")
    for j in range(0,i+1):
        print('{0:6}'.format(a[i][j]),end="" "",sep="" "")
    print()",Code,Human
552,"def perfect_no_check(n):
    sum1 = 0
    for i in range(1, n):
        if(n % i == 0):
            sum1 = sum1 + i
    if (sum1 == n):
        return True
    else:
        return False",Code,Human
553,"def strong_no_check(num):
    sum1=0
    temp=num
    while(num):
        i=1
        f=1
        r=num%10
        while(i<=r):
            f=f*i
            i=i+1
        sum1=sum1+f
        num=num//10
    if(sum1==temp):
        return True
    else:
        return False",Code,Human
554,"def amicable_no_check(x, y):
    sum1=0
    sum2=0
    for i in range(1,x):
        if x%i==0:
            sum1+=i
    for j in range(1,y):
        if y%j==0:
            sum2+=j
    if(sum1==y and sum2==x):
        return True
    else:
        return False",Code,Human
555,"def prime_no_check(a):
    k=0
    for i in range(2,a//2+1):
        if(a%i==0):
            k=k+1
    if(k<=0):
        return True
    else:
        return False",Code,Human
556,"n=7
sum1 = 0
while(n > 0):
    sum1=sum1+n
    n=n-1
print(""The sum of first n natural numbers is"",sum1)",Code,Human
557,"limit=10
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1",Code,Human
558,"a=[2, 3, 8, 9, 2, 4, 6]
k=0
num=int(input(""Enter the number to be counted:""))
for j in a:
    if(j==num):
        k=k+1
print(""Number of times"",num,""appears is"",k)",Code,Human
559,"def collatz(n):
    while n > 1:
        print(n, end=' ')
        if (n % 2):",Code,Human
560,"n = 3*n + 1
        else:",Code,Human
561,"n = n//2
    print(1, end='')",Code,Human
562,"def count_set_bits(n):
    count = 0
    while n:
        n &= n - 1
        count += 1
    return count",Code,Human
563,"def get_gray_codes(n):
    """"""Return n-bit Gray code in a list.""""""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()
 
    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]
 
    return first_half + second_half",Code,Human
564,"def gray_to_binary(n):
    """"""Convert Gray codeword to binary and return it.""""""
    n = int(n, 2)
 
    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask

    return bin(n)[2:]",Code,Human
565,"def binary_to_gray(n):
    """"""Convert Binary to Gray codeword and return it.""""""
    n = int(n, 2)
    n ^= (n >> 1)

    return bin(n)[2:]",Code,Human
566,"n=1023
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)",Code,Human
567,"a=2
b=9
c=5
d=[]
d.append(a)
d.append(b)
d.append(c)
for i in range(0,3):
    for j in range(0,3):
        for k in range(0,3):
            if(i!=j&j!=k&k!=i):
                print(d[i],d[j],d[k])",Code,Human
568,"def print_identity_matrix(n):
    for i in range(0,n):
        for j in range(0,n):
            if(i==j):
                print(""1"",sep="" "",end="" "")
            else:
                print(""0"",sep="" "",end="" "")
        print()",Code,Human
569,"class Food(object):
    def __init__(self, name, price):
        self.name = name
        self.price = price
    
    def getprice(self):
        return self.price
    
    def __str__(self):
        return self.name + ' : ' + str(self.getprice())
    
def buildmenu(names, costs):
    menu = []
    for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
    return menu

names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']

costs = [250, 150, 180, 70, 65, 55, 120, 350]

Foods = buildmenu(names, costs)

n = 1
for el in Foods:
    print(n,'. ', el)
    n = n + 1",Code,Human
570,"def fib():
    cache = {1:1, 2:1}

    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
    return calc_fib",Code,Human
571,"class Fib:
    def __init__(self):
        self.cache = {1:1, 2:1}

    def fib(self, n):
        if n not in self.cache:
            print(f'Calculating fib({n})')
            self.cache[n] = self.fib(n-1) + self.fib(n-2)
        return self.cache[n]",Code,Human
572,"def fact():
    cache = {0:1, 1:1}

    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
    return calc_fib",Code,Human
573,"class Fact:
    def __init__(self):
        self.cache = {0:1, 1:1}

    def fact(self, n):
        if n not in self.cache:
            self.cache[n] = self.fact(n-1) * n
        return self.cache[n]",Code,Human
574,"def dot_product(a, b):
    return sum( e[0]*e[1] for e in zip(a, b))",Code,Human
575,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine",Code,Human
576,"def cosine(x,n):
    cosx = 1
    sign = -1
    for i in range(2, n, 2):
        pi=22/7
        y=x*(pi/180)
        cosx = cosx + (sign*(y**i))/math.factorial(i)
        sign = -sign
    return cosx",Code,Human
577,"def vowel_stripping(string):
    '''This function takes a string as an input strips out vowels and returns stripted out string'''
    return """".join([x for x in string if x not in('a','e','i','o','u')])",Code,Human
578,"def char_shift(string, shift_count):
    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''
    return """".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])",Code,Human
579,"from functools import reduce
def biggest_char(string):
    '''This function takes an input as a string and returns the biggest output character in the string'''
    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y
    return reduce(biggest_chr, string)",Code,Human
580,"def interior_angle(no_of_sides):
    return (no_of_sides - 2) * 180 / no_of_sides",Code,Human
581,"import math
def side_length(no_of_sides, circumradius):
    return 2 * circumradius * math.sin(math.pi / no_of_sides)",Code,Human
582,"import math
def area(no_of_sides, circumradius):
    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)
    apothem = circumradius * math.cos(math.pi / no_of_sides)
    return no_of_sides / 2 * side_length * apothem",Code,Human
583,"from datetime import datetime
from time import perf_counter
import random
val = 10
counter_67 = dict()


#1 Write a function to print given interger to binary
def int_to_binary(num: int):
    """"""
    function to print number to binary
    """"""
    if isinstance(num, int):
        print(f'The binary of {num} is {bin(num).replace(""0b"","""")}')
    else:
        raise ValueError('Invalid Input')


#2 write a function to check given string is palindrome or not ( case insensitive )
def palindrome_str_check(value: str):
    """"""
    function to print whether string is palindrome or not
    """"""
    if isinstance(value, str) :
        print( value.lower() == value[::-1].lower() )
    else:
        raise ValueError('Invalid Input')


#3 write a function to check whether a given date in DD/MM/YYYY format is valid or not
def date_validation(inputdate: str):
    """"""
    function take input date in DD/MM/YYYY format and check its validation.
    """"""
    import datetime
    dd, mm, year = inputdate.split('/')
    isValidDate = True
    try :
        datetime.datetime(int(year),int(mm), int(dd))
    except ValueError : 
        isValidDate = False
    if(isValidDate):
        print (""Input Date is Valid"")
    else:
        print (""Input Date is invalid"")


#4 write a function to print the count of divisor.
def divisor_count(num: int):
    """"""
    function to count the number of divisor of interger.
    """"""
    if isinstance(num, int):
        count = 0
        for i in range(1, num+1):
            if num%i == 0:
                count = count+1
        print(f'Number of divisor is {count}')
    else:
        raise ValueError('Invalid Input')


#5 write a function to print the count of divisor using list comprehension
def divisor_using_list(num: int):
    """"""
    function to count the number of divisor using list comprehension.
    """"""
    if isinstance(num, int):
        count = [i for i in range(1,num+1) if not num%i]
        print(f'Number of divisor is {count}')
    else:
        raise ValueError('Invalid Input')


#6 write a function to print merger of two dictionary
def merge_dict(dict1: dict, dict2: dict):
    """"""
    function to print merger of two dictionary
    """"""
    final_dict = {**dict1, **dict2}
    print(final_dict)


#7 write a function to print second largest number in a list.
def second_large_num(num: list):
    if isinstance(num, list):
        num.sort()
        print (num[-2])
    else:
        raise ValueError('Invalid Input')


#8 write a function to remove empty list from a list and print.
def remove_empty_list(num1: list):
    if isinstance(num1, list):
        modified = list(filter(None, num1))
        print(modified)


#9 write a function to remove empty tuples from a list and print
def remove_empty_tuple(num1: list):
    if isinstance(num1, list):
        modified = list(filter(None, num1))
        print(modified)


#10 write a python function to remove duplicate from a list.
def remove_duplicates(dup_list: list):
    print(list(set(dup_list)))


#11 write a function to reverse every word in a string
def reverse_word(sen: str):
    words = sen.split(' ')
    rever_word = [ i[::-1] for i in words ]
    final_sen = ' '.join(rever_word)
    print(final_sen)


#12 function to check leap year
def check_leap_year(year: int):
    if not year%4:
        print('Leap Year')
    else:
        print('Not a leap year')


#13 function to print the multiplication table
def maths_tables( no_ : int):
     for i in range(1, 11):
         print(f'{no_}x{i}={no_*i}')


#14 function to check armstrong number or not
def check_armstrong(no_: int):
    sum_ = 0
    temp = no_
    while temp > 0:
        digit = temp % 10
        sum_ += digit ** 3 
        temp //= 10

    if no_ == sum_:  
       print(f""{no_} is an Armstrong number"")  
    else:  
       print(f""{no_} is not an Armstrong number"")


#15 function to print all armstrong in a range
def print_all_armstrong(lower: int, upper: int):
    for num in range(lower,upper + 1):  
        sum_ = 0
        temp = num
        while temp > 0:
            digit = temp % 10
            sum_ += digit ** 3
            temp //= 10
            if num == sum_:
                print(num)

#17 function to print the lcm of two number
def ret_lcm(x: int, y: int):
    if x > y:
        greater = x
    else:
        greater = y
    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
    return lcm


#18 function to print the hcf of two number
def ret_hcf(x: int, y: int):
    if x > y:
        greater = x
    else:
        greater = y
    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater  
            break
        greater += 1
    return int(x*y/lcm)


#19 function to print ascii value of a character.
def show_ascii(a: str):
    print(ord(a))


#20 function to print calendar
def show_mm_calendar(mm: int, yyyy: int):
    import calendar
    print(calendar.month(yyyy, mm)


#21 Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.
def print_miss_num(l: list):
     print(f'Missing number is {55-sum(l)}')


#22 function to print marsh code equivalent from string.
def encode_marsh(sen : str):
    char_to_dots = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
                      'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
                      'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
                      'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
                      'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',
                      '&': '.-...', ""'"": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
                      '-': '-....-', '+': '.-.-.', '""': '.-..-.', '?': '..--..', '/': '-..-.'
                    }
    for i in sen:
        print(char_to_dots[i.upper()])


#23 function to intern a sentence.
def check_intern(a , b):
    if a is b:
        print(f'{a} and {b} is interned by Python')
    else:
        print(f'{a} and {b} is not interned by Python')


#24 convert string to intern string
def str_to_intern_str(a):
    import sys
    b = sys.intern(a)
    if a is b:
        print('Sentence is interned')
    else:
        raise ValueError('This should not happen')


#25 write a function to print the time taken by a calc function to ferform a simple multiplication 10 Million time
def time_calc(n: int):
    import time
    start = time.perf_counter()
    for i in range(10000000):
        n*2
    end = time.perf_counter()
    return end-start


#26 write a function to print other value with given base to int.
def other_int(value, b):
    return int(value, b)


#27 write a function to convert any number to its equivalent fractions.
def no_to_fraction(no_):
    from fractions import Fractions
    return Fractions(no_)


#28 function to check two number ( floating also )  are close or not
def check_isclose(x, y)
    from math import isclose
    return isclose(x, y)


#29 function to convert temperature as per user mention.
def temp_converter(temp , temp_given_in= 'F'):
    if temp < 0:
        raise ValueError(""Input Temperature is Negative"")
    else:
        if temp_given_in.upper() == 'F':
            t = (temp-32)*5/9
            return t
        elif temp_given_in.upper() == 'C':
            t = 9/5 * (temp) + 32
            return t
        elif temp_given_in.upper() not in ('C' , 'F'):
            raise NotImplementedError(""Invalid Temperature Coneversion"")


#30 function to print the regular polygon area
def polygon_area(side_length=1, side=3):
    from math import tan
    if side_length <= 0:
        raise ValueError(""How come Side is zero."")
    else:
        if side <= 0 or side >=7:
            raise NotImplementedError 
        elif side in ( 2 , 1 ):
            raise ValueError(""No Polygon of Side 1 & 2 Exists"")
        elif side == 3:
            return side_length*side_length*side/4*tan(180/side)
        elif side == 4:
            return side_length*side_length
        elif side == 5:
            return side_length*side_length*side/4*tan(180/side)
        elif side == 6:
            return side_length*side_length*side/4*tan(180/side)


#31 function to return speed converer as per user mention data
def speed_converter(speed , dist = 'KM', time = 'HR'):
    if speed < 0 or type(dist) == str or type(time) == str:
        raise ValueError(""Invalid Input Format"")
    else:
        if dist.upper == 'KM':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError(""Valid Distance Invalid Time"")
        elif dist.upper == 'M':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError(""Valid Distance Invalid Time"")
        elif dist.upper == 'FT':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError(""Valid Distance Invalid Time"")
        elif dist.upper == 'YRD':
            if time.upper()  == 'S':
                return True
            elif time.upper == 'MS':
                return True
            elif time.upper() == 'M':
                return True
            elif time.upper() == 'HR':
                return True
            elif time.upper() == 'DAY':
                return True
            else:
                raise ValueError(""Valid Distance Invalid Time"")
        else:
            raise ValueError(""Invalid User Distance Input"")


#32 function to remove values from dictionary
def remove_dic_value(a: dict, key)
    a.pop(key)
    return a


#33 function insert at the begining of dictionary
def dict_in_at_begin(orgin: dict, new_: dict):
    final = {**new_, **origin}
    return final


#34 function to convert a list of tuples into dictionary",Code,Human
584,,Code,Human
585,"def list_to_dict(l: list):
    final_dict = {}
    for i in l:
        final_dict[i[0]] = i[1]
    return final_dict


#35 function to sort the  dictionary with respect to key.
def dict_sort_with_key(test_dict: dict):
    final dict = {}
    temp = sorted(test_dict)
    for i in temp:
        final_dict[i] = test_dict[a]
    return final_dict


#36 function to return mirir charcters of a letter.",Code,Human
586,,Code,Human
587,"def mirror_character(word: str, value: int):
    import string
    letters = string.ascii_lowercase
    rev_letter = letters[::-1]
    dict_char = dict(zip(letters, rev_letter))
    final_1 = word[0:value]
    final_2 = []
    for i in range(value, len(word)):
        final_2.append(dict_char[word[i]])
    print(final_1+''.join(final_2))


#37 function to add two tuple
def add_tuple(tup1, tup2):
    return tup1+tup2


#38 function to create a list of tuples from a given list having number and its cube in each tuple",Code,Human
588,,Code,Human
589,"def list_of_tuple( l: list):
    final = [ (i, pow(i,3)) for i in l]
    return final


#39 function to create a dictionary of mirror of letter.
def letter_mirror():
    import string
    letter = string.ascii_lowercase
    rvr_letter = letter[::-1]
    dict_char = dict(zip(letter, rvr_letter))
    return dict_char


#40 function to print the ascii value of letter
def show_ascii():
    import string
    letter = string.ascii_letters
    for i in letter:
        print(i+"":""+str(ord(i)))


#41 function to get the current time at GMT
def current_time():
    import datetime
    print(datetime.datetime.now())


#42 function to print the India Time
def get_India_time():
    import datetime, pytz
    print(datetime.datetime.now( pytz.timezone('Asia/kolkata') ))


#43 function to print yesterday and tomorrow date
def tmrw_yest_time()
    import datetime
    yesterday = datetime.datetime.now() - datetime.timedelta(1)
    tmrw = datetime.datetime.now() + datetime.timedelta(1)
    print( yesterday, tmrw )


#44 universal function
def universal_func(*args, **kwargs):
    print(args)
    print(**kwargs)


#45 logging message
def logging(msg, *, dt = datetime.utcnow()):
    print(f'message at {dt} was {msg}')


#46 factorial of number using recursion
def factorial(n: int):
    if n<1:
        return 1
    else:
        return n * factorial(n-1)


#47 first class function
def call_func(x, func):
    return fn(x)


#48 function to show documentation
def doc_func(*args, **kwargs):
    """"""
    function to show how to do do documentation of function
    First line after function wriiten inside triple quotes.
    Don't forget to close when job is done.
    """"""
    pass


#49 function to show annotation
def anno_func(a: ""Mandatory"",
              b: ""Optional""=2,
              c: ""Optional""=10,
              *args: ""Extra Position variable"",
              **kwargs: ""Provide extra to unpack dictionary"") -> 'Documentation to show how to do do annotation':
    """"""
    function to show how to do do documentation of function
    First line after function wriiten inside triple quotes.
    Don't forget to close when job is done.
    """"""
    pass


#50 function to check whether a given name is function or method
def inspect_func(fn):
    from inspect import isfunction, ismethod
    print(f'{fn} is method {ismethod(func)}')
    print(f'{fn} is function {isfunction(func)}')


#51 function to print the source code of a function
def print_so(f: ""Function name/class name/module""):
    from inspect import getsource
    print(getsource(f))


#52 callable_check
def collable_check(x: ""Leterally can be anything""):
    return callable(x)


#52 zip two tuple
def zip_to_tuple( tup1, tup2):
    return zip(tup1, tup2)


#53 factorial using pythonish 
def fact_one_line(n):
    return 1 if n < 2 else n*fact_one_line(n-1)


#54 str to list
def str_to_list(sen):
    return list(sen)


#55 string to tuple
def sen_to_tuple(sen):
   return tuple(sen)


#56 function to all implementation
def all_imp(a):
   return all(a)


#57 function to any implementation
def any_imp(a):
   return any(a)


#58 function to show boolean true / false is a number
def bool_show(a=5):
    return True*a


#59 function to show boolean true / false is a number
def bool_show(a=5):
    return False*a 


#60 function to use global varibale implementation
def gloabl_use(n):
    global val
    return val * n


#61 implementation of local cooncept
def inner_show():
    x = 'Hola'
    def inner():
        nonlocal x
        x = 'Hola World'
        print(f'Inner function x is {x}')
    inner()
    print(f'outer function x is {x}')


#62 custom counter function
def custom_counter():
    """"""
    An implementation of closures
    """"""
    x = 0
    def inner():
       nonlocal x
       x += 1
       print(f' Switch or button is called {x} times')
     return inner


#63 custom logging along with counter
def custom_counter_log():
    """"""
    An implementation of closures
    """"""
    x = 0
    dt = datetime.now()
    def inner():
       nonlocal x
       x += 1
       print(f' Switch or button is called {x} at {dt}')
     return inner

#64 function to build a time elapsed closures
def time_elsaped()
    start = perf_counter()
    def inner()
        nonlocal perf_counter
        return perf_counter() - start
    return inner


#65 function to attach counter to function
def attach_counter(fn: ""Function""):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count += 1
        return fn(*args, **kwargs)
    return inner



#66 attach function closure with logs details to another function
def attach_log(fn: ""function""):
    def inner(*args, **kwargs):
        dt = datetime.now()
        print(f'{fn.__name__} is called at {dt} with {args} {kwargs} ')
        return fn(*args, **kwargs)
    return inner


#67 function counter to store the number of times multiples function called in a dictionary
def count_func_dict(fn: ""Function Name""):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count =+= 1
        counter_67[fn.__name__] = count
        return fn(*args, **kwargs)
    return inner


#68 write a function to unpack tuple of minimum 2 value to unlimited length int first two and rest
def unpack_tuple(tup):
    a, b , *c = tup
    return a , b, c



#69 write a function which take unlimited number and add it",Code,Human
590,"def add_unlimited(*args):
    return sum(args)


#70 class to print user defined message whenever object of class is called is called.
class User:
    def __init__(self, msg=""Demo of custom message by repr and str in class""):
        self.msg = msg

    def __repr__(self):
        return f""Object of User class is called with parameter {self.msg}""

    def __str__(self):
        return f""Object of User class is called with parameter {self.msg}""



#71 class to show implementation of equality and less than implementation in an class
class GqLt:
    def __init__(self, msg=""Demo of lt and eq in class""):
        self.msg = msg

    def __eq__(self, other):
        """"""
        Equality check between two object of same class.
        It is mandatory to implement __eq__ in class to do equality check.
        """"""
        if isinstance(other, GqLt):
            return ""Code to be written here to match equality check between two object of same class""
        else:
            raise ValueError('Invalid comparison')

    def __lt__(self, other):
        """"""
        Less than or greater than check between two objects of same class.
        It is mandatory to implement __eq__ in class to do equality check.
        """"""
        if isinstance(other, GqLt):
            return ""Code to be written here to match equality check between two object of same class""
        else:
            raise ValueError('Invalid comparison')


#72 class to show as how to make the class as callable
class CallShow:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self, msg = 'Demo class to show how to make class object as callable'):
        self.msg = msg

    def __call__(self):
        """"""
        to make object as callable the class should have __call__ in it
        """"""
        return f""Code to be writen here above to act as per accling object of call""


#73 function to store the data of IPL match in Namedtuple
def store_ipl_date(tuple1):
    from collections import namedtuple
    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')
    return IplData(*tuple1)


#74 function to show namedtuple is instance of tuple
def show_ins_tup():
    from collections import namedtuple
    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')
    match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')
    return isinstance(match1, tuple)


#75 return dot product of two vectors
def dot_product(a: ""Vector1"", b: ""Vector2""):
    return sum( e[0]*e[1] for e in zip(a,b) )


#76 function to showcast documemtation of namedtuple
def show_doc_named():
    from collections import namedtuple
    IplData = namedtuple('IplData', 'match toss choice session1 session2 winner')
    IplData.__doc__ = 'Namedtuple class to store the IPL match data'
    IplData.match.__doc__ = 'Team name'
    IplData.toss.__doc__ = 'Who won the toss'
    IplData.choice.__doc__ = 'Decision taken by wiinng team toss'
    IplData.session1.__doc__ = 'Run scored by Team1'
    IplData.session2.__doc__ = 'Run scored by Team2'
    IplData.winner.__doc__ = 'Winning Team'
    return help(IplData)


#77 show all local values while one function is running
def show_local():
    import math
    a = 10
    b = 'Hello There'
    print(locals())


#78 class to show implementation of static method
class Mathematics:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self, msg=""Demo class of Mathematics""):
        self.msg = msg

    def __str__(self):
        return f' String representation of an object'

    def __repr__(self):
        return f' repr representation of an object with parameter {self.msg}'

    @staticmethod
    def addition(a: ""Variable1"", b: 'Variable2'):
        """"""
        @staticmethod makes the mtethod of class as static method.
        It is always recommended to metion it via decorator.
        """"""
        return a+b


#79 class to show implementation of custom sequence of list
class CustomList:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self):
        self.list_ = [1,2,3,4]

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i
            
            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]


#80 class to show implementation of custom sequence of tuple
class CustomTuple:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self):
        self.list_ = (1,2,3,4)

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i
            
            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]


#81 generate intereger random number between user choice
def gen_ran_int_number(lower, upper):
    import random
    final = [ random.randint(lower, upper) for _ in range(10) ]
    return final


#82 function to show how to use f string
def f_string(msg: ""user message""):
    print(f'This is an f string with user paramter {msg}')


#83 function to show reading values from list is expensive in camparison to tuple
def compare_list_tuple():
    from timeit import timeit
    import random
    l = [ random.randint(1,100) for _ in range(100) ]
    tu = tuple(l)
    list_time = timeit(stmt = 'max(l)', globals = locals(), number = 1)
    tup_time = timeit(stmt = 'max(tu)', globals = locals(), number = 1)
    if list_time > tup_time:
        print('Hence proved')
    else:
        raise ValueError('You did something Wrong')


#84 generate random number using the concept of iterators
class RandomInt:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self):
       self.n = 10

    def __next__(self):
        if self.n > 0:
           print(random.randint(0,10))
           self.n -= 1
        else:
           raise StopIteration

    def __iter__(self):
        return self


#85 distinguish iter , iterables and iterator using example to print 10 random integers number
class RandomInt:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self):
       pass

    def __iter__(self):
        return self.RandomIntIterator(self)

    class RandomIntIterator:
        def __init__(self):
            self.count = 10

        def __iter__(self):
            return self

        def __next__(self):
            if self.count > 0:
                print(random.randint(0,10))
                self.count -= 1
            else:
                raise StopIteration


#86 show class of custom sequence type ,iter , iterables and iterator using example of tuple
class CustomTupleIter:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self):
        self.list_ = (1,2,3,4)

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i

            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

    def __iter__(self):
        return self.CustomTupleIterator(self)

    class CustomTupleIterator:
        def __init__(self, other):
            self.count = 0
            self.other = other

        def __iter__(self):
            return self

        def __next__(self):
            if self.count < len(self.other.list_):
                self.count += 1
                return self.other.list_[self.count]
            else:
                raise StopIteration


#87 clone of orginal list with two functionality i. iterating and sequence
class CustomListIter:
    """"""
    This is the space to do documentation related to class.
    """"""
    def __init__(self):
        self.list_ = [1,2,3,4]

    def __len__(self):
        return len(self.list_)

    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i

            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

    def __iter__(self):
        return self.CustomListIterator(self)

    class CustomListIterator:
        def __init__(self, other):
            self.count = 0
            self.other = other

        def __iter__(self):
            return self

        def __next__(self):
            if self.count < len(self.other.list_):
                self.count += 1
                return self.other.list_[self.count]
            else:
                raise StopIteration


#88 write a class that act like squares and should print the squares of values and and cuustom sequence type.
class Square:
    def __init__(self, n):
        self.n = n

    def __iter__(self):
        return self.show_sq(self.n)

    @staticmethod
    def show_sq(n):
         for i in range(n):
             yield i**2

    def __getitem__(self, i):
       if isinstance(i, int):
            if i < = self.n:
                print(i**2)
            else:
                raise ValueError('Index out of bound')


#89 fibonaaci using generator
def fibo(n):
    x = 0
    yield x
    y = 1
    yield y
    for i in range(n-1):
        x, y = y, x+y
        yield y



#90 show generator is faster than list
def show_gen_fast():
    from timeit import timeit
    dt = timeit(""[num for num in fib(100) ]"", globals = globals(), number=1)
    return dt",Code,Human
591,"def add_str(str1,str2):
   return str1 + str2",Code,Human
592,"class A(object):
    def foo(self):
        print(""class A"")

class B(object):
    def foo(self):
        print(""class B"")

class C(A, B):
    pass",Code,Human
593,"class A1(object):
   def foo(self):
      print(""class A1"")

class B1(A1):
   pass

class C1(A1):
   def foo(self):
      print(""class C1"")

class D1(B1,C1):
   pass",Code,Human
594,"a_list = []
print('ID:', id(a_list))
a_list += [1]
print('ID (+=):', id(a_list))
a_list = a_list + [2]
print('ID (list = list + ...):', id(a_list))",Code,Human
595,"a_list = []
print(a_list, '\nID (initial):',id(a_list), '\n')
a_list.append(1)
print(a_list, '\nID (append):',id(a_list), '\n')
a_list.extend([2])
print(a_list, '\nID (extend):',id(a_list))",Code,Human
596,"from platform import python_version
import datetime

print(""Current python version: "", python_version())
print('""datetime.time(0,0,0)"" (Midnight) ->', bool(datetime.time(0,0,0)))",Code,Human
597,,Code,Human
598,"a = 1
b = 1
print('a is b', bool(a is b))
c = 999
d = 999
print('c is d', bool(c is d))",Code,Human
599,"print('256 is 257-1', 256 is 257-1)
print('257 is 258-1', 257 is 258 - 1)
print('-5 is -6+1', -5 is -6+1)
print('-7 is -6-1', -7 is -6-1)",Code,Human
600,"a = 'hello world!'
b = 'hello world!'
print('a is b,', a is b)
print('a == b,', a == b)",Code,Human
601,"a = float('nan')
print('a is a,', a is a)
print('a == a,', a == a)",Code,Human
602,"list1 = [1,2]
list2 = list1",Code,Human
603,list3 = list1[:],Code,Human
604,list4 = list1.copy(),Code,Human
605,"print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\nlist4: {}\n'
      .format(id(list1), id(list2), id(list3), id(list4)))",Code,Human
606,"list1 = [[1],[2]]
list2 = list1.copy()",Code,Human
607,list3 = deepcopy(list1),Code,Human
608,"print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\n'
      .format(id(list1), id(list2), id(list3)))

#logical or logical and 
result = (2 or 3) * (5 and 7)
print('2 * 7 =', result)

#Don't use mutable objects as default arguments for functions!
def append_to_list(value, def_list=[]):
    def_list.append(value)
    return def_list
my_list = append_to_list(1)
print(my_list)

my_other_list = append_to_list(2)
print(my_other_list)",Code,Human
609,"import time
def report_arg(my_default=time.time()):
    print(my_default)
report_arg()
time.sleep(5)
report_arg()",Code,Human
610,"gen = (i for i in range(5))
print('2 in gen,', 2 in gen)
print('3 in gen,', 3 in gen)
print('1 in gen,', 1 in gen)",Code,Human
611,"gen = (i for i in range(5))
a_list = list(gen)",Code,Human
612,"print('isinstance(True, int):', isinstance(True, int))",Code,Human
613,"my_list = [lambda: i for i in range(5)]
for l in my_list:
    print(l())",Code,Human
614,"my_list = [lambda x=i: x for i in range(5)]
for l in my_list:
    print(l())",Code,Human
615,"x = 0
def in_func():
    x = 1
    print('in_func:', x)",Code,Human
616,"x = 0
def in_func1():
    x = 1
    print('in_func1:', x)
print('global:', x)",Code,Human
617,"x = 0
def in_func2():
    global x
    x = 1
    print('in_func2:', x)
in_func2()
print('global:', x)",Code,Human
618,"def outer():
    x = 1
    print('outer before:', x)

    def inner():
        x = 2
        print(""inner:"", x)
    inner()
    print(""outer after:"", x)
outer()",Code,Human
619,"def outer():
    x = 1
    print('outer before:', x)

    def inner():
        nonlocal x
        x = 2
        print(""inner:"", x)
    inner()
    print(""outer after:"", x)
outer()",Code,Human
620,"tup = (1,)
tup[0] += 1",Code,Human
621,"tup1 = ([],)
print('tup before: ', tup1)
tup1[0] += [1]",Code,Human
622,"tup = ([],)
print('tup before: ', tup)
tup[0].extend([1])
print('tup after: ', tup)",Code,Human
623,"tup = ([],)
print('tup before: ', tup)
tup[0].append(1)
print('tup after: ', tup)",Code,Human
624,"my_tup = (1,)
my_tup += (4,)
my_tup = my_tup + (5,)
print(my_tup)",Code,Human
625,"my_tup = (1,)
print(id(my_tup))
my_tup += (4,)
print(id(my_tup))
my_tup = my_tup + (5,)
print(id(my_tup))",Code,Human
626,"def plainlist(n=100000):
    my_list = []
    for i in range(n):
        if i % 5 == 0:
            my_list.append(i)
    return my_list",Code,Human
627,"def listcompr(n=100000):
    my_list = [i for i in range(n) if i % 5 == 0]
    return my_list",Code,Human
628,"def generator(n=100000):
    my_gen = (i for i in range(n) if i % 5 == 0)
    return my_gen",Code,Human
629,"def generator_yield(n=100000):
    for i in range(n):
        if i % 5 == 0:
            yield i",Code,Human
630,"import timeit
def test_plainlist(plain_list):
    for i in plain_list():
        pass


def test_listcompr(listcompr):
    for i in listcompr():
        pass


def test_generator(generator):
    for i in generator():
        pass


def test_generator_yield(generator_yield):
    for i in generator_yield():
        pass
print('plain_list:     ', end='')
%timeit test_plainlist(plainlist)
print('\nlistcompr:     ', end='')
%timeit test_listcompr(listcompr)
print('\ngenerator:     ', end='')
%timeit test_generator(generator)
print('\ngenerator_yield:     ', end='')
%timeit test_generator_yield(generator_yield)",Code,Human
631,"def public_method(self):
        print('Hello public world!')

    def __private_method(self):
        print('Hello private world!')

    def call_private_method_in_class(self):
        self.__private_method()


my_instance = my_class()

my_instance.public_method()
my_instance._my_class__private_method()
my_instance.call_private_method_in_class()",Code,Human
632,"a = [1, 2, 3, 4, 5]
for i in a:
    if not i % 2:
        a.remove(i)
print(a)
b = [2, 4, 5, 6]
for i in b:
     if not i % 2:
         b.remove(i)
print(b)",Code,Human
633,"b = [2, 4, 5, 6]
for index, item in enumerate(b):
    print(index, item)
    if not item % 2:
        b.remove(item)
print(b)",Code,Human
634,"print('first list:')
for i in range(3):
    print(i)
    
print('\nsecond list:')
for j in range(3):
    print(i)",Code,Human
635,,Code,Human
636,"my_list = [1, 2, 3, 4, 5]
print(my_list[5])",Code,Human
637,"def my_func():
    print(var)
var = 'global'
my_func()",Code,Human
638,"def my_func():
    var = 'locally changed'
var = 'global'
my_func()
print(var)",Code,Human
639,"def my_func():
    print(var)",Code,Human
640,var = 'locally changed',Code,Human
641,"var = 'global'
my_func()",Code,Human
642,"def my_func():
    global var
    print(var)",Code,Human
643,var = 'locally changed',Code,Human
644,"var = 'global'
my_func()
print(var)",Code,Human
645,"my_list1 = [[1, 2, 3]] * 2
print('initially ---> ', my_list1)",Code,Human
646,"my_list1[1][0] = 'a'
print(""after my_list1[1][0] = 'a' ---> "", my_list1)",Code,Human
647,"my_list2 = [[1, 2, 3] for i in range(2)]
print('initially:  ---> ', my_list2)",Code,Human
648,"my_list2[1][0] = 'a'
print(""after my_list2[1][0] = 'a':  ---> "", my_list2)

for a, b in zip(my_list1, my_list2):
    print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))",Code,Human
649,"def try_finally1():
    try:
        print('in try:')
        print('do some stuff')
        float('abc')
    except ValueError:
        print('an error occurred')
    else:
        print('no error occurred')
    finally:
        print('always execute finally')
try_finally1()",Code,Human
650,"a_var = str
a_var(123)

#random choice 
from random import choice

a, b, c = float, int, str
for i in range(5):
    j = choice([a,b,c])(i)
    print(j, type(j))",Code,Human
651,gen_fails = (i for i in 1/0),Code,Human
652,"gen_succeeds = (i for i in range(5) for j in 1/0)
print('But obviously fails when we iterate ...')
for i in gen_succeeds:
    print(i)",Code,Human
653,"def a_func(*args):
    print('type of args:', type(args))
    print('args contents:', args)
    print('1st argument:', args[0])
a_func(0, 1, 'a', 'b', 'c')",Code,Human
654,"def b_func(**kwargs):
    print('type of kwargs:', type(kwargs))
    print('kwargs contents: ', kwargs)
    print('value of argument a:', kwargs['a'])

b_func(a=1, b=2, c=3, d=4)",Code,Human
655,"val1, *vals = [1, 2, 3, 4, 5]
print('val1:', val1)
print('vals:', vals)",Code,Human
656,"for i in range(5):
    if i == 1:
        print('in for')
else:
    print('in else')
print('after for-loop')",Code,Human
657,"for i in range(5):
    if i == 1:
        break
else:
    print('in else')
print('after for-loop')",Code,Human
658,"a_list = [1,2]
if a_list[0] == 1:
    print('Hello, World!')
else:
    print('Bye, World!')",Code,Human
659,"i = 0
while i < 2:
    print(i)
    i += 1
else:
    print('in else')",Code,Human
660,"hello1 = 'Hello'
hello2 = 'Hell' + 'o'
hello3 = 'Hell'
hello3 = hello3 + 'o'
print('hello1 is hello2:', hello1 is hello2)
print('hello1 is hello3:', hello1 is hello3)",Code,Human
661,"import dis
def hello1_func():
    s = 'Hello'
    return s
dis.dis(hello1_func)",Code,Human
662,"def greet(name):
    """"""
    This function greets to
    the person passed in as
    a parameter
    """"""
    print(""Hello, "" + name + "". Good morning!"")",Code,Human
663,"def absolute_value(num):
    """"""This function returns the absolute
    value of the entered number""""""

    if num >= 0:
        return num
    else:
        return -num
print(absolute_value(2))
print(absolute_value(-4))

#usage of dictionary
dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print ""dict['Name']: "", dict['Name']
print ""dict['Age']: "", dict['Age']",Code,Human
664,"str = input(""Enter your input: "")
print (""Received input is : "", str)",Code,Human
665,def catalan(n):,Code,Human
666,"if n <= 1: 
        return 1",Code,Human
667,,Code,Human
668,"res = 0
    for i in range(n): 
        res += catalan(i) * catalan(n-i-1) 
  
    return res",Code,Human
669,"for i in range(10): 
    print (catalan(i))",Code,Human
670,"def binomialCoeff(n , k): 
  
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1",Code,Human
671,"return binomialCoeff(n-1 , k-1) + binomialCoeff(n-1 , k)",Code,Human
672,"n = 5
k = 2
print (""Value of C(%d,%d) is (%d)"" %(n , k , binomialCoeff(n , k)) )",Code,Human
673,""""""" To make use of recursive calls, this function must return 
 two things: 
 1) Length of LIS ending with element arr[n-1]. We use 
 max_ending_here for this purpose 
 2) Overall maximum as the LIS may end with an element 
 before arr[n-1] max_ref is used this purpose. 
 The value of LIS of full array of size n is stored in 
 *max_ref which is our final result """"""",Code,Human
674,"global maximum 
  
def _lis(arr , n ):",Code,Human
675,global maximum,Code,Human
676,"if n == 1 : 
        return 1",Code,Human
677,"maxEndingHere = 1
  
    """"""Recursively get all LIS ending with arr[0], arr[1]..arr[n-2] 
       IF arr[n-1] is maller than arr[n-1], and max ending with 
       arr[n-1] needs to be updated, then update it""""""
    for i in range(1, n): 
        res = _lis(arr , i) 
        if arr[i-1] < arr[n-1] and res+1 > maxEndingHere: 
            maxEndingHere = res +1",Code,Human
678,,Code,Human
679,"maximum = max(maximum , maxEndingHere) 
  
    return maxEndingHere 
  
def lis(arr):",Code,Human
680,global maximum,Code,Human
681,n = len(arr),Code,Human
682,maximum = 1,Code,Human
683,"_lis(arr , n) 
  
    return maximum",Code,Human
684,"arr = [10 , 22 , 9 , 33 , 21 , 50 , 41 , 60] 
n = len(arr) 
print (""Length of lis is "", lis(arr) )",Code,Human
685,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")",Code,Human
686,"elif n==0: 
        return 0",Code,Human
687,"elif n==1: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2)",Code,Human
688,print(Fibonacci(9)),Code,Human
689,"def add_two_list_items():
    num1 = [1,2,3]
    num2 = [4,5,6]
    sum = num1 + num2
    print(f'Sum: {sum}')",Code,Human
690,"def add_two_lists_even_odd(l1, l2):
    new = []
    for x, y in zip(l1, l2):
        if l1%2 == 0 and l2%2 != 0:
            new.append(x+y)
    return new",Code,Human
691,"kmh = 50
mph =  0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")",Code,Human
692,"num1 = 100
num2 = 200
num3 = 300
if (num1 <= num2) and (num1 <= num3):
    smallest = num1
elif (num2 <= num1) and (num2 <= num3):
    smallest = num2
else:
    smallest = num3
print(f'smallest:{smallest}')",Code,Human
693,"raw_list = [-5, -23, 5, 0, 23, -6, 23, 67]
sorted_list = []
while raw_list:
    minimum = raw_list[0]   
    for x in raw_list: 
        if x < minimum:
            minimum = x
    sorted_list.append(minimum)
    raw_list.remove(minimum)    

print(soreted_list)",Code,Human
694,"import time
def time_it(fn, *args, repetitons= 1, **kwargs):
    start = time.perf_counter()
    if (repetitons <= 0):
        raise ValueError(""repetitions should be greater that 0"")
    if (not(isinstance(repetitons,int))):
        raise ValueError(""Repetions must be of type Integer"")
    for _ in range(repetitons):
        fn(*args, **kwargs)
    stop = time.perf_counter()
    return ((stop - start)/repetitons)",Code,Human
695,"def simple_interest(p,t,r): 
   
    si = (p * t * r)/100
    return si",Code,Human
696,"start = 11
end = 25
 
for i in range(start,end):
  if i>1:
    for j in range(2,i):
        if(i % j==0):
            break
    else:
        print(i)",Code,Human
697,"def word_counter():
    counter = {}
    def count(word):
        counter[word] = counter.get(word, 0) + 1
        return counter[word]
    return count",Code,Human
698,"st = 'malayalam'
j = -1
flag = 0
for i in st:
    if i != st[j]:
      j = j - 1
      flag = 1
      break
    j = j - 1
if flag == 1:
    print(""Not a palindrome"")
else:
    print(""It is a palindrome"")",Code,Human
699,"import re 
def Find(string): 
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url]",Code,Human
700,"l = [1000,298,3579,100,200,-45,900] 
n = 4
l.sort() 
print(l[-n:])",Code,Human
701,"nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
result = map(lambda x, y: x + y, nums1, nums2)
print(list(result))",Code,Human
702,"def float_equality_testing(a, b):
    
    rel_tol = 1e-12
    abs_tol = 1e-05
    return abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)",Code,Human
703,"def polygon_area( side_length, sides = 3):
    if(sides < 3 or sides > 6 ):
        raise ValueError(""number of sides must be greater than 2 and less than 7"")
    if(side_length < 0 ):
        raise ValueError(""side length must be positive"")

    return sides * (side_length ** 2) / (4 * tan(pi / sides))",Code,Human
704,"Input = [[10, -11, 222], [42, -222, -412, 99, -87]] 
temp = map(lambda elem: filter(lambda a: a>0, elem), Input) 
Output = [[a for a in elem if a>0] for elem in temp]",Code,Human
705,"def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples",Code,Human
706,"list=[10,20,30,40,50]
new_list=[] 
j=0
for i in range(0,len(list)):
    j+=list[i]
    new_list.append(j) 
     
print(new_list)",Code,Human
707,"s = ['I', 'want', 4, 'apples', 'and', 18, 'bananas'] 
listToStr = ' '.join(map(str, s)) 
print(listToStr)",Code,Human
708,"x = {'a' : 1, 'b' : 2, 'c' : 3}
y = {'x' : 10, 'y' : 20, 'z' : 30 }
z = {**x , **y}",Code,Human
709,"import math
def sigmoid(x):
  return 1 / (1 + math.exp(-x))",Code,Human
710,"def relu(array):
    return [max(0,i) for i in array if(isinstance(i, int) or isinstance(i, float))]",Code,Human
711,"def fiboacci_number_check(n):
    if(isinstance(n,int)):
        result = list(filter(lambda num : int(math.sqrt(num)) * int(math.sqrt(num)) == num, [5*n*n + 4,5*n*n - 4] ))
        return bool(result) 
    else:
        raise TypeError(""Input should be of type Int"")",Code,Human
712,"string = ""Remove Vowel""
vowel = ['a', 'e', 'i', 'o', 'u']
"""".join([i for i in string if i not in vowel]",Code,Human
713,"num_1, num_2,count = 0, 1,0

    def next_fibbonacci_number() :
    
        nonlocal num_1, num_2, count

        if(count == 0):
            count+=1
            return 0
        elif(count==1):
            count+=1
            return num_2
        else:
            num_1, num_2 = num_2, num_1+num_2
            return num_2

    return next_fibbonacci_number",Code,Human
714,"def factorial(n):
    fact = 1
    for num in range(2, n + 1):
        fact = fact * num
    return(fact)",Code,Human
715,"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print(','.join(l))",Code,Human
716,"import csv
def read_csv(input_file):
    with open(input_file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
                print(f'{row}')
                break",Code,Human
717,"import random
print(random.randint(0,9))",Code,Human
718,"year = 2000
if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(f""{year} is a leap year"")
       else:
           print(f""{year} is not a leap year"")
   else:
       print(f""{year} is a leap year"")
else:
   print(f""{year} is not a leap year"")",Code,Human
719,"def compute_lcm(x, y):
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm",Code,Human
720,"def compute_gcd(x, y):

   while(y):
       x, y = y, x % y
   return x",Code,Human
721,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char
print(no_punct)",Code,Human
722,"import hashlib
def hash_file(filename):

   h = hashlib.sha1()
   with open(filename,'rb') as file:
       chunk = 0
       while chunk != b'':
           chunk = file.read(1024)
           h.update(chunk)
   return h.hexdigest()",Code,Human
723,"def jpeg_res(filename):
   with open(filename,'rb') as img_file:
       img_file.seek(163)

       a = img_file.read(2)",Code,Human
724,height = (a[0] << 8) + a[1],Code,Human
725,a = img_file.read(2),Code,Human
726,"width = (a[0] << 8) + a[1]

   print(""The resolution of the image is"",width,""x"",height)",Code,Human
727,"ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)",Code,Human
728,"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))",Code,Human
729,"import cmath
a = 1
b = 5
c = 6
d = (b**2) - (4*a*c)
sol1 = (-b-cmath.sqrt(d))/(2*a)
sol2 = (-b+cmath.sqrt(d))/(2*a)
print('The solution are {0} and {1}'.format(sol1,sol2))",Code,Human
730,"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(f'{celsius} degree Celsius is equal to {fahrenheit} degree Fahrenheit')",Code,Human
731,"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10
if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")",Code,Human
732,"num = 16
if num < 0:
   print(""Enter a positive number"")
else:
   sum = 0
   while(num > 0):
       sum += num
       num -= 1
   print(""The sum is"", sum)",Code,Human
733,"import itertools, random
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))
random.shuffle(deck)
print(deck)",Code,Human
734,"def convertToBinary(n):
   if n > 1:
       convertToBinary(n//2)
   print(n % 2,end = '')",Code,Human
735,"def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print(""Move disk 1 from source"",source,""to destination"",destination) 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print(""Move disk"",n,""from source"",source,""to destination"",destination) 
    TowerOfHanoi(n-1, auxiliary, destination, source)",Code,Human
736,"import datetime  
import calendar 
   
def day_occur_time(year): 
    days = [ ""Monday"", ""Tuesday"", ""Wednesday"",   
           ""Thursday"",  ""Friday"", ""Saturday"",  
           ""Sunday"" ] 
    L = [52 for i in range(7)] 

    pos = -1
    day = datetime.datetime(year, month = 1, day = 1).strftime(""%A"") 
    for i in range(7): 
        if day == days[i]: 
            pos = i 
    if calendar.isleap(year): 
        L[pos] += 1
        L[(pos+1)%7] += 1       
    else: 
        L[pos] += 1

    for i in range(7): 
        print(days[i], L[i])",Code,Human
737,"limit= 50
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1",Code,Human
738,"def binary_to_gray(n):
    n = int(n, 2) 
    n ^= (n >> 1)
    return bin(n)[2:]",Code,Human
739,"def intersection(a, b):
    return list(set(a) & set(b))",Code,Human
740,"d = {'a':1,'b':2,'c':3,'d':4}
key= 'd'
if key in d: 
    del d[key]
else:
    print(""Key not found!"")
    exit(0)",Code,Human
741,"def word_count(fname) : 
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print(num_words)",Code,Human
742,"def count_set_bits(n):
    count = 0
    while n:
        n &= n - 1
        count += 1
    return count",Code,Human
743,"a=[[1,[[2]],[[[3]]]],[[4],5]]
flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]
print(flatten(a))

#

import os
import nltk
import string
from collections import Counter
from itertools import permutations, combinations, combinations_with_replacement

letters = string.ascii_lowercase",Code,Human
744,"def pyramid_pattern(symbol='*', count=4):
    for i in range(1, count + 1):
        print(' ' * (count - i) + symbol * i, end='')
        print(symbol * (i - 1) + ' ' * (count - i))",Code,Human
745,"def check_word_count(word, file):
    if not os.path.isfile(file):
        raise FileNotFoundError
    if not isinstance(word, str):
        raise TypeError

    with open(file, 'r') as f:
        lines = f.readlines()
        words = [l.strip().split(' ') for l in lines]
        words = [word for sublist in words for word in sublist]
        c = Counter(words)
    return c.get(word, 0)",Code,Human
746,"def get_permutations(data_list, l=2):
    return list(permutations(data_list, r=l))",Code,Human
747,"def get_ordered_permutations(word, k):
    [print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]",Code,Human
748,"def get_ordered_combinations(string, k):
    [print(''.join(x)) for i in range(1, int(k) + 1) for x in combinations(sorted(string), i)]",Code,Human
749,"def get_ordered_combinations_with_replacement(string, k):
    [print(''.join(x)) for x in combinations_with_replacement(sorted(string), int(k))]",Code,Human
750,"def caesar_cipher(text, shift=1):
    alphabet = string.ascii_lowercase
    shifted_alphabet = alphabet[shift:] + alphabet[:shift]
    table = str.maketrans(alphabet, shifted_alphabet)
    return text.translate(table)",Code,Human
751,"def swap_case(s):
    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))",Code,Human
752,"def symmetric_diff_sets():
    M, m = input(), set(list(map(int, input().split())))
    N, n = input(), set(list(map(int, input().split())))
    s = sorted(list(m.difference(n)) + list(n.difference(m)))
    for i in s:
        print(i)",Code,Human
753,"def check_subset():
    for _ in range(int(input())):
        x, a, z, b = input(), set(input().split()), input(), set(input().split())
    print(a.issubset(b))",Code,Human
754,"from html.parser import HTMLParser


class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(""->"", attr[0], "">"", attr[1])


parser = MyHTMLParser()

for i in range(int(input())):
    parser.feed(input())",Code,Human
755,"def ner_checker(texts):
    all_set = set()

    def nltk_ner_check(texts):
        for i, text in texts:
            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):
                if isinstance(entity, nltk.tree.Tree):
                    etext = "" "".join([word for word, tag in entity.leaves()])",Code,Human
756,"all_set.add(etext)

    nltk_ner_check(texts=texts)
    return all_set


#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.
def compress(text):
    from itertools import groupby
    for k, g in groupby(text):
        print(""({}, {})"".format(len(list(g)), k), end="" "")",Code,Human
757,"def repeated_string(s, n):
    return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')",Code,Human
758,"def find_substr():
    import re
    v = ""aeiou""
    c = ""qwrtypsdfghjklzxcvbnm""
    m = re.findall(r""(?<=[%s])([%s]{2,})[%s]"" % (c, v, c), input(), flags=re.I)
    print('\n'.join(m or ['-1']))",Code,Human
759,"def min_max():
    nums = [int(x) for x in input().strip().split(' ')]
    print(sum(nums) - max(nums), sum(nums) - min(nums))",Code,Human
760,"def divisible_sum_pairs(arr, k):
    count = 0
    n = len(arr)
    for i in range(n - 1):
        j = i + 1
        while j < n:
            if ((arr[i] + arr[j]) % k) == 0:
                count += 1
            j += 1
    return count


import math",Code,Human
761,"class CircleArea:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius * self.radius


r = 2
obj = CircleArea(r)
print(""Area of circle:"", obj.area())",Code,Human
762,"def check_words():
    fname = input(""file name: "")
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print(""Number of words = "", num_words)",Code,Human
763,"def check_lines():
    fname = input(""file name: "")
    num_lines = 0
    with open(fname, 'r') as f:
        for line in f:
            num_lines += 1
    print(""Number of lines = "", num_lines)",Code,Human
764,"def count_blank_space():
    fname = input(""file name:"")
    count = 0
    with open(fname, 'r') as f:
        for line in f:
            count += line.count(' ')
    return count",Code,Human
765,"def anagram(s1, s2):
    if sorted(s1) == sorted(s2):
        return True
    else:
        return False",Code,Human
766,"def remove_duplicates(data):
    c = Counter(data)
    s = set(data)
    for item in s:
        count = c.get(item)
        while count > 1:
            data.pop(item)
            count -= 1
    return data",Code,Human
767,"def most_common(text):
    c = Counter(text)
    return c.most_common(1)",Code,Human
768,"def bit_mul(n, shift):
    return n << shift",Code,Human
769,"def bit_div(n, shift):
    return n >> shift",Code,Human
770,"from collections import deque

class Queue():
    '''
    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and
    dequeueing in worst-case O(1) time.
    '''


    def __init__(self, max_size = 10):
        '''
        Initialize this queue to the empty queue.

        Parameters
        ----------
        max_size : int
            Maximum number of items contained in this queue. Defaults to 10.
        '''

        self._queue = deque(maxlen=max_size)


    def enqueue(self, item):
        '''
        Queues the passed item (i.e., pushes this item onto the tail of this
        queue).

        If this queue is already full, the item at the head of this queue
        is silently removed from this queue *before* the passed item is
        queued.
        '''

        self._queue.append(item)


    def dequeue(self):
        '''
        Dequeues (i.e., removes) the item at the head of this queue *and*
        returns this item.

        Raises
        ----------
        IndexError
            If this queue is empty.
        '''

        return self._queue.pop()",Code,Human
771,"def dot_product(a, b):
    return sum(e[0] * e[1] for e in zip(a, b))",Code,Human
772,"def strip_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))",Code,Human
773,"from functools import reduce


def biggest_char(string):
    if not isinstance(string, str):
        raise TypeError
    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)",Code,Human
774,"def count_digits():
    n = int(input(""Enter number:""))
    count = 0
    while n > 0:
        count = count + 1
        n = n // 10
    return count",Code,Human
775,"def count_vowels(text):
    v = set('aeiou')
    for i in v:
        print(f'\n {i} occurs {text.count(i)} times')",Code,Human
776,"def check_ip():
    import re
    import urllib.request as ur
    url = ""http://checkip.dyndns.org""
    with ur.urlopen(url) as u:
        s = str(u.read())
        ip = re.findall(r""\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"", s)
        print(""IP Address: "", ip[0])
        return ip[0]",Code,Human
777,"def weird():
    import random

    def getlength(script):
        return sum((i['length'] for i in script))

    def truncate(target_length, script):
        if getlength(script) > target_length:
            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]
            return truncate(target_length, script)
        return sorted(script, key=lambda k: k['index'])

    def as_text(script):
        return ""\n"".join([i['text'] for i in script])

    priorities_and_sentences = [
        (1, ""...now... sitting comfortably in the chair""),
        (2, ""...with your feet still flat on the ground""),
        (3, ""...back straight and head up right""),
        (2, ""...make these adjustments now if you need to""),
        (3, ""... pause..............................""),
        (1, ""...your eyes ...still ...comfortably closed""),
        (2, ""...nice and relaxed...comfortable and relaxed...""),
        (3, ""... pause.......................................""),
        (1, ""...now...I want you to notice...how heavy your head is starting to feel...""),
        (1, ""how heavy your head feels...""),
        (3, ""... pause.......................................""),
        (2, ""really noticing the weight... of your head...""),
        (3,
         ""and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable""),
    ]

    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in
                  enumerate(priorities_and_sentences)]

    print(as_text(truncate(500, scriptlist)))
    print(as_text(truncate(300, scriptlist)))
    print(as_text(truncate(200, scriptlist)))",Code,Human
778,"def dice():
    import random
    min = 1
    max = 6
    roll_again = 'y'

    while roll_again == ""yes"" or roll_again == ""y"":
        print(""Rolling the dice..."")
        print(random.randint(min, max))
        roll_again = input(""Roll the dices again?"")


from cryptography.fernet import Fernet",Code,Human
779,"class Secure:
    def __init__(self):
        """"""
           Generates a key and save it into a file
        """"""
        key = Fernet.generate_key()
        with open(""secret.key"", ""wb"") as key_file:
            key_file.write(key)

    @staticmethod
    def load_key():
        """"""
        Load the previously generated key
        """"""
        return open(""secret.key"", ""rb"").read()

    def encrypt_message(self, message):
        """"""
        Encrypts a message
        """"""
        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print(""\nMessage has been encrypted: "", encrypted_message)
        return encrypted_message

    def decrypt_message(self, encrypted_message):
        """"""
        Decrypts an encrypted message
        """"""
        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print(""\nDecrypted message:"", decrypted_message.decode())


s = Secure()
encrypted = s.encrypt_message(""My deepest secret!"")
s.decrypt_message(encrypted)",Code,Human
780,"def get_sha256(text):
    import hashlib
    return hashlib.sha256(text).hexdigest()",Code,Human
781,"def check_sha256_hash(hashed, data):
    import hashlib
    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False",Code,Human
782,"def get_html(url=""http://www.python.org""):
    import urllib.request

    fp = urllib.request.urlopen(url)
    mybytes = fp.read()
    mystr = mybytes.decode(""utf8"")
    fp.close()
    print(mystr)",Code,Human
783,"def get_btc_price(interval=5):
    import requests
    import json
    from time import sleep

    def getBitcoinPrice():
        URL = ""https://www.bitstamp.net/api/ticker/""
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)[""last""])
            return priceFloat
        except requests.ConnectionError:
            print(""Error querying Bitstamp API"")

    while True:
        print(""Bitstamp last price: US $ "" + str(getBitcoinPrice()) + ""/BTC"")
        sleep(interval)",Code,Human
784,"def get_stock_prices(tickerSymbol='TSLA'):
    import yfinance as yf",Code,Human
785,tickerData = yf.Ticker(tickerSymbol),Code,Human
786,"tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')",Code,Human
787,print(tickerDf),Code,Human
788,"def get_artists():
    import requests
    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'
    response = requests.get(url)
    data = response.json()
    for artist_dict in data['feed']['entry']:
        artist_name = artist_dict['im:artist']['label']
        print(artist_name)",Code,Human
789,"def get_words(corpus, new_doc, top=2):
    import numpy as np
    from sklearn.feature_extraction.text import TfidfVectorizer

    tfidf = TfidfVectorizer(stop_words='english')
    if not corpus:
        corpus = [
            'I would like to check this document',
            'How about one more document',
            'Aim is to capture the key words from the corpus',
            'frequency of words in a document is called term frequency'
        ]

    X = tfidf.fit_transform(corpus)
    feature_names = np.array(tfidf.get_feature_names())

    if not new_doc:
        new_doc = ['can key words in this new document be identified?',
                   'idf is the inverse document frequency calculated for each of the words']
    responses = tfidf.transform(new_doc)

    def get_top_tf_idf_words(response, top_n=top):
        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]
        return feature_names[response.indices[sorted_nzs]]

    print([get_top_tf_idf_words(response, 2) for response in responses])",Code,Human
790,"import os


def get_word(data):
    if not (isinstance(data, str) or os.path.isfile(data)):
        raise TypeError(""Text must be string or a File object."")
    from wordcloud import WordCloud, STOPWORDS
    import matplotlib.pyplot as plt
    stopwords = set(STOPWORDS)
    if os.path.isfile(data):
        with open(data, 'r') as f:
            data = f.read()

    data = ' '.join(data.lower().split(' '))
    wordcloud = WordCloud(width=400, height=400,
                          background_color='white',
                          stopwords=stopwords,
                          min_font_size=15).generate(data)",Code,Human
791,"plt.figure(figsize=(8, 8), facecolor=None)
    plt.imshow(wordcloud)
    plt.axis(""off"")
    plt.tight_layout(pad=0)

    plt.show()",Code,Human
792,,Code,Human
793,"def sort_list_with_key():
    animals = [
        {'type': 'lion', 'name': 'Mr. T', 'age': 7},
        {'type': 'tiger', 'name': 'scarface', 'age': 3},
        {'type': 'puma', 'name': 'Joe', 'age': 4}]
    print(sorted(animals, key=lambda animal: -animal['age']))",Code,Human
794,"def infinite_sequence():
    n = 0
    while True:
        yield n
        n += 1


import uuid",Code,Human
795,"def get_uuid():
    return uuid.uuid4()


import secrets",Code,Human
796,"def get_cryptographically_secure_data(n=101):
    return secrets.token_bytes(n), secrets.token_hex(n)",Code,Human
797,"def byte_to_utf8(data):
    return data.decode(""utf-8"")
print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))",Code,Human
798,"def rectangle_area(length, breadth):
    area = length * breadth    
    return area",Code,Human
799,"def square_cube(number):
    print(number ** 2)  
    print(number ** 3)",Code,Human
800,"cm=int(input(""Enter the height in centimeters:""))
inches=0.394*cm
feet=0.0328*cm
print(""The length in inches"",round(inches,2))
print(""The length in feet"",round(feet,2))",Code,Human
801,"l = [1,2,3,4,5,5,5,5,5,5,5,7,8,8,0]
result = set(l)
print(""Result : "",result)

#write a python function which takes length of sides as user input to calculate and return the area of a triangle

def triangle_area(a,b,c):
    s = (a+b+c)/2
    area = (s(s-a)*(s-b)*(s-c)) ** 0.5
    return(area)",Code,Human
802,"num1 = 130
num2 = 34
num1,num2 = num2,num1",Code,Human
803,"principal = float(input(""Enter principal : ""))
rate= float(input(""Enter rate : ""))
time = float(input(""Enter time : ""))
simple_interest = print(f""Simple Interest : {(principal*rate*time/100)}"")",Code,Human
804,"Number = int(input(""Please Enter any Number: ""))    
Reverse = 0    
while(Number > 0):    
    Reminder = Number %10    
    Reverse = (Reverse *10) + Reminder    
    Number = Number //10    
     
print(""\n Reverse of entered number is = %d"" %Reverse)",Code,Human
805,"year = int(input(""Enter a year: ""))  
if (year % 4) == 0:  
   if (year % 100) == 0:  
       if (year % 400) == 0:  
           print(f""{year} is a leap year"")  
       else:  
           print(f""{year} is not a leap year"")  
   else:  
       print(f""{year} is a leap year"")  
else:  
   print(f""{year} is not a leap year"")",Code,Human
806,"num = int(input(""Enter number :""))
lim = int(num/2) + 1
for i in range(2,lim):
    rem = num % i
    if rem == 0 :
        print(num,""is not a prime number"")
        break
else:
    print(num,""is a prime number"")",Code,Human
807,"string = input(""Please Enter your Own String : "")

string1 = string.upper()
 
print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)",Code,Human
808,"str1 = input(""Please Enter Your Own String : "")
vowels = 0
 
for i in str1:
    if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A'
       or i == 'E' or i == 'I' or i == 'O' or i == 'U'):
        vowels = vowels + 1
 
print(""Total Number of Vowels in this String = "", vowels)",Code,Human
809,"maximum = int(input("" Please Enter any Maximum Value : ""))

for number in range(1, maximum + 1):
    if(number % 2 != 0):
        print(""{0}"".format(number))",Code,Human
810,"maximum = int(input("" Please Enter the Maximum Value : ""))

for number in range(1, maximum+1):
    if(number % 2 == 0):
        print(""{0}"".format(number))",Code,Human
811,"number1 = input("" Please Enter the First Number: "")
number2 = input("" Please Enter the second number: "")

sum = float(number1) + float(number2)
print('The sum of {0} and {1} is {2}'.format(number1, number2, sum))",Code,Human
812,"num1 = int(input(""Enter first number :""))
num2 = int(input(""Enter second number :""))
remainder  = num1 % num2
if remainder == 0:
    print(num1 ,"" is divisible by "",num2)
else :
    print(num1 ,"" is not divisible by "",num2)",Code,Human
813,"num = int(input(""Please enter a number ""))
for a in range(1,11):
    print(num , 'x' , a , '=' ,num*a)",Code,Human
814,"num = int(input(""Please enter a number ""))
fact = 1
a = 1
while a <= num :
    fact *= a
    a += 1
print(""The factorial of "",num, "" is "",fact)",Code,Human
815,"a = float(input(""Please Enter the First value: ""))
b = float(input(""Please Enter the First value: ""))
c = float(input(""Please Enter the First value: ""))

if (a > b and a > c):
          print(""{0} is Greater Than both {1} and {2}"". format(a, b, c))
elif (b > a and b > c):
          print(""{0} is Greater Than both {1} and {2}"". format(b, a, c))
elif (c > a and c > b):
          print(""{0} is Greater Than both {1} and {2}"". format(c, a, b))
else:
          print(""Either any two values or all the three values are equal"")",Code,Human
816,"N = int(input(""Please enter a number ""))
first = 0
second = 1
print(first)
print(second)
for a in range(1,N-1):
    third = first + second
    print(third)
    first,second = second , third",Code,Human
817,"num = int(input(""Please enter a integer ""))
mid = int(num / 2)
print(""The divisiors of "",num,"" are :"" )
for a in range(2,mid + 1):
    if num % a == 0:
        print(a, end = ' ')
else :
    print()
    print(""-End-"")",Code,Human
818,"n=int(input(""Enter the number of elements to be inserted: ""))
a=[]
for i in range(0,n):
    elem=int(input(""Enter element: ""))
    a.append(elem)
avg=sum(a)/n
print(""Average of elements in the list"",round(avg,2))",Code,Human
819,"N = int(input(""Enter Number : ""))
sum = 0
i = 1
while i <= N:
    sum = sum + i
    i = i + 2
print(sum)",Code,Human
820,"def isPalindrome(s):
    return s == s[::-1]",Code,Human
821,"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
    sum  = sum + i
mean = sum / len(lst)
print("" The mean of given list is :"", mean)",Code,Human
822,"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
    sum  = sum + i
print("" The mean of given list is :"", sum)",Code,Human
823,"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
    sum  = sum + i
print("" The mean of given list is :"", sum)",Code,Human
824,"def common_member(a, b): 
    a_set = set(a) 
    b_set = set(b) 
  
    if (a_set & b_set): 
        print(a_set & b_set) 
    else: 
        print(""No common elements"")",Code,Human
825,"lst1 = eval(input(""Enter list : ""))
lst2 = eval(input(""Enter list : ""))
print(lst1 + lst2)",Code,Human
826,"i = 0
while i<= 100:
 print(i, ""\t\t"" , i**0.5)
 i = i + 1

#write a python program greets the user with ""Hello"", after user inputs his name:
name = input (""Input your name: "")
print(""HELLO "", name)",Code,Human
827,"name = input(""Enter String"")
print(name[::-1])",Code,Human
828,"lst = eval(input(""Enter list""))
print(lst[::-1])",Code,Human
829,"sentence = input(""Enter a sentence : "")

def fn(sentence):
    vowels = 'aeiou'
    return ''.join([ l for l in sentence if l not in vowels])",Code,Human
830,"keys = eval(input(""Enter key list : ""))
values = eval(input(""Enter value list : ""))
def fn(keys, values):
    return { keys[i] : values[i] for i in range(len(keys)) }",Code,Human
831,def factorial(n):,Code,Human
832,return 1 if (n==1 or n==0) else n * factorial(n - 1);,Code,Human
833,"def findArea(r): 
    PI = 3.142
    return PI * (r*r);",Code,Human
834,"def compound_interest(principle, rate, time):",Code,Human
835,"Amount = principle * (pow((1 + rate / 100), time)) 
    CI = Amount - principle 
    print(""Compound interest is"", CI)",Code,Human
836,"character = input("" Enter Character :"")
print(f""Ascii value of character {character} is : "" , ord(character))",Code,Human
837,"N = int(input(""Enter Integer ""))
lst = [i**3 for i in range(1, N + 1)]
print(sum(lst))",Code,Human
838,"def convert(list): 
    return tuple(list)",Code,Human
839,"def last(n): return n[-1]

def sort_list_last(tuples):
  return sorted(tuples, key=last)

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))",Code,Human
840,"d1 = {'a' : 1 ,'b' : 2}
d2 = {'c' : 1 ,'d' : 2}
d3 = {**d1,**d2}
print(d3)",Code,Human
841,"#Create a set
seta = set([5, 10, 3, 15, 2, 20])
#Find the length use len()
print(len(seta))",Code,Human
842,"s1 = eval(input(""Enter set 1 ""))
s2 = eval(input(""Enter set 2 ""))
print(s1.intersection(s2))",Code,Human
843,"s1 = eval(input(""Enter list ""))
mean = sum(s1) / len(s1) 
print(""Mean of sample is : "" + str(mean))",Code,Human
844,"mean = sum(s1) / len(s1) 
variance = sum([((x - mean) ** 2) for x in s1]) / len(s1) 
res = variance ** 0.5
print(""Standard deviation of sample is : "" + str(res))",Code,Human
845,"import random
n = random.random()
print(n)",Code,Human
846,"foo = input(""Enter String : "")
print(""Duplicates Removed"","""".join(set(foo)))",Code,Human
847,"def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1",Code,Human
848,"def not_poor(str1):
  snot = str1.find('not')
  spoor = str1.find('poor')
  

  if spoor > snot and snot>0 and spoor>0:
    str1 = str1.replace(str1[snot:(spoor+4)], 'good')
    return str1
  else:
    return str1",Code,Human
849,"def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts",Code,Human
850,"def add_tags(tag, word):
	return ""<%s>%s</%s>"" % (tag, word, tag)",Code,Human
851,"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)",Code,Human
852,"count_odd = 0
count_even = 0
for x in numbers:
        if not x % 2:
    	     count_even+=1
        else:
    	     count_odd+=1
             
#Write a Python program that prints each item and its corresponding type from the following list.

datalist = [1452, 11.23, 1+2j, True, 'w3resource', (0, -1), [5, 12],
{""class"":'V', ""section"":'A'}]
for item in datalist:
   print (""Type of "",item, "" is "", type(item))",Code,Human
853,"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}

print({k :v for k,v in sorted(d.items(),key = lambda x : x[1])})",Code,Human
854,"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}

print({k :v for k,v in sorted(d.items(),key = lambda x : x[1],reverse = True)})",Code,Human
855,"numbers = [1, 3, 4, 2] 
numbers.sort()  
print(numbers)",Code,Human
856,"def Sort_Tuple(tup):  

    return(sorted(tup, key = lambda x: x[1]))   
  
tup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  

print(Sort_Tuple(tup))",Code,Human
857,"print(""Enter first number"")
first = input()
print(""Enter second number"")
second = input()
print(first == second)",Code,Human
858,"s1 = eval(input(""Enter list ""))
print([i**2 for i in s1])",Code,Human
859,"s1 = eval(input(""Enter list ""))
print([i**3 for i in s1])",Code,Human
860,"s1 = eval(input(""Enter list ""))
print([i**0.5 for i in s1])",Code,Human
861,"def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]",Code,Human
862,"s1 = input(""Enter string "")
print(""Count of words"",len(s1.split()))",Code,Human
863,"def SortTuple(tup): 
      
    n = len(tup) 
      
    for i in range(n): 
        for j in range(n-i-1): 
              
            if tup[j][0] > tup[j + 1][0]: 
                tup[j], tup[j + 1] = tup[j + 1], tup[j] 
                  
    return tup",Code,Human
864,"a=[]
n= int(input(""Enter the number of elements in list:""))
for x in range(0,n):
    element=int(input(""Enter element"" + str(x+1) + "":""))
    a.append(element)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print(""New list is:"")
print(a)",Code,Human
865,"from datetime import date
print(date.today())",Code,Human
866,"def countMaxIntersect(n): 
    return int(n*(n - 1)/2)",Code,Human
867,"n=int(input(""Enter number of rows: ""))
for i in range (n,0,-1):
    print((n-i) * ' ' + i * '*')",Code,Human
868,"n=int(input(""Enter number:""))
temp=n
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
if(temp==rev):
    print(""The number is a palindrome!"")
else:
    print(""The number isn't a palindrome!"")",Code,Human
869,"n=int(input(""Enter an integer:""))
a=[]
for i in range(2,n+1):
    if(n%i==0):
        a.append(i)
a.sort()
print(""Smallest divisor is:"",a[0])",Code,Human
870,"a=int(input(""Enter first number:""))
b=int(input(""Enter second number:""))
c=int(input(""Enter third number:""))
d=[]
d.append(a)
d.append(b)
d.append(c)
for i in range(0,3):
    for j in range(0,3):
        for k in range(0,3):
            if(i!=j&j!=k&k!=i):
                print(d[i],d[j],d[k])",Code,Human
871,"def insert(list, n): 
      
    for i in range(len(list)): 
        if list[i] > n: 
            index = i 
            break
      
 
    list = list[:i] + [n] + list[i:] 
    return list",Code,Human
872,"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')",Code,Human
873,"def add_two_numbers(num1, num2):
    sum = num1 + num2
    return sum",Code,Human
874,"snum1 = 10
num2 = 12
num3 = 14 
if (num1 >= num2) and (num1 >= num3): 
   largest = num1
elif (num2 >= num1) and (num2 >= num3):   
    largest = num2
else:   largest = num3
print(f'largest:{largest}')",Code,Human
875,"def sub_two_numbers(num1, num2):
    sub = num1 - num2
    return sub",Code,Human
876,"def mul_two_numbers(num1, num2):
    mul = num1 * num2
    return mul",Code,Human
877,"squares = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
print(squares.pop(4))

#write a python program that prints the length of tuple
thistuple = (""apple"", ""banana"", ""cherry"")
print(len(thistuple))

#1 write a program to get numbers = 1,3,11,42,12,4001
from collections import Iterable
highestnumber = -999
for i in numbers:
  if i > highestnumber:
    highestnumber = i
print(numbers.index(highestnumber))

#2 write a program to get numbers = 1,3,11,42,12,4001
highestnumber = -999
for i in numbers:
  if i > highestnumber:
    highestnumber = i
print(numbers.index(highestnumber))

#3 add 1 to all elements in list python
lst = [1,2,3]
list(map(lambda x:x+1, lst))

#4 add a string to each element of a list python
my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))

#5 add a third dimension matrix dataset python
x = [2D_matrix]",Code,Human
878,,Code,Human
879,x = [[[value1]]],Code,Human
880,"#6 python add all values of another list
a = [1, 2, 3]
b = [4, 5, 6]
a += b

#7 add a value to the start of a list python
var=7
array = [1,2,3,4,5,6]
array.insert(0,var)

#8 print into lowersase an uppercase sentence in python
s = ""Kilometer""
print(s.lower())

#9 sort a dictionary
mydictionary : {1: 1, 7: 2, 4: 2, 3: 1, 8: 1}
sortedDictionary = sorted(mydictionary.keys())

#10 limit decimals to only two decimals in python 
answer = str(round(answer, 2))

#11 print how many keys are in a dictionary python
a = {'foo':42, 'bar':69}
print(len(a))

#11 access index of a character in a string python
foo = 'Hello'
foo.find('lo')

#12 python print last element of list
mylist = [0, 1, 2]
print(myList[-1]) 

#13 how to add a blank line in python
print("""")

#14 how to add element at first position in array python
x = [1,3,4]
a = 2
x.insert(1,a)

#15 how to add extra zeros after decimal in python
format(2.0, '.6f')
'2.000000'

#16 how to add list numbers in python
numbers = [1,2,3,4,5,1,4,5] 
Sum = sum(numbers) 

#17 split list into lists of equal length python
[lst[i:i + n] for i in range(0, len(lst), n)]

#18 how to break out of nested loops python
x_loop_must_break = False

for x in [1, 2, 3]:
    print(f""x is {x}"")
    for y in [1, 2, 3]:
        print(f""y is {y}"")
        if y == 2:
            x_loop_must_break = True
            break
    if x_loop_must_break: break

#19 capitalize first letter in python in list 
my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()

#20 how to check if a list is a subset of another list
if(all(x in test_list for x in sub_list)): 
    flag = True

#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate
def is_camel_case(s):
    return s != s.lower() and s != s.upper() and ""_"" not in s

#22 how to check if string is in byte formate pythin
isinstance(string, bytes)

#23 how to check nth prime in python
x=int(input())
n,c=1,0
while(c<x):
    n+=1
    for i in range(2,n+1):
        if(n%i==0):
            break
    if(i==n):
        c=c+1

#24 how to convert fahrenheit to celsius in python
Celsius = (Fahrenheit - 32) * 5.0/9.0

#25 print binary of a decimal number
a=6
print(bin(a))

#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate
def getBaseTen(binaryVal):
    count = 0

    binaryVal = binaryVal[::-1]

	for i in range(0, len(binaryVal)):
    	if(binaryVal[i] == ""1""):
            count += 2**i
    
    return count

#27 write a python funtion to execute bash commands
import subprocess
subprocess.call([""sudo"", ""apt"", ""update""])

#27 write a function to generate and print a random number between 0 and 22
import random
n = random.randint(0,22)
print(n)

#28 to get a random element from an array in python
import random
list_ = [1,2,3,4]
random.choice(list_)

#29 print current day in python 
from datetime import date
today = date.today()
print(""Today's date:"", today)

#30 program to count number of cpu cores available 
import os
os.cpu_count()

#30 get rid of all null values in array python
mylist = [1, 2, 3, '', 4]
mylist = [i for i in mylist if i]

#31 get the most common number in python
from statistics import mode
mode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))

#32 print current version of python
import sys
print(sys.version)

#33 write a python function to flatten nested lists
from collections import Iterable
def flatten(lis):
    for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item

#34 write a python function to convert a string  into xml
import xml.etree.ElementTree as ET

root = ET.fromstring(country_data_as_string)

#35 how to open xml file element tree
import xml.etree.ElementTree as ET

tree = ET.parse('filename.xml') 
tree_root = tree.getroot() 

#36 python parse datetime from string
from datetime import datetime

datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')

#37 print list as matrix in python without bracketspython by Bright Butterfly on Jun 14 2020 Donate
data = [7, 7, 7, 7]
print(*data, sep='')

#38 how to read a specific line from a text file in python
line = open(""file.txt"", ""r"").readlines()[7]

#39 how to remove integer from string in python
s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])

#40 write a function to return the nth fibonacci in python
def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

#41 how to sort a list in python using lambda
data = [(""Apples"", 5, ""20""), (""Pears"", 1, ""5""), (""Oranges"", 6, ""10"")]

data.sort(key=lambda x:x[0])

#42 write a function to subtract two matrices in python
matrix1 = [[0, 1, 2], 
           [3, 5, 5], 
           [6, 7, 8]]

matrix2 = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]

def subtractTheMatrix(matrix1, matrix2):
    matrix1Rows = len(matrix1)
    matrix2Rows = len(matrix2)
    matrix1Col = len(matrix1[0])
    matrix2Col = len(matrix2[0])

    #base case
    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

    matrix = []
    rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]
            
    return matrix

#43 write a to time a python script
from datetime import datetime
start = datetime.now()
do_something():...
print(datetime.now() - start)

#44 write a  Python function to find intersection of two sorted arrays 
def printIntersection(arr1, arr2, m, n): 
    i, j = 0, 0
    while i < m and j < n: 
        if arr1[i] < arr2[j]: 
            i += 1
        elif arr2[j] < arr1[i]: 
            j+= 1
        else: 
            print(arr2[j]) 
            j += 1
            i += 1

arr1 = [1, 2, 4, 5, 6] 
arr2 = [2, 3, 5, 7] 
m = len(arr1) 
n = len(arr2) 
printIntersection(arr1, arr2, m, n) 

#46 write Python Function to print leaders in array  
def printLeaders(arr,size):
         
    for i in range(0, size):
        for j in range(i+1, size):
            if arr[i]<arr[j]:
                break
        if j == size-1:  
            print(arr[i])

arr=[16, 17, 4, 3, 5, 2] 
printLeaders(arr, len(arr))

#47 write a python function to print lcm of n numbers python
import math

def LCMofArray(a):
  lcm = a[0]
  for i in range(1,len(a)):
    lcm = lcm*a[i]//math.gcd(lcm, a[i])
  return lcm

arr1 = [1,2,3]
print(""LCM of arr1 elements:"", LCMofArray(arr1))

#48 write a python Program to multiply two matrices and print the result
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]

for i in range(len(X)):
   for j in range(len(Y[0])):
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)
   
#48 write a python program to merge a list of dictionaires
result = {}
for d in L:
    result.update(d)

#49 write a python funvtion to print the merge sort algorithm in python
def mergeSort(myList):
    if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]",Code,Human
881,"mergeSort(left)
        mergeSort(right)",Code,Human
882,"i = 0
        j = 0",Code,Human
883,"k = 0
        
        while i < len(left) and j < len(right):
            if left[i] < right[j]:",Code,Human
884,myList[k] = left[i],Code,Human
885,"i += 1
            else:
                myList[k] = right[j]
                j += 1",Code,Human
886,k += 1,Code,Human
887,"while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k]=right[j]
            j += 1
            k += 1

myList = [54,26,93,17,77,31,44,55,20]
mergeSort(myList)

#50 write a python function to find the median on an array of numbers
def median(arr):
  
  if len(arr) == 1:
    return arr[0]
    
  else:
    arr = sorted(arr)
    a = arr[0:round(len(arr)/2)]
    b = arr[len(a):len(arr)]
    if len(arr)%2 == 0:
      return (a[len(a)-1]+b[0])/2
    else:
      return a[len(a)-1]

#51 write a python function to find a missing number in a list of consecutive natural numbers
def getMissingNo(A): 
    n = len(A) 
    total = (n + 1)*(n + 2)/2
    sum_of_A = sum(A) 
    return total - sum_of_A 

#52 write a python program to normalize a list of numbers and print the result
a = [2,4,10,6,8,4]
amin, amax = min(a), max(a)
for i, val in enumerate(a):
    a[i] = (val-amin) / (amax-amin)
print(a)

#53  write a python program to permutations of a given string in python and print the result
from itertools import permutations 
import string 
s = ""GEEK""
a = string.ascii_letters 
p = permutations(s) 

d = [] 
for i in list(p): 
    if (i not in d): 
        d.append(i) 
        print(''.join(i)) 

#54 Write a Python function to check if a number is a perfect square
def is_perfect_square(n):
    x = n // 2
    y = set([x])
    while x * x != n:
        x = (x + (n // x)) // 2
        if x in y: return False
        y.add(x)
    return True

#55 Write a Python function to check if a number is a power of a given base.
import math

def isPower (n, base):
    if base == 1 and n != 1:
        return False
    if base == 1 and n == 1:
        return True
    if base == 0 and n != 1:
        return False
    power = int (math.log(n, base) + 0.5)
    return base ** power == n

#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.
def three_Sum(num):
    if len(num)<3: return []
    num.sort()
    result=[]
    for i in range(len(num)-2):
        left=i+1
        right=len(num)-1
        if i!=0 and num[i]==num[i-1]:continue
        while left<right:
            if num[left]+num[right]==-num[i]:
                result.append([num[i],num[left],num[right]])
                left=left+1
                right=right-1
                while num[left]==num[left-1] and left<right:left=left+1
                while num[right]==num[right+1] and left<right: right=right-1
            elif num[left]+num[right]<-num[i]:
                left=left+1
            else:
                right=right-1
    return result

#57 Write a Python function to find the single number in a list that doesn't occur twice.
def single_number(arr):
    result = 0
    for i in arr:
        result ^= i
    return result

#58 Write a Python function to find the single element in a list where every element appears three times except for one.
def single_number(arr):
    ones, twos = 0, 0
    for x in arr:
        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)
    assert twos == 0
    return ones

#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.
def add_digits(num):
        return (num - 1) % 9 + 1 if num > 0 else 0
    
#60 Write a function program to reverse the digits of an integer.
def reverse_integer(x):
        sign = -1 if x < 0 else 1
        x *= sign",Code,Human
888,"while x:
            if x % 10 == 0:
                x /= 10
            else:
                break",Code,Human
889,"x = str(x)
        lst = list(x)",Code,Human
890,"lst.reverse()
        x = """".join(lst)
        x = int(x)
        return sign*x

#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).
def reverse_Bits(n):
        result = 0
        for i in range(32):
            result <<= 1
            result |= n & 1
            n >>= 1
        return result
    
#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.
def is_arithmetic(l):
    delta = l[1] - l[0]
    for index in range(len(l) - 1):
        if not (l[index + 1] - l[index] == delta):
             return False
    return True

#63 Python Challenges: Check a sequence of numbers is a geometric progression or not
def is_geometric(li):
    if len(li) <= 1:
        return True",Code,Human
891,ratio = li[1]/float(li[0]),Code,Human
892,"for i in range(1, len(li)):
        if li[i]/float(li[i-1]) != ratio: 
            return False
    return True 

#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.
def reverse_sum(n1, n2):
    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])

#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.
def collatz_sequence(x):
    num_seq = [x]
    if x < 1:
       return []
    while x > 1:
       if x % 2 == 0:
         x = x / 2
       else:
         x = 3 * x + 1
       num_seq.append(x)    
    return num_seq

#65 Write a Python function to check if a given string is an anagram of another given string.
def is_anagram(str1, str2):
    list_str1 = list(str1)
    list_str1.sort()
    list_str2 = list(str2)
    list_str2.sort()

    return (list_str1 == list_str2)

#66 Write a Python function to push all zeros to the end of a list.
def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return(x)

#67 Write a Python function to the push the first number to the end of a list.
def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return(x)

#68 Write a Python function to find the length of the last word.
def length_of_last_word(s):
        words = s.split()
        if len(words) == 0:
            return 0
        return len(words[-1])

#69 Write a Python function to add two binary numbers.
def add_binary_nums(x,y):
        max_len = max(len(x), len(y))

        x = x.zfill(max_len)
        y = y.zfill(max_len)

        result = ''
        carry = 0

        for i in range(max_len-1, -1, -1):
            r = carry
            r += 1 if x[i] == '1' else 0
            r += 1 if y[i] == '1' else 0
            result = ('1' if r % 2 == 1 else '0') + result
            carry = 0 if r < 2 else 1       

        if carry !=0 : result = '1' + result

        return result.zfill(max_len)

#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.
def odd_occurrence(arr):",Code,Human
893,result = 0,Code,Human
894,for element in arr:,Code,Human
895,"result = result ^ element
 
    return result

#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.
For example, the string ""AAAABBBCCDAAA"" would be encoded as ""4A3B2C1D3A""
def encode_string(str1):
    encoded = """"
    ctr = 1
    last_char = str1[0]

    for i in range(1, len(str1)):

        if last_char == str1[i]:
            ctr += 1
         
        else:
            encoded += str(ctr) + last_char
            ctr = 0
            last_char = str1[i]
            ctr += 1
    encoded += str(ctr) + last_char
    return encoded

#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.
def product(nums):
    new_nums = []

    for i in nums:
        nums_product = 1

        for j in nums:     
            if j != i:
                nums_product = nums_product * j
        new_nums.append(nums_product)

    return new_nums

#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.
r = range(1, 201)
a = sum(r)
print (a * a - sum(i*i for i in r))

#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.
def digits_sum():
	n = 2**20
	ans = sum(int(c) for c in str(n))
	return str(ans)

#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.
n = 0
for i in range(1,500):
     if not i % 5 or not i % 3:
         n = n + i
print(n)

#76 Write a Python function to converting an integer to a string in any base.
def to_string(n,base):
   conver_tString = ""0123456789ABCDEF""
   if n < base:
      return conver_tString[n]
   else:
      return to_string(n//base,base) + conver_tString[n % base

#77 Write a Python function to calculate the geometric sum of n-1.
def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)

#78 Write a Python function to find the greatest common divisor (gcd) of two integers.
def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return Recurgcd(low, high%low)

#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,
between 2000 and 3200 (both included).  
l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print ','.join(l)


#80 write a Python program to print the roots of a quadratic equation
import math
a = float(input(""Enter the first coefficient: ""))
b = float(input(""Enter the second coefficient: ""))
c = float(input(""Enter the third coefficient: ""))
if (a!=0.0):
    d = (bb)-(4ac) 
    if (d==0.0):
        print(""The roots are real and equal."") 
        r = -b/(2a)
        print(""The roots are "", r,""and"", r)
    elif(d>0.0):
        print(""The roots are real and distinct."")
        r1 = (-b+(math.sqrt(d)))/(2a) 
        r2 = (-b-(math.sqrt(d)))/(2a)
        print(""The root1 is: "", r1)
        print(""The root2 is: "", r2)
    else:
        print(""The roots are imaginary."")
        rp = -b/(2a) ip = math.sqrt(-d)/(2a)
        print(""The root1 is: "", rp, ""+ i"",ip)
        print(""The root2 is: "", rp, ""- i"",ip)
else:
    print(""Not a quadratic equation.""

#81 Write a Python program to convert a given Bytearray to Hexadecimal string.
def bytearray_to_hexadecimal(list_val):
     result = ''.join('{:02x}'.format(x) for x in list_val)  
     return(result)
     

#82 Write a Python program to count number of substrings with same first and last characters of a given string.
def no_of_substring_with_equalEnds(str1): 
	result = 0; 
	n = len(str1); 
	for i in range(n): 
		for j in range(i, n): 
			if (str1[i] == str1[j]): 
				result = result + 1
	return result
 
#83 Write a Python program to move all spaces to the front of a given string in single traversal.
def moveSpaces(str1): 
    no_spaces = [char for char in str1 if char!=' ']   
    space= len(str1) - len(no_spaces)
    result = ' '*space    
    return result + ''.join(no_spaces)

#84 Write a Python program to find maximum length of consecutive 0’s in a given binary string.
def max_consecutive_0(input_str): 
     return  max(map(len,input_str.split('1')))
str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")

#85 Write a Python program that iterate over elements repeating each as many times as its count.
from collections import Counter
c = Counter(p=4, q=2, r=0, s=-2)
print(list(c.elements()))

#86 Write a Python program to find the second smallest number in a list.
def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1]
  
  
#87 Write a Python function to check whether a list contains a sublist.
def is_Sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False

	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				
				if n == len(s):
					sub_set = True

	return sub_set
 
 
#86 Write a Python program to generate groups of five consecutive numbers in a list
l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)

#87 Write a Python program to print the list in a list of lists whose sum of elements is the highest.
print(max(num, key=sum))

#88 Write a Python fuction to print the depth of a dictionary.
def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
dic = {'a':1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))

#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.
from itertools import groupby
def pack_consecutive_duplicates(l_nums):
    return [list(group) for key, group in groupby(l_nums)]
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list)) 

#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.
from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]

n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))

#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.
nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)

#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.

size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))

#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.
def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
      

list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[1, 3],[13,15,17]]   
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))

#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.
from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))

#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.
def find_Index(str1, pos):
    if len(pos) > len(str1):
        return 'Not found'

    for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i
                
            elif str1[i + j] != pos[j]:
                break

    return 'Not found

#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.
def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)

    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
                
#97 Write a Python program to print all permutations of a given string (including duplicates).
def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_lis
    
#98 Write a Python program to multiply two integers without using the '*' operator in python.
def multiply(x, y):
    if y < 0:
        return -multiply(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply(x, y - 1)

#99 Write a Python program to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos

print(""Input coordinates of two points:"")
slat = radians(float(input(""Starting latitude: "")))
slon = radians(float(input(""Ending longitude: "")))
elat = radians(float(input(""Starting latitude: "")))
elon = radians(float(input(""Ending longitude: "")))

dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
print(""The distance is %.2fkm."" % dist)

#99 Write a Python class to convert a roman numeral to an integer.
class Solution:
    def roman_to_int(self, s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val

#100 Write a Python class to convert an integer to a roman numeral.
class Solution:
    def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
            ]
        syb = [
            ""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",
            ""I""
            ]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num",Code,Human
896,"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)",Code,Human
897,"def concat_two_numbers(num1, num2):
    combined_num = str(num1) + str(num2)
    return int(combined_num)",Code,Human
898,"n = 8
d = dict()
for i in range(1,n+1):
    d[i] = i*i*i
print(d)",Code,Human
899,"values=input()
l=values.split("","")
t=tuple(l)
print(l)
print(t)",Code,Human
900,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False",Code,Human
901,"def no_notes(a):
  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]
  x = 0
  for i in range(9):
    q = Q[i]
    x += int(a / q)
    a = int(a % q)
  if a > 0:
    x = -1
  return x",Code,Human
902,"def factendzero(n):
  x = n // 5
  y = x 
  while x > 0:
    x /= 5
    y += int(x)
  return y",Code,Human
903,"def binary_search(l, num_find):
    '''
    This function is used to search any number.
    Whether the given number is present in the
    list or not. If the number is present in list
    the list it will return TRUE and FALSE otherwise.
    '''
    start = 0
    end = len(l) - 1
    mid = (start + end) // 2
    found = False
    position = -1
    while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2
    return (found, position)",Code,Human
904,"import re
regex = '\.[0]*'
def remove_leading_zeros(ip):
    modified_ip = re.sub(regex, '.', ip)
    return modified_ip",Code,Human
905,"def int_to_bin(a):
  return bin(a)",Code,Human
906,"def int_to_oct(a):
  return oct(a)",Code,Human
907,"def int_to_hex(a):
  return hex(a)",Code,Human
908,"num = int(input(""Input a value: ""))
print(num)",Code,Human
909,"num = float(input(""Input a value: ""))
print(num)",Code,Human
910,"a = 10
b = 20
c = 30
if 10 in {a, b, c}:
  print(""True"")
else:
  print(""False"")",Code,Human
911,"class Number:
	def __init__(self, num):
		self.num = num

	def inputNum(self):
		self.num = int(input(""Enter an integer number: ""))

	def printNum(self):
		print(self.num)",Code,Human
912,"def simple_interest(p,r,t):
    si = (p*r*t)/100
    return si",Code,Human
913,"def compound_interest(p,r,t):
    ci = p * (pow((1 + r / 100), t)) 
    return ci",Code,Human
914,"def vote_eligibility(age):
	if age>=18:
	    status=""Eligible""
	else:
	    status=""Not Eligible""
	return status",Code,Human
915,"def bmi_calculator(height, weight):
	bmi = weight/(height**2)
	return bmi",Code,Human
916,"def perfect_number_checker(num):
    i = 2
    sum = 1
    while(i <= num//2 ) :
        if (num % i == 0) :
            sum += i
        i += 1
    if sum == num :
        return f'{num} is a perfect number'

    else :
        return f'{num} is not a perfect number'",Code,Human
917,"def odd_max_checker(list1):
	maxnum = 0
	for num in list1:
	    if num%2 != 0:
	        if num > maxnum:
	            maxnum = num
	return maxnum",Code,Human
918,"def even_max_checker(list1):
	maxnum = 0
	for num in list1:
	    if num%2 == 0:
	        if num > maxnum:
	            maxnum = num
	return maxnum",Code,Human
919,"def quadratic_root(A,B,C):
	import math
	d=((B**2)-4*A*C)

	if d>=0:
	    s=(-B+(d)**0.5)/(2*A)
	    p=(-B-(d)**0.5)/(2*A)
	    print(math.floor(s),math.floor(p))
	else:
	    print('The roots are imaginary')",Code,Human
920,"import calendar
year=2020
print(calendar.calendar(year))",Code,Human
921,"def date_validator(d,m,y):
	import datetime 
	try:
		s=datetime.date(y,m,d)
		print(""Date is valid."")
	except ValueError: 
		print(""Date is invalid."")",Code,Human
922,"def nth_sq_and_cube(N):
	R = N**6
	return R",Code,Human
923,"def power_checker(a,b):
	import math
	s=math.log(a,b)
	p=round(s)
	if (b**p)==a:
	    return f'{a} is the power of {b}.'
	else:
	    return f'{a} is NOT the power of {b}.'",Code,Human
924,"def binary_palindrome(n):
	s=int(bin(n)[2:])
	r=str(s)[::-1]
	if int(r)==s:
	    return ""The binary representation of the number is a palindrome.""
	else:
	    return ""The binary representation of the number is NOT a palindrome.""",Code,Human
925,"import keyword
print(""Python keywords are..."")
print(keyword.kwlist)",Code,Human
926,"def array_intersection(A,B):
	inter=list(set(A)&set(B))
	return inter",Code,Human
927,"def array_union(A,B):
	union=list(set(A)|set(B))
	return union",Code,Human
928,,Code,Human
929,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.union(set2))",Code,Human
930,,Code,Human
931,"set1 = {10, 20, 30}
set2 = {20, 40, 50}
print(set1.difference_update(set2))",Code,Human
932,,Code,Human
933,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))",Code,Human
934,,Code,Human
935,"set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
if set1.isdisjoint(set2):
  print(""Two sets have no items in common"")
else:
  print(""Two sets have items in common"")
  print(set1.intersection(set2))",Code,Human
936,"def formattedNumber(n):
  return (""{:,}"".format(n))",Code,Human
937,"str1='TestStringInCamelCase'
no_of_ucase, no_of_lcase = 0,0
for c in str1:
    if c>='A' and c<='Z':
        no_of_ucase += 1
    if c>='a' and c<='z':
        no_of_lcase += 1

print(no_of_lcase)
print(no_of_ucase)",Code,Human
938,"str1='TestStringwith123456789'
no_of_letters, no_of_digits = 0,0
for c in str1:
  no_of_letters += c.isalpha()
  no_of_digits += c.isnumeric()

print(no_of_letters)
print(no_of_digits)",Code,Human
939,"def text_searcher(text, word):
    count = 0
    for w in text.split():
        if w == word:
            count = count + 1
    return count",Code,Human
940,"def capitalize(text):
  return text.title()",Code,Human
941,"def newlist(lst):
  return list(filter(None, lst))",Code,Human
942,"def sum_of_digits(num):
  if num == 0:
    return 0
  else:
    return num % 10 + sum_of_digits(int(num / 10))",Code,Human
943,"def check_equal(a):
  return a[1:] == a[:-1]",Code,Human
944,"from datetime import datetime
date_string = ""Mar 26 2021  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)",Code,Human
945,"def reverse(n):
    s=str(n) 
    p=s[::-1]
    return p",Code,Human
946,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.symmetric_difference_update(set2)
print(set1)",Code,Human
947,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)",Code,Human
948,"aTuple = (10, 20, 30, 40, 50)
aTuple = aTuple[::-1]
print(aTuple)",Code,Human
949,"tuple1 = (11, 22)
tuple2 = (99, 88)
tuple1, tuple2 = tuple2, tuple1
print(tuple2)
print(tuple1)",Code,Human
950,"tuple1 = (11, [22, 33], 44, 55)
tuple1[1][1] = 333
print(tuple1)",Code,Human
951,"tuple1 = (('a', 23),('b', 37),('c', 11), ('d',29))
tuple1 = tuple(sorted(list(tuple1), key=lambda x: x[1]))
print(tuple1)",Code,Human
952,"def check_tuple_same(sampleTuple):
    return all(i == sampleTuple[0] for i in sampleTuple)",Code,Human
953,"import time
milliseconds = int(round(time.time() * 1000))
print(milliseconds)",Code,Human
954,"def func1(*args):
    for i in args:
        print(i)",Code,Human
955,"list1 = [10, 20, 30, 40]
list2 = [100, 200, 300, 400]

for x, y in zip(list1, list2[::-1]):
    print(x, y)",Code,Human
956,"def printEveIndexChar(str):
  for i in range(0, len(str)-1, 2):
    print(""index["",i,""]"", str[i] )",Code,Human
957,"def removeChars(str, n):
  return str[n:]",Code,Human
958,"def isFirst_And_Last_Same(numberList):
    firstElement = numberList[0]
    lastElement = numberList[-1]
    if (firstElement == lastElement):
        return True
    else:
        return False",Code,Human
959,"def findDivisible(numberList):
    for num in numberList:
        if (num % 5 == 0):
            print(num)",Code,Human
960,"def mergeList(list1, list2):
    thirdList = []
    for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
    for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
    return thirdList",Code,Human
961,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))",Code,Human
962,"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)",Code,Human
963,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))",Code,Human
964,"from datetime import datetime
given_date = datetime(2020, 2, 25)
string_date = given_date.strftime(""%Y-%m-%d %H:%M:%S"")
print(string_date)",Code,Human
965,"keys = {'Ten', 'Twenty', 'Thirty'}
values = {10, 20, 30}
sampleDict = dict(zip(keys, values))
print(sampleDict)",Code,Human
966,"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))",Code,Human
967,"def typeIdentifier(object):
  return f'object type : {type(object)}'",Code,Human
968,"class IOString(object):
    def __init__(self):
        self.s = """"

    def getString(self):
        self.s = input()
    
    def printString(self):
        print(self.s.upper())

strObj = IOString()
strObj.getString()
strObj.printString()",Code,Human
969,"import os, psutil
print(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)",Code,Human
970,"def charToASCII(chr):
  return f'ASCII value of {chr} is: {ord(chr)}'",Code,Human
971,"def revStr(inp):
  inp = inp[::-1]
  return inp",Code,Human
972,"def totalBits(n):
	return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'",Code,Human
973,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine",Code,Human
974,"def check(n):
    if (n < 2):
        return (n % 2 == 0)
    return (check(n - 2))
n=int(input(""Enter number:""))
if(check(n)==True):
      print(""Number is even!"")
else:
      print(""Number is odd!"")",Code,Human
975,"a,b = b,a",Code,Human
976,"items=[x for x in input().split(',')]
items.sort()
print(','.join(items))",Code,Human
977,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))
base=int(input(""Enter base: ""))
exp=int(input(""Enter exponential value: ""))
print(""Result:"",power(base,exp))",Code,Human
978,"def multTimes(str, m, n):
    front_len = m
    if front_len > len(str):
        front_len = len(str)
    front = str[:front_len]
    result = ''
    for i in range(n):
        result = result + front
    return result
print (multTimes('Hello', 3, 7))",Code,Human
979,"from re import sub
def camelCase(string):
  string = sub(r""(_|-)+"", "" "", string).title().replace("" "", """")
  return string[0].lower() + string[1:]",Code,Human
980,"def removeEmptyList(li):
  res = [ele for ele in li if ele != []] 
  return res",Code,Human
981,"Tuple = (10,20)
def sizeOfTuple(tup):
  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes'",Code,Human
982,"values = []
for i in range(1000, 9999):
  s = str(i)
  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
      values.append(s)",Code,Human
983,"def homoList(li):
  res = True
  for i in li: 
      if not isinstance(i, type(li[0])): 
          res = False 
          break
  return res",Code,Human
984,"def removeDataType(li,dType):
    res = []
    for i in li:
        if not isinstance(i, dType):
            res.append(i)
    return res",Code,Human
985,"def firstOccurence(arr, i,j):
  res = 0
  for k in arr:         
      if k == j: 
          break
      if k == i: 
          res += 1
  return res",Code,Human
986,"file_path = ""path/here""
import os.path
os.path.exists(file_path)",Code,Human
987,"x={'key1':'val1','key2':'val2'}
y={'key3':'val3','key4':'val4'}
z = {**x, **y}",Code,Human
988,,Code,Human
989,"import json
data = {""key1"" : ""value1"", ""key2"" : ""value2""}
jsonData = json.dumps(data)
print(jsonData)",Code,Human
990,"def ngcd(x, y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i
        i+=1
    return gcd
def num_comm_div(x, y):
  n = ngcd(x, y)
  result = 0
  z = int(n**0.5)
  i = 1
  while( i <= z ):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",Code,Human
991,"import json
def validateJSON(jsonData):
    try:
        json.loads(jsonData)
    except ValueError as err:
        return False
    return True",Code,Human
992,"def remove_nums(int_list):
  position = 3 - 1 
  idx = 0
  len_list = (len(int_list))
  while len_list>0:
    idx = (position+idx)%len_list
    print(int_list.pop(idx))
    len_list -= 1",Code,Human
993,"string_words = '''This assignment is of 900 marks. Each example if 9 marks.
If your example is similar to someone else, then you score less.
The formula we will use is 9/(repeated example). That means if 9 people write same example,
then you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''
word_list = string_words.split()
word_freq = [word_list.count(n) for n in word_list]
print(""Pairs (Words and Frequencies:\n {}"".format(str(list(zip(word_list, word_freq)))))",Code,Human
994,"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)",Code,Human
995,"def permute(nums):
  result_perms = [[]]
  for n in nums:
    new_perms = []
    for perm in result_perms:
      for i in range(len(perm)+1):
        new_perms.append(perm[:i] + [n] + perm[i:])
        result_perms = new_perms
  return result_perms",Code,Human
996,"def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a",Code,Human
997,"x=10
y=20
z=30
if y < x and x < z:
    print(x)
elif z < x and x < y:
    print(x)
elif z < y and y < x:
    print(y)
elif x < y and y < z:
    print(y)
elif y < z and z < x:
    print(z)    
elif x < z and z < y:
    print(z)",Code,Human
998,"def carry_number(x, y):
  ctr = 0
  if(x == 0 and y == 0):
    return 0
  z = 0  
  for i in reversed(range(10)):
      z = x%10 + y%10 + z
      if z > 9:
        z = 1
      else:
        z = 0
      ctr += z
      x //= 10
      y //= 10
  if ctr == 0:
    return ""No carry operation.""
  elif ctr == 1:
    return ctr
  else:
    return ctr",Code,Human
999,"a,b = 312, 410
print(len(str(a*b)))",Code,Human
1000,"def area(d1, a): 
    d2 = (4*(a**2) - d1**2)**0.5
    area = 0.5 * d1 * d2 
    return(area)",Code,Human
1001,"def setBitNumber(n): 
    if (n == 0): 
        return 0
    msb = 0 
    n = int(n / 2) 
    while (n > 0): 
        n = int(n / 2) 
        msb += 1
    return (1 << msb)",Code,Human
1002,"def volumeTriangular(a, b, h): 
    return (0.1666) * a * b * h",Code,Human
1003,"def volumeSquare(b, h): 
    return (0.33) * b * b * h",Code,Human
1004,"def volumePentagonal(a, b, h): 
    return (0.83) * a * b * h",Code,Human
1005,"def volumeHexagonal(a, b, h): 
    return a * b * h",Code,Human
1006,"num = 135
num_len = len(str(num))
n = num
sum = 0
exp = num_len
while n != 0:
    i = int(n % 10)
    n = int(n / 10)
    sum += i ** exp
    exp -= 1
if sum == num:
    print(""disarium"")
else:
    print(""not disarium"")",Code,Human
1007,"num_array = [8, 6, 15, 23, 14, 28, 5, 1, 99]
largest = second_largest = num_array[0]
for i in range(1,len(num_array)):
    if num_array[i] > largest:
        second_largest = largest
        largest = num_array[i]
    elif num_array[i] > second_largest:
        second_largest = num_array[i]
print(second_largest)",Code,Human
1008,"import math

diameter = 12.
radius = diameter/2.",Code,Human
1009,"V = 4./3. * math.pi * radius ** 3
print(f""Volume={V}"")",Code,Human
1010,"input_string_list = ['x', 'y', 'z']
repeat_count = 4
list2 = [input_string_list[i] * (j+1)  for i in range(len(input_string_list)) for j in range(repeat_count) ]
print(list2)",Code,Human
1011,"input_string_list = ['x', 'y', 'z']
repeat_count = 4
list3 = [input_string_list[i] * (j+1) for j in range(repeat_count)  for i in range(len(input_string_list)) ]
print(list3)",Code,Human
1012,"start_num = 2
repeat_count = 3
max_offset = 3
list4 = [[start_num + i + j ]  for j in range(max_offset) for i in range(repeat_count) ] 
print(list4)",Code,Human
1013,"start_num = 2
repeat_count = 4
max_offset =4
list5 = [[start_num + i + j  for j in range(max_offset)]  for i in range(repeat_count) ]
print(list5)",Code,Human
1014,"max_count = 3
list6 = [(j+1,i+1)  for i in range(max_count)  for j in range(max_count) ]
print(list6)",Code,Human
1015,"import functools

def longestWord(word_list):
    if word_list is None or isinstance(word_list, list) == False or len(word_list) == 0:
        raise ValueError(""Input word_list to function longestWord must be list of words of size at least 1"")
    
    if len(word_list) == 1:
        return word_list[0]    
    else:
        return functools.reduce(lambda x,y: x if len(x) >= len(y) else y, word_list)",Code,Human
1016,"lst = [""ab"",""cde"",""erty""]
length_list = list(map((lambda element: len(element)), lst))
print(str(length_list))",Code,Human
1017,"subjects=[""Americans"",""Indians""]
verbs=[""play"",""watch""]
objects=[""Baseball"",""Cricket""]
sentence_list = [subject + "" "" + verb + "" "" + object + ""."" for subject in subjects for verb in verbs for object in objects]
for sentence in sentence_list:
    print(sentence)",Code,Human
1018,"first_name = input(""Enter your first name: "")
last_name = input(""Enter your last name: "")
print(last_name.strip() + "" "" + first_name.strip())",Code,Human
1019,"def minDistance(word1, word2):
    m = len(word1)
    n = len(word2)

    if m*n == 0:
        return m + n

    d = [ [0] * (n + 1) for _ in range(m+1)]
    for i in range(m+1):
        d[i][0] = i

    for j in range(n+1):
            d[0][j] = j

    for i in range(m+1):
        for j in range(n+1):
            left = d[i-1][j] + 1
            down = d[i][j-1] + 1
            left_down = d[i-1][j-1]
            if word1[i-1] != word2[j-1]:
                left_down += 1
            d[i][j] = min(left, down, left_down)

    return d[m][n]",Code,Human
1020,"def grayCode(n):
    if n == 0:
        return [0]
        
    if n == 1:
        return [0,1]
        
    res = []
                
    start = '0'*n
    visited = set()
    stk = [start]
        
    while stk:
        node = stk.pop()
        if node not in visited:
            res.append(int(node,2))            
            visited.add(node)
        if len(visited) == 2**n:
            break
                
        for i in range(n):
            newCh = '0' if node[i] == '1' else '1' 
            newNode = node[:i] + newCh + node[i+1:]
                
            if newNode not in visited:
                    stk.append(newNode)
    return res",Code,Human
1021,"def findTargetSumWays(nums, S):
    count = 0
    def calculate(nums, i, sum, S):
        nonlocal count
        if i == len(nums):
            if sum == S:
                count += 1
        else:
            calculate(nums, i+1, sum+ nums[i], S)
            calculate(nums, i+1, sum- nums[i], S)
            
    calculate(nums, 0, 0, S) 
    return count",Code,Human
1022,"def isValid(s):
    stack = []
    mapping = {')': '(', '}' : '{', ']':'['}
    for char in s:
        if char in mapping:                
            if not stack:
                return False
            top = stack.pop()
            if mapping[char] != top:
                return False
        else:
            stack.append(char)     

    return not stack",Code,Human
1023,"def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print(""Move disk 1 from source"",source,""to destination"",destination) 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print(""Move disk"",n,""from source"",source,""to destination"",destination) 
    TowerOfHanoi(n-1, auxiliary, destination, source)",Code,Human
1024,"def isArmstrong(x):
    n = 0
    while (x != 0): 
        n = n + 1
        x = x // 10
    temp = x 
    sum1 = 0
      
    while (temp != 0): 
        r = temp % 10
        sum1 = sum1 + r ** n
        temp = temp // 10
  
    return (sum1 == x)",Code,Human
1025,"n = 10
sum = 0
for i in range(1, n+1): 
    sum += i**3

print(f""{sum}"")",Code,Human
1026,"def isMonotonic(A):  
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))",Code,Human
1027,"A = [[12, 7, 3], 
    [4, 5, 6], 
    [7, 8, 9]]   
  
B = [[5, 8, 1, 2], 
    [6, 7, 3, 0], 
    [4, 5, 9, 1]] 
      
result = [[0, 0, 0, 0], 
        [0, 0, 0, 0], 
        [0, 0, 0, 0]] 
  

for i in range(len(A)): 
    for j in range(len(B[0])): 
        for k in range(len(B)): 
            result[i][j] += A[i][k] * B[k][j] 
  
for r in result: 
    print(r)",Code,Human
1028,"test_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]] 

K = 2
res = [sub[K] for sub in test_list] 
print(""The Kth column of matrix is : "" + str(res))",Code,Human
1029,"test_str = 'go_east_or_west_india_is_the_best'
res = test_str.replace(""_"", "" "").title().replace("" "", """")
print(res)",Code,Human
1030,"def printEvenLengthWords(s):       
    s = s.split(' ')  
    for word in s:
        if len(word)%2==0: 
            print(word)",Code,Human
1031,"def UncommonWords(A, B): 
    count = {} 
    for word in A.split(): 
        count[word] = count.get(word, 0) + 1
    for word in B.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] == 1]",Code,Human
1032,"def binaryPallindrome(num): 
     binary = bin(num) 
     binary = binary[2:] 
     return binary == binary[-1::-1]",Code,Human
1033,"test_list = [""all"", ""love"", ""and"", ""get"", ""educated"", ""by"", ""gfg""] 
  
res = [] 
vow = ""aeiou""
for sub in test_list: 
    flag = False
    for ele in vow: 
        if sub.startswith(ele): 
            flag = True 
            break
    if flag: 
        res.append(sub) 
print(""The extracted words : "" + str(res))",Code,Human
1034,"import re 
  
def FindUrls(string): 
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url]",Code,Human
1035,"from collections import Counter 
  
def checkAnagram(num1,num2): 
    bin1 = bin(num1)[2:] 
    bin2 = bin(num2)[2:] 
  
    zeros = abs(len(bin1)-len(bin2)) 
    if (len(bin1)>len(bin2)): 
         bin2 = zeros * '0' + bin2 
    else: 
         bin1 = zeros * '0' + bin1 
  
    dict1 = Counter(bin1) 
    dict2 = Counter(bin2) 
  

    if dict1 == dict2: 
         print('Yes') 
    else: 
         print('No')",Code,Human
1036,"n=11

for i in range (n, 0, -1): 
    print((n-i) * ' ' + i * '*')",Code,Human
1037,"import re
 
def Validate_IP(IP):
    regex = ""(([0-9]|[1-9][0-9]|1[0-9][0-9]|""\
            ""2[0-4][0-9]|25[0-5])\\.){3}""\
            ""([0-9]|[1-9][0-9]|1[0-9][0-9]|""\
            ""2[0-4][0-9]|25[0-5])""
     
    regex1 = ""((([0-9a-fA-F]){1,4})\\:){7}""\
             ""([0-9a-fA-F]){1,4}""
     
    p = re.compile(regex)
    p1 = re.compile(regex1)
 
    if (re.search(p, IP)):
        return ""Valid IPv4""
 
    elif (re.search(p1, IP)):
        return ""Valid IPv6""
 
    return ""Invalid IP""",Code,Human
1038,"import re 
  
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check(email):   
    if(re.search(regex,email)):  
        print(""Valid Email"")  
          
    else:  
        print(""Invalid Email"")",Code,Human
1039,"import re 
password = ""R@m@_f0rtu9e$""
flag = 0
while True:   
    if (len(password)<8): 
        flag = -1
        break
    elif not re.search(""[a-z]"", password): 
        flag = -1
        break
    elif not re.search(""[A-Z]"", password): 
        flag = -1
        break
    elif not re.search(""[0-9]"", password): 
        flag = -1
        break
    elif not re.search(""[_@$]"", password): 
        flag = -1
        break
    elif re.search(""\s"", password): 
        flag = -1
        break
    else: 
        flag = 0
        print(""Valid Password"") 
        break
  
if flag ==-1: 
    print(""Not a Valid Password"")",Code,Human
1040,"import math 
  
def maxPrimeFactors (n): 
      
    maxPrime = -1
      
    while n % 2 == 0: 
        maxPrime = 2
        n >>= 1               

    for i in range(3, int(math.sqrt(n)) + 1, 2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
      
    if n > 2: 
        maxPrime = n 
      
    return int(maxPrime)",Code,Human
1041,"def is_leap(year):
    leap = False",Code,Human
1042,"if year % 4 == 0:
        if year % 400 == 0:
            leap = True
        elif year % 100 == 0:
            leap = False
        else:
            leap = True
    return leap",Code,Human
1043,"def permute(nums):
    def backtrack(first = 0):
        if first == n:        
            output.append(nums[:])
        for i in range(first, n):
            nums[first], nums[i] = nums[i], nums[first]

            backtrack(first + 1)

            nums[first], nums[i] = nums[i], nums[first]
         
    n = len(nums)
    output = []
    backtrack()
    return output",Code,Human
1044,"def pattern(n): 
  
    for i in range(1,n+1):",Code,Human
1045,"k =i + 1 if(i % 2 != 0) else i   

        for g in range(k,n): 
            if g>=k: 
                print(end=""  "") 
  
        for j in range(0,k): 
            if j == k - 1: 
                print("" * "") 
            else: 
                print("" * "", end = "" "")",Code,Human
1046,"def gcd(a, b):  
    if a == 0 : 
        return b  
      
    return gcd(b%a, a)",Code,Human
1047,"def allDigitsDivide( n) :
     
    temp = n
    while (temp > 0) :
        digit = temp % 10
        if not (digit != 0 and n % digit == 0) :
            return False
 
        temp = temp // 10
     
    return True",Code,Human
1048,"my_list = [[10,20,30],[40,50,60],[70,80,90]]

flattened = [x for temp in my_list for x in temp]
print(flattened)",Code,Human
1049,"n=int(input(""Enter the number to print the tables for:""))
for i in range(1,11):
    print(n,""x"",i,""="",n*i)",Code,Human
1050,"n = int(input(""Enter any number: ""))
sum1 = 0
for i in range(1, n):
    if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
    print(""The number is a Perfect number!"")
else:
    print(""The number is not a Perfect number!"")",Code,Human
1051,"def longest_continuous_odd_subsequence(array):
    final_list = []
    temp_list = []
    for i in array:
        if i%2 == 0:
            if temp_list != []:
                final_list.append(temp_list)
            temp_list = []
        else:
            temp_list.append(i)

    if temp_list != []:
        final_list.append(temp_list)

    result = max(final_list, key=len)
    print(result)",Code,Human
1052,"def longest_increaing_subsequence(myList):

    lis = [1] * len(myList)

    elements = [0] * len(myList)

    for i in range (1 , len(myList)):
        for j in range(0 , i):
            if myList[i] > myList[j] and lis[i]< lis[j] + 1:
                lis[i] = lis[j]+1
                elements[i] = j
    idx = 0


    maximum = max(lis)              
    idx = lis.index(maximum)


    seq = [myList[idx]]
    while idx != elements[idx]:
        idx = elements[idx]
        seq.append(myList[idx])

    return (maximum, reversed(seq))",Code,Human
1053,"def heapify(nums, heap_size, root_index):
    largest = root_index
    left_child = (2 * root_index) + 1
    right_child = (2 * root_index) + 2

    if left_child < heap_size and nums[left_child] > nums[largest]:
        largest = left_child

    if right_child < heap_size and nums[right_child] > nums[largest]:
        largest = right_child

    if largest != root_index:
        nums[root_index], nums[largest] = nums[largest], nums[root_index]
        heapify(nums, heap_size, largest)

def heap_sort(nums):
    n = len(nums)
    
    for i in range(n, -1, -1):
        heapify(nums, n, i)",Code,Human
1054,"for i in range(n - 1, 0, -1):
        nums[i], nums[0] = nums[0], nums[i]
        heapify(nums, i, 0)",Code,Human
1055,"def partition(array, low, high):
    i = low - 1",Code,Human
1056,pivot = array[high],Code,Human
1057,"for j in range(low, high):
       
        if array[j] < pivot:
    
            i += 1
            array[i], array[j] = array[j], array[i]
            
    array[i + 1], array[high] = array[high], array[i + 1]
    return i + 1

def quick_sort(array, low, high):
    if low < high:
        temp = partition(array, low, high)
        quick_sort(array, low, temp - 1)
        quick_sort(array, temp + 1, high)",Code,Human
1058,"def hasConsecutiveZeroes(N, K): 
    z = toK(N, K) 
    if (check(z)): 
        print(""Yes"") 
    else: 
        print(""No"") 
  
def toK(N, K): 
  
    w = 1
    s = 0
    while (N != 0): 
        r = N % K 
        N = N//K 
        s = r * w + s 
        w *= 10
    return s 
  
def check(N): 

    fl = False
    while (N != 0): 
        r = N % 10
        N = N//10
  
        if (fl == True and r == 0): 
            return False
        if (r > 0): 
            fl = False
            continue
        fl = True
    return True",Code,Human
1059,"class CircularQueue(object):
    def __init__(self, limit = 10):
        self.limit = limit
        self.queue = [None for i in range(limit)]  
        self.front = self.rear = -1

    def __str__(self):
        if (self.rear >= self.front):
            return ' '.join([str(self.queue[i]) for i in range(self.front, self.rear + 1)])
  
        else: 
            q1 = ' '.join([str(self.queue[i]) for i in range(self.front, self.limit)])
            q2 = ' '.join([str(self.queue[i]) for i in range(0, self.rear + 1)])
            return q1 + ' ' + q2

    def isEmpty(self):
        return self.front == -1

    def isFull(self):
        return (self.rear + 1) % self.limit == self.front

    def enqueue(self, data):
        if self.isFull():
            print('Queue is Full!')
        elif self.isEmpty():
            self.front = 0
            self.rear = 0
            self.queue[self.rear] = data
        else:
            self.rear = (self.rear + 1) % self.limit  
            self.queue[self.rear] = data 

    def dequeue(self):
        if self.isEmpty():
            print('Queue is Empty!')
        elif (self.front == self.rear):  
            self.front = -1
            self.rear = -1
        else:
            self.front = (self.front + 1) % self.limit",Code,Human
1060,"class Deque(object):
    def __init__(self, limit = 10):
        self.queue = []
        self.limit = limit

    def __str__(self):
        return ' '.join([str(i) for i in self.queue])

    def isEmpty(self):
        return len(self.queue) <= 0

    def isFull(self):
        return len(self.queue) >= self.limit

    def insertRear(self, data):
        if self.isFull():
            return
        else:
            self.queue.insert(0, data)

    def insertFront(self, data):
        if self.isFull():
            return
        else:
            self.queue.append(data)

    def deleteRear(self):
        if self.isEmpty():
            return
        else:
            return self.queue.pop(0)

    def deleteFront(self):
        if self.isFull():
            return
        else:
            return self.queue.pop()",Code,Human
1061,"class PriorityQueue(object):
    def __init__(self):
        self.queue = []

    def __str__(self):
        return ' '.join([str(i) for i in self.queue])


    def isEmpty(self):
        return len(self.queue) == []


    def insert(self, data):
        self.queue.append(data)


    def delete(self):
        try:
            max = 0
            for i in range(len(self.queue)):
                if self.queue[i] > self.queue[max]:
                    max = i
            item = self.queue[max]
            del self.queue[max]
            return item
        except IndexError:
            print()
            exit()",Code,Human
1062,"def findMinSum(num): 
    sum = 0
      
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num    

    return sum",Code,Human
1063,"import re 
  
  
def find(string, sample) :    

  if (sample in string): 
  
      y = ""^"" + sample 
  
      x = re.search(y, string) 
  
      if x : 
          print(""string starts with the given substring"") 
  
      else : 
          print(""string doesn't start with the given substring"") 
  
  else : 
      print(""entered string isn't a substring"")",Code,Human
1064,"arr = [[4, 5, 6, 8],  
        [1, 2, 3, 1],  
        [7, 8, 9, 4],  
        [1, 8, 7, 5]] 
  
n = len(arr[0]) 
                   
i=0
for j in range(0, n-1): 
    print(arr[i][j], end ="" "")  
          
k = 1
for i in range(0, n): 
    for j in range(n, 0, -1): 
        if(j==n-k): 
            print(arr[i][j], end = "" "")  
            break;  
    k+=1
  

i=n-1;  
for j in range(0, n): 
    print(arr[i][j], end = "" "")",Code,Human
1065,"def stopping_station( p, n): 
    num = 1
    dem = 1
    s = p 
  
    while p != 1: 
        dem *= p 
        p-=1
      
    t = n - s + 1
    while t != (n-2 * s + 1): 
        num *= t 
        t-=1
    if (n - s + 1) >= s: 
        return int(num/dem) 
    else: 

        return -1",Code,Human
1066,"import cmath

a = 1
b = 5
c = 6

d = (b**2) - (4*a*c)


sol1 = (-b-cmath.sqrt(d))/(2*a)
sol2 = (-b+cmath.sqrt(d))/(2*a)

print('The solution are {0} and {1}'.format(sol1,sol2))",Code,Human
1067,"terms = 10

result = list(map(lambda x: 2 ** x, range(terms)))

print(""The total terms are:"",terms)
for i in range(terms):
   print(""2 raised to power"",i,""is"",result[i])",Code,Human
1068,"def compute_lcm(x, y):",Code,Human
1069,"if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm",Code,Human
1070,"import itertools, random

deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))

random.shuffle(deck)

print(""You got:"")
for i in range(5):
   print(deck[i][0], ""of"", deck[i][1])",Code,Human
1071,"my_str = ""Hello this Is an Example With cased letters""

words = [word.lower() for word in my_str.split()]

words.sort()


print(""The sorted words are:"")
for word in words:
   print(word)",Code,Human
1072,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''

my_str = ""Hello!!!, he said ---and went.""

no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char

print(no_punct)",Code,Human
1073,"def isTriangleExists(a, b, c): 

    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return ""YES""
        else: 
            return ""NO""
    else: 
        return ""NO""",Code,Human
1074,"arr = [1, 2, 3, 4, 5];     
  
n = 3;      
  
for i in range(0, n):    
    #Stores the last element of array    
    last = arr[len(arr)-1];    
        
    for j in range(len(arr)-1, -1, -1):    
        #Shift element of array by one    
        arr[j] = arr[j-1];    
            
       
    arr[0] = last; 
    
print(arr)",Code,Human
1075,"num = 156;    
rem = sum = 0;   
   
n = num;    
while(num > 0):    
    rem = num%10;    
    sum = sum + rem;    
    num = num//10;    
     

if(n%sum == 0):    
    print(str(n) + "" is a harshad number"")    
else:    
    print(str(n) + "" is not a harshad number"")",Code,Human
1076,"arr = [1, 2, 3, 4, 5];     
  
n = 3;    
     
 
for i in range(0, n):    
    first = arr[0];    
        
    for j in range(0, len(arr)-1):    
  
        arr[j] = arr[j+1];    
            
 
    arr[len(arr)-1] = first;    
     
  
print(""Array after left rotation: "");    
for i in range(0, len(arr)):    
    print(arr[i]),",Code,Human
1077,"def knapSack(W, wt, val, n):",Code,Human
1078,"if n == 0 or W == 0 : 
        return 0
  
    if (wt[n-1] > W): 
        return knapSack(W, wt, val, n-1) 
  
    else: 
        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), 
                   knapSack(W, wt, val, n-1))",Code,Human
1079,"def has_palindrome_permutation(the_string):
    unpaired_characters = set()

    for char in the_string:
        if char in unpaired_characters:
            unpaired_characters.remove(char)
        else:
            unpaired_characters.add(char)


    return len(unpaired_characters) <= 1",Code,Human
1080,"def get_max_profit(stock_prices):
    max_profit = 0

    for outer_time in range(len(stock_prices)):

        for inner_time in range(len(stock_prices)):
            earlier_time = min(outer_time, inner_time)
            later_time   = max(outer_time, inner_time)

            earlier_price = stock_prices[earlier_time]
            later_price   = stock_prices[later_time]

            potential_profit = later_price - earlier_price

            max_profit = max(max_profit, potential_profit)

    return max_profit",Code,Human
1081,"def is_first_come_first_served(take_out_orders, dine_in_orders, served_orders):",Code,Human
1082,"if len(served_orders) == 0:
        return True


    if len(take_out_orders) and take_out_orders[0] == served_orders[0]:
        return is_first_come_first_served(take_out_orders[1:], dine_in_orders, served_orders[1:])


    elif len(dine_in_orders) and dine_in_orders[0] == served_orders[0]:
        return is_first_come_first_served(take_out_orders, dine_in_orders[1:], served_orders[1:])


    else:
        return False",Code,Human
1083,"def merge_ranges(meetings):
    sorted_meetings = sorted(meetings)

    merged_meetings = [sorted_meetings[0]]

    for current_meeting_start, current_meeting_end in sorted_meetings[1:]:
        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]

        if (current_meeting_start <= last_merged_meeting_end):
            merged_meetings[-1] = (last_merged_meeting_start,
                                   max(last_merged_meeting_end,
                                       current_meeting_end))
        else:
            merged_meetings.append((current_meeting_start, current_meeting_end))

    return merged_meetings",Code,Human
1084,"import re 
  

regex = '[a-zA-z0-9]$'
      
def check(string):
    if(re.search(regex, string)):  
        print(""Accept"")          
    else:  
        print(""Discard"")",Code,Human
1085,"n=int(input(""Enter a number n: ""))
temp=str(n)
t1=temp+temp
t2=temp+temp+temp
comp=n+int(t1)+int(t2)
print(""The value is:"",comp)",Code,Human
1086,"n=int(input(""Enter number of rows: ""))
for i in range (n,0,-1):
    print((n-i) * ' ' + i * '*')",Code,Human
1087,"n=int(input(""Enter upper limit of range: ""))
sieve=set(range(2,n+1))
while sieve:
    prime=min(sieve)
    print(prime,end=""\t"")
    sieve-=set(range(prime,n+1,prime))
 
print()",Code,Human
1088,"def generateParenthesis(n):
        
    def backtrack(S='', left=0, right=0):
        if len(S) == 2*n:
            output.append(S)
            return
        if left < n:
            backtrack(S+'(', left+1, right)
        if right < left:
            backtrack(S+')', left, right+1)
        
    output = []
    backtrack()
    return output",Code,Human
1089,"def combinationSum(candidates, target):
    results = []
    def helper(i, path):
        if sum(path) == target:
            results.append(path[:])
            return
            
        if sum(path) > target:
            return
            
        for x in range(i, len(candidates)):
            path.append(candidates[x])
            helper(x, path)
            path.pop()
                
    helper(0, []) 
    return results",Code,Human
1090,"def dailyTemperatures(T):
    stack = []
    res = [0 for _ in range(len(T))]
    for i, t1 in enumerate(T):
        while stack and t1 > stack[-1][1]:
            j, t2 = stack.pop()
            res[j] = i - j
        stack.append((i, t1))
    return res",Code,Human
1091,"import collections
def isPossibleDivide(nums, k):
 
    d = collections.Counter(nums)
    for num in sorted(d.keys()):
        if num in d:
            for i in range(k - 1, -1, -1):
                d[num + i] -= d[num] 
                if d[num + i] == 0:
                    del d[num + i]
                if d[num + i] < 0:
                    return False

    return (True if not d else False)",Code,Human
1092,"def myPow(x, n):
    def pow(y, n):
        if n == 0:
            return 1.0
        else:
            partial = pow(x, n//2)
            result = partial * partial
            if n%2 == 1:
                result *= x
            return result
           
  
    if n >= 0:
        return pow(x, n)
    else:
        return 1/ pow(x, -n)",Code,Human
1093,"class DLinkedNode:
    def __init__(self):
        self.key = 0
        self.value = 0
        self.prev = None
        self.next = None

class LRUCache(object):

    def __init__(self, capacity):
        self.capacity = capacity
        self.head = DLinkedNode()
        self.tail = DLinkedNode()
        self.cache = {}
        self.size = 0
        self.head.next = self.tail
        self.tail.prev = self.head

    def add_node(self, node):
        node.next = self.head.next
        node.prev = self.head        
        self.head.next.prev = node
        self.head.next = node

    def remove_node(self, node):
        next = node.next
        prev = node.prev
        prev.next = next
        next.prev = prev

    def move_to_head(self, node ):
        self.remove_node(node)
        self.add_node(node)

    def tail_off(self ):
        res = self.tail.prev
        self.remove_node(res)
        return res       


    def get(self, key):
        node = self.cache.get(key, None)
        if not node:
            return -1

        self.move_to_head(node )
        return node.value
        

    def put(self, key, value):
        node = self.cache.get(key, None)
        if  not node:           
            node = DLinkedNode()
            node.key = key
            node.value = value
            self.cache[key] = node
            self.add_node(node )
            self.size += 1
            if self.size > self.capacity:
                last_node = self.tail_off()
                del self.cache[last_node.key]
                self.size -= 1
        else:
            node.value = value
            self.move_to_head(node )",Code,Human
1094,"def cross_sum(nums, left, right, p):
    if left == right:
        return nums[left]

    left_subsum=float('-Inf')

    current_sum = 0
    for i in range(p, left-1, -1):
        current_sum += nums[i]
        left_subsum = max(left_subsum, current_sum)

        right_subsum=float('-Inf')

        current_sum = 0
        
    for i in range(p+1, right+1):
        current_sum += nums[i]
        right_subsum = max(right_subsum, current_sum)

    return left_subsum + right_subsum

def helper(nums, left, right):
    if left == right: 
        return nums[left]

    p = (left + right) // 2

    left_sum = helper(nums, left, p)
    right_sum = helper(nums, p+1, right)
    cross_sum1 =  cross_sum(nums, left, right, p)

    return max(left_sum, right_sum, cross_sum1)

def maxSubArray(nums):
    return helper(nums, 0, len(nums) -1)",Code,Human
1095,"from collections import defaultdict
def minSumOfLengths(arr, target):
    hashTable = defaultdict(int)
    hashTable[0] = -1
    summation = 0
    for i in range(len(arr)):
        summation = summation + arr[i]
        hashTable[summation] = i
        
    summation = 0
    minimumLeft = float('inf')
    result = float('inf')
    for i in range(len(arr)):
        summation = summation + arr[i]
        if summation - target in hashTable:
            leftLength = i-hashTable[summation-target]
            minimumLeft = min(minimumLeft,leftLength)
        if summation + target in hashTable and minimumLeft < float('inf'):
            rightLength = hashTable[summation+target]-i
            result = min(result,hashTable[summation+target]-i+minimumLeft)
        
    if result == float('inf'):
        return -1
    return result",Code,Human
1096,"from functools import lru_cache

def minimumDistance(word):
    def getDist(a, b):
        if a==-1 or b==-1:
            return 0
        else:
            i = ord(a) - ord('a')
            j = ord(b) - ord('b')
            dist = abs(i//6 - j//6) + abs(i%6 - j%6)
            return dist
            
    @lru_cache(maxsize=None)
    def getMinDist(l, r, k):
        if k==len(word):
            return 0
        next = word[k].lower()
        ret = min(getMinDist(next,r,k+1)+getDist(l,next), getMinDist(l,next,k+1)+getDist(r,next))
        return ret
            
    return(getMinDist(-1,-1,0))",Code,Human
1097,"def permute(nums):
    def backtrack(first = 0):
        if first == n:      
            output.append(nums[:])
        for i in range(first, n):
            nums[first], nums[i] = nums[i], nums[first]            
            backtrack(first + 1)

            nums[first], nums[i] = nums[i], nums[first]
 
        
    n = len(nums)
    output = []
    backtrack()
    return output",Code,Human
1098,"class BankAccount(object):
    def __init__(self, account_no, name, initial_balance=0):
        self.account_no = account_no
        self.name = name
        self.balance = initial_balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        self.balance -= amount
    def overdrawn(self):
        return self.balance < 0",Code,Human
1099,"def median(pool):
    copy = sorted(pool)
    size = len(copy)
    if size % 2 == 1:
        return copy[int((size - 1) / 2)]
    else:
        return (copy[int(size/2 - 1)] + copy[int(size/2)]) / 2",Code,Human
1100,"import random

guesses_made = 0

name = input('Hello! What is your name?\n')

number = random.randint(1, 20)
print ('Well, {0}, I am thinking of a number between 1 and 20.'.format(name))

while guesses_made < 6:

    guess = int(input('Take a guess: '))

    guesses_made += 1

    if guess < number:
        print ('Your guess is too low.')

    if guess > number:
        print ('Your guess is too high.')

    if guess == number:
        break

if guess == number:
    print ('Good job, {0}! You guessed my number in {1} guesses!'.format(name, guesses_made))
else:
    print ('Nope. The number I was thinking of was {0}'.format(number))",Code,Human
1101,"import random
import os
import re
os.system('cls' if os.name=='nt' else 'clear')
while (1 < 2):
    print(""\n"")
    print(""Rock, Paper, Scissors - Shoot!"")
    userChoice = input(""Choose your weapon [R]ock], [P]aper, or [S]cissors: "")
    if not re.match(""[SsRrPp]"", userChoice):
        print(""Please choose a letter:"")
        print(""[R]ock, [S]cissors or [P]aper."")
        continue
    print(""You chose: "" + userChoice)
    choices = ['R', 'P', 'S']
    opponenetChoice = random.choice(choices)
    print(""I chose: "" + opponenetChoice)
    if opponenetChoice == str.upper(userChoice):
        print(""Tie! "")
    #if opponenetChoice == str(""R"") and str.upper(userChoice) == ""P""
    elif opponenetChoice == 'R' and userChoice.upper() == 'S':      
        print(""Scissors beats rock, I win! "")
        continue
    elif opponenetChoice == 'S' and userChoice.upper() == 'P':      
        print(""Scissors beats paper! I win! "")
        continue
    elif opponenetChoice == 'P' and userChoice.upper() == 'R':      
        print(""Paper beat rock, I win! "")
        continue
    else:       
        print(""You win!"")",Code,Human
1102,"import random
import sys
board=[i for i in range(0,9)]
player, computer = '',''

moves=((1,7,3,9),(5,),(2,4,6,8))

winners=((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))

tab=range(1,10)
def print_board():
    x=1
    for i in board:
        end = ' | '
        if x%3 == 0:
            end = ' \n'
            if i != 1: end+='---------\n';
        char=' '
        if i in ('X','O'): char=i;
        x+=1
        print(char,end=end)
def select_char():
    chars=('X','O')
    if random.randint(0,1) == 0:
        return chars[::-1]
    return chars
def can_move(brd, player, move):
    if move in tab and brd[move-1] == move-1:
        return True
    return False
def can_win(brd, player, move):
    places=[]
    x=0
    for i in brd:
        if i == player: places.append(x);
        x+=1
    win=True
    for tup in winners:
        win=True
        for ix in tup:
            if brd[ix] != player:
                win=False
                break
        if win == True:
            break
    return win

def make_move(brd, player, move, undo=False):
    if can_move(brd, player, move):
        brd[move-1] = player
        win=can_win(brd, player, move)
        if undo:
            brd[move-1] = move-1
        return (True, win)
    return (False, False)

def computer_move():
    move=-1
    for i in range(1,10):
        if make_move(board, computer, i, True)[1]:
            move=i
            break
    if move == -1:
        for i in range(1,10):
            if make_move(board, player, i, True)[1]:
                move=i
                break
    if move == -1:
        for tup in moves:
            for mv in tup:
                if move == -1 and can_move(board, computer, mv):
                    move=mv
                    break
    return make_move(board, computer, move)
def space_exist():
    return board.count('X') + board.count('O') != 9
player, computer = select_char()
print('Player is [%s] and computer is [%s]' % (player, computer))
result='%%% Deuce ! %%%'
while space_exist():
    print_board()
    print('#Make your move ! [1-9] : ', end='')
    move = int(input())
    moved, won = make_move(board, player, move)
    if not moved:
        print(' >> Invalid number ! Try again !')
        continue
 
    if won:
        result='*** Congratulations ! You won ! ***'
        break
    elif computer_move()[1]:
        result='=== You lose ! =='
        break;
print_board()
print(result)",Code,Human
1103,"def zodiac_sign(day, month): 

    if month == 'december': 
        astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'
          
    elif month == 'january': 
        astro_sign = 'Capricorn' if (day < 20) else 'aquarius'
          
    elif month == 'february': 
        astro_sign = 'Aquarius' if (day < 19) else 'pisces'
          
    elif month == 'march': 
        astro_sign = 'Pisces' if (day < 21) else 'aries'
          
    elif month == 'april': 
        astro_sign = 'Aries' if (day < 20) else 'taurus'
          
    elif month == 'may': 
        astro_sign = 'Taurus' if (day < 21) else 'gemini'
          
    elif month == 'june': 
        astro_sign = 'Gemini' if (day < 21) else 'cancer'
          
    elif month == 'july': 
        astro_sign = 'Cancer' if (day < 23) else 'leo'
          
    elif month == 'august': 
        astro_sign = 'Leo' if (day < 23) else 'virgo'
          
    elif month == 'september': 
        astro_sign = 'Virgo' if (day < 23) else 'libra'
          
    elif month == 'october': 
        astro_sign = 'Libra' if (day < 23) else 'scorpio'
          
    elif month == 'november': 
        astro_sign = 'scorpio' if (day < 22) else 'sagittarius'
          
    print(astro_sign)",Code,Human
1104,"def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]",Code,Human
1105,"test_list = [[""India"", ""good""], [""is"", ""for""], [""Best""]] 
print(""The original list : "" + str(test_list)) 
res = [] 
N = 0
while N != len(test_list): 
    temp = '' 
    for idx in test_list:       

        try: temp = temp + idx[N] 
        except IndexError: pass
    res.append(temp) 
    N = N + 1
  
res = [ele for ele in res if ele] 
  
print(""List after column Concatenation : "" + str(res))",Code,Human
1106,"test_str1 = """"""India 
is""""""
test_str2 = """"""best 
for everybody 
""""""
  

print(""The original string 1 is : "" + test_str1) 
print(""The original string 2 is : "" + test_str2) 
  
test_str1 = test_str1.splitlines() 
test_str2 = test_str2.splitlines() 
res = [] 
  
for i, j in zip(test_str1, test_str2): 
    res.append(""   "" + i.strip() + "" "" + j.strip()) 
res = '\n'.join(res) 
  

print(""String after concatenation : "" + str(res))",Code,Human
1107,"def help_fnc(i, j): 
    for ele in range(len(j), -1, -1): 
        if i.endswith(j[:ele]): 
            return j[ele:] 
  

test_list = [""India"", ""gone"", ""new"", ""best""] 
  
print(""The original list is : "" + str(test_list)) 
  
res = ''.join(help_fnc(i, j) for i, j in zip([''] + 
                           test_list, test_list)) 
  
print(""The resultant joined string : "" + str(res))",Code,Human
1108,"def isValidSudoku(board):
    rows = [{} for i in range(9)]
    columns = [{} for i in range(9)]
    boxes = [{} for i in range(9)]
        
    for i in range(9):
        for j in range(9):
            num = board[i][j]
            if num != '.':
                num = int(num)
                box_index = (i//3)*3 + (j//3)
                rows[i][num] = rows[i].get(num, 0) + 1
                columns[j][num] = columns[j].get(num, 0) + 1
                boxes[box_index][num] = boxes[box_index].get(num, 0) + 1       
                if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1:
                    print("" i= {0} j = {1} box_index ={2}"".format(i,j,box_index))
                    print(""rows[i]: "", rows[i])
                    print(""columnns[j]: "", columns[j])
                    print(""boxes[box_index]: "", boxes[box_index])
                    return False
                    
    return True",Code,Human
1109,"from collections import Counter

def getFolderNames(names):
    seen, res = Counter(), []
    for name in names:
        if name in seen:
            while True:
                c = f'({seen[name]})'
                if name + c not in seen:
                    name += c
                    break
                else:
                    seen[name] += 1
        seen[name] += 1
        res.append(name)
    return res",Code,Human
1110,import cmath,Code,Human
1111,"num = cmath.polar(1)  
print(num)",Code,Human
1112,"import calendar 
  
year = 2019
print(calendar.calendar(year))",Code,Human
1113,"import sys 

def MatrixChainOrder(p, i, j): 
  
    if i == j: 
        return 0
  
    _min = sys.maxsize 
      
    for k in range(i, j): 
      
        count = (MatrixChainOrder(p, i, k)  
             + MatrixChainOrder(p, k + 1, j) 
                   + p[i-1] * p[k] * p[j]) 
  
        if count < _min: 
            _min = count; 
      
  
    return _min; 

#write a python program to print even numbers in a list

list1  = [2,7,5,64,14]

for i in list1:
    if i%2==0:
        print(i,end="" "")


#write a python program to print positive numbers in a list

list1 = [2,4,-5,3,8,-10,-11]

for i in list1:
    if i>0:
        print(i,end="" "")

#write a python program to remove empty list from list and print it
list1 = [2,5,6,[],8,[],[],0]
list2=[]
for i in list1:
    if not isinstance(i,list):
       list2.append(i)
print(list2)

#write a python program to print the list having sum of digits
list1 = [12, 67, 98, 34]
list2=[]
for i in list1:
    sum = 0
    for digit in str(i): 
        sum += int(digit) 
    list2.append(sum)
print(list2)",Code,Human
1114,"list1 = [1, 2.0, 'have', 'a', 'nice', 'day'] 

s = 'nice'
for i in list1:
    if i == s:
       print(f'{s} is  present in the list')


#write a python function to swap two numbers in a list and return the list
def swapPositions(list, pos1, pos2): 
      
    list[pos1], list[pos2] = list[pos2], list[pos1] 
    return list",Code,Human
1115,"List1 = [23, 65, 19, 90] 
pos1, pos2  = 1, 3

print(swapPositions(List1, pos1-1, pos2-1))",Code,Human
1116,"list1 = [4, 5, 6, 4, 1, 4, 8, 5, 4, 3, 4, 9]",Code,Human
1117,"i, j = 4, 8

count=0
for k in list1:
    if k==i and k!=j:
       count=count+1
    elif k==j:
         break;   

print(count)",Code,Human
1118,"list1 = [""gfg"", ""best"", ""for"", ""geeks""] 
   
s=[]
for i in list1:
    count=0  
    for j in i:
        if j in ('a','e','i','o','u'):
           count=count+1
    s.append(count)
print(s)    
if  count== max(s):      
    print(list1[s.index(max(s))])

#9 write a python program to omit K length rows and print the list
list1 = [[4, 7], 
             [8, 10, 12, 8], 
             [10, 11],  
             [6, 8, 10]]",Code,Human
1119,"K = 2

for i in test_list:
    if len(i)==K:
       list1.remove(i)
print(list1)       

#10 write a python program to construct equidigit tuple and print them

list1 = [5654, 223, 982143, 34, 1021]

list2 = [] 
for sub in list1:",Code,Human
1120,mid_idx = len(str(sub)) // 2,Code,Human
1121,"el1 = str(sub)[:mid_idx] 
    el2 = str(sub)[mid_idx:] 
      
    list2.append((int(el1), int(el2)))",Code,Human
1122,"print(""Equidigit tuples List : "" + str(list2)) 

#11 write a python function to filter Rows with a specific pair sum and return boolean value

def pair_sum(x, k):",Code,Human
1123,"for idx in range(len(x)): 
        for ix in range(idx + 1, len(x)): 
            if x[idx] + x[ix] == k: 
                return True
    return False",Code,Human
1124,"test_list = [[1, 5, 3, 6], [4, 3, 2, 1], [7, 2, 4, 5], [6, 9, 3, 2]]",Code,Human
1125,"print(""The original list is : "" + str(test_list))",Code,Human
1126,k = 8,Code,Human
1127,"res = [ele for ele in test_list if pair_sum(ele, k)]",Code,Human
1128,"print(""Filtered Rows : "" + str(res)) 

#12 write a python program to find decreasing point in a list and print them
test_list = [3, 6, 8, 9, 12, 5, 18, 1] 
  
res = -1
for idx in range(0, len(test_list) - 1):",Code,Human
1129,"if test_list[idx + 1] < test_list[idx]: 
        res = idx 
        break",Code,Human
1130,"print(""Decreasing Point : "" + str(res)) 


#13 Write a python program to test if all elements are unique in columns in matrix and print them

test_list = [[3, 4, 5], [1, 2, 4], [4, 1, 10]] 
  
 
res = True 
for idx in range(len(test_list[0])):",Code,Human
1131,col = [ele[idx] for ele in test_list],Code,Human
1132,"if len(list(set(col))) != len(col): 
        res = False 
        break",Code,Human
1133,"print(""Are all columns Unique : "" + str(res)) 

#14 Write a python program to find elements with the same index and print them

list1 = [3, 1, 2, 5, 4, 10, 6, 9] 
 
list2 = [] 
for idx, ele in enumerate(list1): 
    if idx == ele: 
        list2.append(ele)",Code,Human
1134,"print(""Filtered elements : "" + str(list2))

#15 Write a python program to check if two list are reverse equal and print boolean value

list1 = [5, 6, 7, 8] 
list2 = [8, 7, 6, 5]",Code,Human
1135,,Code,Human
1136,res = list1 == list(reversed(list2)),Code,Human
1137,"print(""Are both list reverse of each other ? : "" + str(res))


#16 write a python program to extract priority elements in tuple list


test_list = [(5, 1), (3, 4), (9, 7), (10, 6)]",Code,Human
1138,"prior_list = [6, 4, 7, 1]",Code,Human
1139,,Code,Human
1140,"res = [] 
for sub in test_list: 
    for val in prior_list: 
        if val in sub: 
            res.append(val) 
print(res)

#17 Write a python program to check if any string is empty in list and print true or False

  
list1 = ['the', 'sun', 'rises', '', 'the', 'east']",Code,Human
1141,,Code,Human
1142,res = any(len(ele) == 0 for ele in list1),Code,Human
1143,"print(""Is any string empty in list? : "" + str(res)) 

#18 write a python program to increment numeric string by K  

list = [""gfg"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""]",Code,Human
1144,"K = 6
  
res = []
for ele in test_list:",Code,Human
1145,"if ele.isdigit(): 
        res.append(str(int(ele) + K)) 
    else: 
        res.append(ele)",Code,Human
1146,"print(""Incremented Numeric Strings : "" + str(res)) 


#19 Write a python function to remove i'th character from a string

def remove(string, i):",Code,Human
1147,,Code,Human
1148,a = string[ : i],Code,Human
1149,,Code,Human
1150,b = string[i + 1: ],Code,Human
1151,,Code,Human
1152,"return a + b 

#20 Write a python program to move number to end of string and print them
test_str = 'the2sun4rises5sinthe6east9'",Code,Human
1153,"print(""The original string is : "" + str(test_str))
s=''
r=''
for i in test_str:
    if i.isdigit():
      s=s+i
    else:
      r=r+i 
print(r+s)

#21 Write a python program to count the number of spaces in a string and print it

count=0
string = ""Welcome to schoolofAI""
for i in string:
    if i=="" "":
        count=count+1
print(f'number of spaces {count}')

#22 Write a python program to Concatenate all elements of a list into a string and print it

 
l = ['hello', 'guys', 'have', 
   'a', 'nice', 'day']",Code,Human
1154,,Code,Human
1155,"l = ' '.join(l)  
print(l) 

#23 Write a python program to filter similar case strings and print it

x=[]
for i in test_list:
    if i.islower() or i.isupper():
       print(x.append(i))
    
print(x) 


#24 Write a python program to increment Suffix number in string and print it

test_str = 'hello006'
x=''
r=''
for i in test_str:
    if i.isdigit() and int(i)>0:
       x=x+str(int(i)+1)
    else:
      r=r+i
print(r+x)  


#25 Write a python program to add phrase in the middle of string and print it 

test_str = 'The sun in the east'
mid_str = ""rises""

s=""""
l=test_str.split("" "")
for i in range(0,len(l)):
    if i==len(l)//2:
       l.insert(i,mid_str)
       break
s="" "".join(i for i in l)
print(s) 


#26 Write a program to split a string by custom length and print it

test_str = 'geeksforgeeks'",Code,Human
1156,"print(""The original string is : "" + str(test_str))",Code,Human
1157,"cus_lens = [5, 3, 2, 3] 

res = [] 
strt = 0
for size in cus_lens:",Code,Human
1158,"res.append(test_str[strt : strt + size]) 
    strt += size",Code,Human
1159,"print(""Strings after splitting : "" + str(res)) 

#27 Write a python program to extract strings with successive alphabets in alphabetical order and print the list

list1 = ['gfg', 'is', 'best', 'for', 'geeks'] 

  
res = [] 
for i in range(0,len(list1)):
    for j in range(0,len(list1[i])-1):
        if ord(list1[i][j+1])- ord(list1[i][j])==1:
           res.append(list1[i])
print(res)

#28 Write a python program to compute arithmetic operation from String and print it


test_str = '5x6, 9x10, 7x8'",Code,Human
1160,"temp = test_str.replace(',', '+').replace('x', '*')",Code,Human
1161,res = eval(temp),Code,Human
1162,"print(""The computed summation of products : "" + str(res)) 


#29 write a python  program to Extract string till first Non-Alphanumeric character and print it

test_str = 'geeks4g!!!eeks'
s=''
for i in test_str:
    
    if i.isalnum()==False:
       break
    else:
      s+=i  
print(s)   

#30 write a python program  to extract domain name from Email address and print it

test_str = 'md.shakiluzzaman@gmail.com'",Code,Human
1163,"print(""The original string is : "" + str(test_str))
s=test_str.split('@')
print(s[1])


#31 write a python program to  check if string starts with any element in list

test_string = ""GfG is best""",Code,Human
1164,"pref_list = ['best', 'GfG', 'good']",Code,Human
1165,,Code,Human
1166,"res = list(filter(test_string.startswith, pref_list)) != []",Code,Human
1167,"print(""Does string start with any prefix list sublist ? : "" + str(res))


#32 write a python function to find all permutations of a string and print the result

ini_str = ""abc""",Code,Human
1168,"print(""Initial string"", ini_str)",Code,Human
1169,"result = [] 
  
def permute(data, i, length):  
    if i == length:  
        result.append(''.join(data) ) 
    else:  
        for j in range(i, length):",Code,Human
1170,"data[i], data[j] = data[j], data[i]  
            permute(data, i + 1, length)  
            data[i], data[j] = data[j], data[i]   
permute(list(ini_str), 0, len(ini_str))",Code,Human
1171,"print(""Resultant permutations"", str(result))

#33 write a python program to delete all occurences of character and print it 

test_str = ""TheSchoolofAI""",Code,Human
1172,"rem_char = ""e""",Code,Human
1173,,Code,Human
1174,"res = test_str.replace(rem_char, """")",Code,Human
1175,"print(""The string after character deletion : "" + str(res))

#34 Write a python program for printing alternate Strings Concatenation

test_list = [""Early"", ""morning"", ""is"", ""good"", ""for"", ""health""]",Code,Human
1176,"print(""The original list : "" + str(test_list)) 
s=[]
k=test_list[::2]
a=["""".join(i for i in k)]
print(a)
l=test_list[1::2]
b=["""".join(i for i in l)]
print(b)

print(a+b)

#35 Write a python program to remove duplicate word from sentence and print it
str1 = ""Good bye bye world world""
l=str1.split("" "")
#s=[]
s=list(set(l))
print("" "".join(i for i in s))


#36 Write a python program to trim tuples by k and print it

test_list = [(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), 
             (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]",Code,Human
1177,"print(""The original list is : "" + str(test_list))",Code,Human
1178,"K = 2

l=[]
for i in test_list:
    #for j in i:
    s=tuple()
    s+=i[K:len(i)-K]
    l.append((s))
print(l)

#37 write a python program to sort Tuples by their maximum element and print it

def get_max(sub): 
    return max(sub)",Code,Human
1179,"test_list = [(4, 5, 5, 7), (1, 3, 7, 4), (19, 4, 5, 3), (1, 2)]",Code,Human
1180,"print(""The original list is : "" + str(test_list))",Code,Human
1181,,Code,Human
1182,"test_list.sort(key = get_max, reverse = True)",Code,Human
1183,"print(""Sorted Tuples : "" + str(test_list)) 


#38 write a python program to extract digits from Tuple list and print it

test_list = [(15, 3), (3, 9), (1, 10), (99, 2)]",Code,Human
1184,"print(""The original list is : "" + str(test_list))
s=[]
k=''
for i in test_list:
    for j in  i:
        k+=str(j)
print(list(set(k)))


#39 write a python program  to print all pair combinations of two tuples

test_tuple1 = (4, 5) 
test_tuple2 = (7, 8)",Code,Human
1185,"print(""The original tuple 1 : "" + str(test_tuple1)) 
print(""The original tuple 2 : "" + str(test_tuple2))",Code,Human
1186,,Code,Human
1187,"res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1]",Code,Human
1188,"print(""The filtered tuple : "" + str(res)) 

#40 write a python program to find minimum k records from tuple list

test_list = [('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)]",Code,Human
1189,K = 2,Code,Human
1190,"print(""The original list is : "" + str(test_list))",Code,Human
1191,,Code,Human
1192,"res = sorted(test_list, key = lambda x: x[1])[:K]",Code,Human
1193,"print(""The lowest K records are : "" + str(res)) 


#41 write a python program to check if one tuple is subset of other and print it

test_tup1 = (10, 4, 5, 6) 
test_tup2 = (5, 10)",Code,Human
1194,"print(""The original tuple 1 : "" + str(test_tup1)) 
print(""The original tuple 2 : "" + str(test_tup2))",Code,Human
1195,,Code,Human
1196,res = set(test_tup2).issubset(test_tup1),Code,Human
1197,"print(""Is 2nd tuple subset of 1st ? : "" + str(res)) 


#42 write a python program to display keys with same values in a dictionary List",Code,Human
1198,"test_list = [{""Gfg"": 5, ""is"": 8, ""best"": 0}, 
             {""Gfg"": 5, ""is"": 1, ""best"": 0}, 
             {""Gfg"": 5, ""is"": 0, ""best"": 0}]",Code,Human
1199,"keys = list(test_list[0].keys()) 
  
res = []",Code,Human
1200,"for key in keys: 
    flag = 1
    for ele in test_list:",Code,Human
1201,"if test_list[0][key] != ele[key]: 
            flag = 0
            break
  
    if flag: 
        res.append(key)",Code,Human
1202,"print(""Similar values keys : "" + str(res))


#43 write a python program to filter dictionaries with ordered values

test_list = [{'gfg': 2, 'is': 8, 'good': 10}, 
             {'gfg': 1, 'for': 10, 'geeks': 9}, 
             {'love': 3, 'gfg': 4}]",Code,Human
1203,,Code,Human
1204,"res = [sub for sub in test_list if sorted( 
    list(sub.values())) == list(sub.values())]",Code,Human
1205,"print(""The filtered Dictionaries : "" + str(res)) 

#44 write a python program to  rotate dictionary by K",Code,Human
1206,,Code,Human
1207,,Code,Human
1208,,Code,Human
1209,"test_dict = {1: 6, 8: 1, 9: 3, 10: 8, 12: 6, 4: 9}",Code,Human
1210,K = 2,Code,Human
1211,test_dict = list(test_dict.items()),Code,Human
1212,"res = [test_dict[(i - K) % len(test_dict)] 
       for i, x in enumerate(test_dict)]",Code,Human
1213,res = {sub[0]: sub[1] for sub in res},Code,Human
1214,"print(""The required result : "" + str(res)) 

#45 write a python program to Count if dictionary position equals key or value and print it

test_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} 
  

  
res = 0
test_dict = list(test_dict.items()) 
for idx in range(0, len(test_dict)):",Code,Human
1215,"if idx == test_dict[idx][0] or idx == test_dict[idx][1]: 
        res += 1",Code,Human
1216,"print(""The required frequency : "" + str(res)) 

#46 write a python program to test if Values Sum is Greater than Keys Sum in dictionary and print it

test_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5} 
  

  
res = sum(list(test_dict.keys())) < sum(list(test_dict.values()))",Code,Human
1217,"print(""The required result : "" + str(res))

#47 write a program to  sort Dictionary by key-value Summation and print it

test_dict = {3: 5, 1: 3, 4: 6, 2: 7, 8: 1}",Code,Human
1218,"res = sorted(test_dict.items(), key=lambda sub: sub[0] + sub[1])",Code,Human
1219,res = {sub[0]: sub[1] for sub in res},Code,Human
1220,"print(""The sorted result : "" + str(res)) 


#48 write a program  to divide dictionary and its keys into K equal dictionaries and print it

test_dict = {""Gfg"": 20, ""is"": 36, ""best"": 100}",Code,Human
1221,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1222,"K = 4

s=list(test_dict.keys())
print(s)
q=list(test_dict.values())
t=[]
for i in q:
    t.append(i//K)
print(t)
q=[]
d={}
for i in range(K):
    for i in range(0,len(s)):
       d[s[i]] = t[i]
    q.append(d)
print(q) 

#49 Write a  Python function to Sort a List of Dictionaries by the Sum of their Values and print it

test_list = [{1 : 3, 4 : 5, 3 : 5}, {1 : 7, 10 : 1, 3 : 10}, {1 : 100}, {8 : 9, 7 : 3}]

def func(test_list):
    return sum(list(test_list.values()))


for i in test_list:
  test_list.sort(key=func) 
print(test_list)

#50 write a python program to remove double quotes from dictionary keys and print it

test_dict = {'""Geeks""' : 3, '""is"" for' : 5, '""g""eeks' : 9}",Code,Human
1223,,Code,Human
1224,"res = {key.replace('""', ''):val for key, val in test_dict.items()}",Code,Human
1225,"print(""The dictionary after removal of double quotes : "" + str(res))

#51 write a python program to check whether the values of a dictionary are in same order as in a list

test_dict = {""gfg"" : 4, ""is"" : 10, ""best"" : 11, ""for"" : 19, ""geeks"" : 1}",Code,Human
1226,"sub_list = [4, 10, 11, 19, 1]

l=list(test_dict.values())


if l == sub_list:
   print(True)
else:
  print(False)  
  
 #52 write a python program to update a dictionary with the values from a dictionary list and print it
 
 test_dict = {""Gfg"" : 2, ""is"" : 1, ""Best"" : 3}",Code,Human
1227,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1228,"dict_list = [{'for' : 3, 'all' : 7}, {'geeks' : 10}, {'and' : 1, 'CS' : 9}]

for i in dict_list:
    test_dict.update(i)
print(test_dict) 


#53 write a python program that displays the key of list value with maximum range and print it

test_dict = {""Gfg"" : [6, 2, 4, 1], ""is"" : [4, 7, 3, 3, 8], ""Best"" : [1, 0, 9, 3]} 
  
 
max_res = 0
for sub, vals in test_dict.items():",Code,Human
1229,"max_res = max(max_res, max(vals) - min(vals))     
    if max_res == max(vals) - min(vals): 
        res = sub",Code,Human
1230,"print(""The maximum element key : "" + str(res)) 

#54 write a pythom program to find Maximum value from dictionary whose key is present in the list

test_dict = {""Gfg"": 4, ""is"" : 5, ""best"" : 9, 
             ""for"" : 11, ""geeks"" : 3}",Code,Human
1231,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1232,"test_list = [""Gfg"", ""best"", ""geeks""] 
c=sorted(test_dict.values(),reverse=True)
for key,value in test_dict.items():
    if key in test_list and value in c[0:2]:
       print(key)

#55 write a python program to extract  N largest dictionaries keys and print it

test_dict = {6 : 2, 8: 9, 3: 9, 10: 8}",Code,Human
1233,"N = 4
  
res = []",Code,Human
1234,"for key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: 
    res.append(key)",Code,Human
1235,"print(""Top N keys are: "" + str(res))


#56 write a python program to print a  Dictionary Keys whose Values summation equals K

test_dict = {""Gfg"" : 3, ""is"" : 5, ""Best"" : 9, ""for"" : 8, ""Geeks"" : 10}",Code,Human
1236,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1237,"K = 14
l=[]
s=list(test_dict.values())
v=list(test_dict.keys())
for i in range(0,len(s)):
    for j in range(i+1,len(s)-1):
        if s[i]+s[j] == K:
           #print((i,j)) 
           print([v[i],v[j]]) 

#57 write a python program  to add prefix to each key name in dictionary and print it

test_dict = {'Gfg' : 6, 'is' : 7, 'best' : 9, 'for' : 8, 'geeks' : 11}",Code,Human
1238,"temp = ""Pro""

d={}
for key,value in test_dict.items():
    d.update({temp+key:value})
print(d)


#58 write a python program to extract Kth index elements from Dictionary Value list and print it

test_dict = {""Gfg"" : [4, 7, 5], ""Best"" : [8, 6, 7], ""is"" : [9, 3, 8]}",Code,Human
1239,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1240,"K = 1

s=[]
for key,value in test_dict.items():
    s.append(value[K])
print(s)    


#59 write a python program to  remove digits from Dictionary String Values List

import re",Code,Human
1241,"test_dict = {'Gfg' : [""G4G is Best 4"", ""4 ALL geeks""], 
             'is' : [""5 6 Good""],  
             'best' : [""Gfg Heaven"", ""for 7 CS""]}",Code,Human
1242,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1243,"res = {key: [re.sub('\d', '', ele) for ele in val] 
       for key, val in test_dict.items()}",Code,Human
1244,"print(""The filtered dictionary : "" + str(res))  

#60 write a program to Test for Even values dictionary values lists and print it

test_dict = {""Gfg"" : [6, 7, 3],  
             ""is"" :  [8, 10, 12, 16],  
             ""Best"" : [10, 16, 14, 6]} 
  
  
res = dict() 
for sub in test_dict: 
    flag = 1",Code,Human
1245,"for ele in test_dict[sub]: 
        if ele % 2 != 0: 
            flag = 0
            break",Code,Human
1246,res[sub] = True if flag else False,Code,Human
1247,"print(""The computed dictionary : "" + str(res))

#61 write a program to sort Dictionary by Values and Keys and print it

test_dict = {""Gfg"" : 1, ""is"" :  3, ""Best"" : 2, ""for"" : 3, ""Geeks"" : 2}",Code,Human
1248,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1249,"res = {val[0] : val[1] for val in sorted(test_dict.items(), key = lambda x: (-x[1],x[0]))}",Code,Human
1250,"print(""Sorted dictionary : "" + str(res))


#62 write a program to concatenate Ranged Values in String list and print it

test_list = [""abGFGcs"", ""cdforef"", ""asalloi""]",Code,Human
1251,"i, j = 2, 5
r=''
for z in test_list:
    r += z[i:j] 
print(r)

#63 write a program to replace dictionary value from other dictionary and print it


test_dict = {""Gfg"" : 5, ""is"" : 8, ""Best"" : 10, ""for"" : 8, ""Geeks"" : 9}",Code,Human
1252,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1253,"updict = {""Gfg""  : 10, ""Best"" : 17} 
d={}
for key in test_dict.keys():
     if key in updict:
        d.update({key:updict[key]})
     else:
        d.update({key:test_dict[key]})
print(d)       


#64 write a program  to convert string to dictionary and print it",Code,Human
1254,,Code,Human
1255,,Code,Human
1256,"str = "" Jan = January; Feb = February; Mar = March""",Code,Human
1257,"dictionary = dict(subString.split(""="") for subString in str.split("";""))",Code,Human
1258,"print(dictionary) 

#65 write a python program to extract item with Maximum Tuple Value

test_dict = {'gfg' : (4, 6), 
             'is' : (7, 8), 
             'best' : (8, 2)}",Code,Human
1259,,Code,Human
1260,tup_idx = 1,Code,Human
1261,,Code,Human
1262,"res = max(test_dict.items(), key = lambda ele: ele[1][tup_idx])",Code,Human
1263,"print(""The extracted maximum element item : "" + str(res)) 


#66 write a python program  to Remove dictionary Key Words and print it

test_str = 'gfg is best for geeks'",Code,Human
1264,"print(""The original string is : "" + str(test_str))",Code,Human
1265,"test_dict = {'geeks' : 1, 'best': 6} 
l=test_str.split()
print(l)
s=''
for i in l:
    if i in test_dict:
       l.remove(i)
print("" "".join(i for i in l))


#67 write a python program to group Strings on Kth character and print it

test_list = [""gfg"", ""is"", ""best"", ""for"", ""geeks""]",Code,Human
1266,"print(""The original list is : "" + str(test_list))",Code,Human
1267,"K = 2
d={}
for i in test_list:
    d.update({i[K-1]:[i]})
print(d) 


#68 write a python program to convert List of Dictionaries to List of Lists and print it 

test_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, 
             {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, 
             {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] 

s=[]
count=0
for i in test_list:
    if count<1: 
       s.append(list(i.keys()))
    s.append(list(i.values()))
    count+=1
print(s) 

#69 write a python program for printing custom order dictionary",Code,Human
1268,"test_dict = {'is' : 2, 'for' : 4, 'gfg' : 1, 'best' : 3, 'geeks' : 5}",Code,Human
1269,"ord_list = ['gfg', 'is', 'best', 'for', 'geeks'] 
 
c={}
for i in ord_list:
    if i in test_dict:
       c.update({i:test_dict[i]})
print(c) 


#70 write a python program to extract Numerical Dictionary values and print it

test_dict = {""Gfg"" : [""34"", ""45"", 'geeks'], 'is' : [""875"", None, ""15""], 'best' : [""98"", 'abc', '12k']}",Code,Human
1270,"res = [] 
for a, b, c in zip(*test_dict.values()):
    
    if a.isdigit() : 
        res.append((a, b, c))",Code,Human
1271,"print(""The Numerical values : "" + str(res)) 


#71 write a python program to count dictionaries in a list in Python and print it

test_list = [10, {'gfg' : 1}, {'ide' : 2, 'code' : 3}, 20]",Code,Human
1272,"print(""The original list is : "" + str(test_list)) 
count=0
for i in test_list:
    if isinstance(i,dict):
       count=count+1
print(count)    


#72 write a python program to Filter and Double keys greater than K and print it

test_dict = {'Gfg' : 4, 'is' : 2, 'best': 3, 'for' : 6, 'geeks' : 1}",Code,Human
1273,"print(""The original dictionary : "" + str(test_dict)) 
d={}",Code,Human
1274,"K = 2
for keys,values in test_dict.items():
    if values >K:
       d.update({keys:2*values})
    else:
       d.update({keys:values})       
print(d)

#73 write a python program to Convert Frequency dictionary to list and print it

test_dict = {'gfg' : 4, 'is' : 2, 'best' : 5}",Code,Human
1275,"print(""The original dictionary : "" + str(test_dict))
s=[]
for key,value in test_dict.items():
    for i in range(0,value):
        s.append(key)
print(s)

#74 write a python program to assign list items to Dictionary and print it 


test_list = [{'Gfg' :  1, 'id' : 2 },  
             {'Gfg' :  4, 'id' : 4 }]",Code,Human
1276,new_key = 'best',Code,Human
1277,"add_list = [12, 2]",Code,Human
1278,,Code,Human
1279,"res = [] 
for sub, val in zip(test_list, add_list): 
    sub[new_key] = val 
    res.append(sub)",Code,Human
1280,"print(""The modified dictionary : "" + str(res))


#75 write a python program to test Boolean Value of Dictionary and print it


test_dict = {'gfg' : True, 'is' : False, 'best' : True}",Code,Human
1281,"print(""The original dictionary is : "" + str(test_dict))

res=True
for key,value in test_dict.items():
    if value==False:
       res=False
       break
print(f""Dictionary is {res}"")

#76 write a python program  to print Dictionary values String Length Summation 

test_dict = {'gfg' : '2345', 
             'is' : 'abcde', 
             'best' : 'qwerty'}",Code,Human
1282,"print(""The original dictionary is : "" + str(test_dict)) 
list1=list(test_dict.values())
print(list1)
s="""".join(i for i in list1)
print(f'Summation of string values is {len(s)}')


#77 write a python program to printlist of  Keys with shortest length lists in dictionary

test_dict = {'gfg' : [4, 5], 
             'is' : [9, 7, 3, 10], 
             'best' : [11, 34], 
             'for' : [6, 8, 2],  
             'geeks' : [12, 24]}",Code,Human
1283,"print(""The original dictionary is : "" + str(test_dict)) 
s=[]
a=0
q=[]
for key,value in test_dict.items():
    s.append(len(value))
    q.append(key)
l=[]
print(s)
print(q) 
for k,z in zip(q,s):
      if z==min(s):
         l.append(k)
print(l) 


#78 write a python program to decrement Dictionary value by K

test_dict = {'gfg' : 1, 'is' : 2, 'for' : 4, 'CS' : 5}",Code,Human
1284,"print(""The original dictionary : "" + str(test_dict))",Code,Human
1285,"K = 5

for key,value in test_dict.items():
    test_dict.update({key:value-K})
print(test_dict) 


#79 write a python program to find Common items among dictionaries and print it 

test_dict1 = {'gfg' : 1, 'is' : 2, 'best' : 3} 
test_dict2 = {'gfg' : 1, 'is' : 2, 'good' : 3}",Code,Human
1286,"print(""The original dictionary 1 is : "" + str(test_dict1)) 
print(""The original dictionary 2 is : "" + str(test_dict2))

count=0
for key1,value1 in test_dict1.items():
    for key2,value2 in test_dict2.items():
        if key1==key2 and value1==value2:
           count=count+1
print(count)

#80 write a python program to print Nth largest values in dictionary









#81 write a python program to print consecutive Kth column Difference in Tuple List",Code,Human
1287,"test_list = [(5, 4, 2), (1, 3, 4), (5, 7, 8), (7, 4, 3)]",Code,Human
1288,"print(""The original list is : "" + str(test_list))",Code,Human
1289,"K = 1 
s=[]
for i in range(0,len(test_list)-1):
    s.append(abs(test_list[i][K]-test_list[i+1][K]))
print(s)


#82 write a python program to find Tuples with positive elements in List of tuples and print it

test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]",Code,Human
1290,"print(""The original list is : "" + str(test_list)) 

#[all(i) for i in test_list if i>0]

result = [i for i in test_list if all(ele >= 0 for ele in i)]",Code,Human
1291,"print(""Positive elements Tuples : "" + str(result))  


#83 write a python program to remove given character from first element of Tuple and print it

test_list = [(""GF ! g !"", 5), (""! i ! s"", 4), (""best !!"", 10)]",Code,Human
1292,"print(""The original list is : "" + str(test_list))",Code,Human
1293,"K = ""!""",Code,Human
1294,"res = [(sub[0].replace(K, ''), sub[1]) for sub in test_list]",Code,Human
1295,"print(""The filtered tuples : "" + str(res)) 

#84  write a python program remove particular data type Elements from Tuple and print it

test_tuple = (4, 5, 'Gfg', 7.7, 'Best')",Code,Human
1296,"print(""The original tuple : "" + str(test_tuple))",Code,Human
1297,"a=tuple()
data_type = int 
for i in test_tuple:
    if not isinstance(i,data_type):
       a=a+(i,)
print(list(a))

#85 write a python program to print rear element extraction from list of tuples records

test_list = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]",Code,Human
1298,"print (""The original list is : "" + str(test_list))
s=[]
for i in test_list:
    l=len(i)
    s.append(i[l-1])

print(s)

#86 write a python program to raise elements of tuple as power to another tuple and print it

test_tup1 = (10, 4, 5, 6)  
test_tup2 = (5, 6, 7, 5) 
s=tuple()",Code,Human
1299,"print(""The original tuple 1 : "" + str(test_tup1))  
print(""The original tuple 2 : "" + str(test_tup2))

for i in range(0,len(test_tup1)):
    s+= (test_tup1[i] ** test_tup2[i],)
print(s)


#87 write a python program to Count the elements till first tuple and print it

test_tup = (1, 5, 7, (4, 6), 10)",Code,Human
1300,"print(""The original tuple : "" + str(test_tup))
count=0
for i in test_tup:
    if isinstance(i,tuple):
       
       break
    count=count+1
print(f'count of element till first tuple is {count}')

#88 write a python program to print Dissimilar Elements in Tuples


test_tup1 = (3, 4, 5, 6) 
test_tup2 = (5, 7, 4, 10)",Code,Human
1301,"print(""The original tuple 1 : "" + str(test_tup1)) 
print(""The original tuple 2 : "" + str(test_tup2))
c=tuple()
c=tuple(set(test_tup1) ^ set(test_tup2))
print(f'Dissimilar element tuple is {c}')


#89 write a python program to flatten Tuples List to String and print it

test_list = [('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]",Code,Human
1302,"print(""The original list : "" + str(test_list)) 
s=''
for i in test_list:
    for j in i:
        s+=' '+j+' '
print(f' string after flattening is {s}')

#90 write a python program to filter tuples according to list element presence and print it

test_list = [(1, 4, 6), (5, 8), (2, 9), (1, 10)] 
s=[]",Code,Human
1303,"tar_list = [6, 10] 

for i in test_list:
    for j in i:
        #print(j)
        if j in tar_list:
           #print(j)
           s.append(i)
print(s)         


#91 write a python program to concatenate tuple and print it

test_tup1 = (1, 3, 5) 
test_tup2 = (4, 6)",Code,Human
1304,"print(""The original tuple 1 : "" + str(test_tup1)) 
print(""The original tuple 2 : "" + str(test_tup2)) 
c=test_tup1+test_tup2
print(c)

#92 write a python program to sort list under tuples and print it 

test_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5])",Code,Human
1305,"print(""The original tuple is : "" + str(test_tup)) 
s=tuple(sorted([j for j in i],reverse=False ) for i in test_tup)
print(f'the sorted list inside tuple is {s}')

#93 write a  python program for  removing strings from tuple and printing it

test_list = [('Geeks', 1, 2), ('for', 4, 'Geeks'), (45, 'good')]",Code,Human
1306,"print(""The original list : "" + str(test_list)) 

s=[]
for i in test_list:
    t=tuple()
    for j in i:
        if not isinstance(j,str):
           t+=(j,)
    s.append(t)       
print(f'List after removing string from tuple is {s}')

#94 write a program to remove matching tuples and print it

test_list1 = [('Early', 'morning'), ('is','good'), ('for', 'Health')] 
test_list2 = [('Early', 'morning'), ('is','good')] 

l=[]
for i in range(0,len(test_list1)):
    for j in range(0,len(test_list2)):
        if test_list1[i]  not in test_list2:
           #continue
           l.append(test_list1[i])
           break
print(l) 

#95  write a program to Split tuple into groups of n and print it

ini_tuple = (1, 2, 3, 4, 8, 12, 3, 34, 
             67, 45, 1, 1, 43, 65, 9, 10)
n=4
N=0
s=tuple()
#t=tuple()
for i in range(0,len(ini_tuple)//n):
    t=tuple()
    for j in range(N,N+n):
        #print(ini_tuple[j])
        t+=(ini_tuple[j],)
        
    N=N+n
    s+=(t,)    
print(s)

#96 write a python program to convert  list of tuples into digits and print it



lst = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]
a=''
for i in lst:
    for j in i:
        a+=str(j)
print(list(set(a)))

#97 write a python program to Join tuple elements in a list and print it

test_list = [('geeks', 'for', 'geeks'), 
             ('computer', 'science', 'portal')]",Code,Human
1307,"print (""The original list is : "" + str(test_list)) 
l=[]
#s=''
for i in test_list:
    s=''
    for j in i:
        s+=j+' '
    l.append(s)
print(l)    

#98 write a python program to  count the elements in a list until an element is a Tuple  and print it

li = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]
count=0
for i in li:
    if  isinstance(i,tuple):
        break
    count=count+1
print(f'count of element till tuple is encountered {count}')

#99 write a python program  to get maximum of each key Dictionary List and print it

test_list = [{""Gfg"": 8, ""is"": 1, ""Best"": 9}, 
             {""Gfg"": 2, ""is"": 9, ""Best"": 1}, 
             {""Gfg"": 5, ""is"": 10, ""Best"": 7}]",Code,Human
1308,"print(""The original list is : "" + str(test_list)) 
  
  
res = {} 
for i in test_list: 
    for key, value in i.items():",Code,Human
1309,"if key in res: 
            res[key] = max(res[key], value) 
        else: 
            res[key] = value",Code,Human
1310,"print(""All keys maximum : "" + str(res))

#100 write a python program to extract Keys with specific Value Type

test_dict = {'gfg': 2, 'is': 'hello', 'best': 2, 'for': {'1': 3}, 'geeks': 4}",Code,Human
1311,"print(""The original dictionary is : "" + str(test_dict))",Code,Human
1312,"targ_type = int
  
res = [] 
for key, val in test_dict.items():",Code,Human
1313,"if isinstance(val, targ_type): 
        res.append(key)",Code,Human
1314,"print(""The extracted keys : "" + str(res))",Code,Human
1315,"if __name__ == '__main__': 
      
    string = ""SchoolofAI""",Code,Human
1316,i = 5,Code,Human
1317,"print(remove(string, i))",Code,Human
1318,,Code,Human
1319,"def remove_last_element_list(list1):
    list1.pop()
    return list1",Code,Human
1320,,Code,Human
1321,"def find_the_largest(num1, num2):
    sum_ = num1+num2
    if num1 >= sum_ and num1 >= num2:
        return num1
    elif num2 >= sum_ and num2 >= num1:
        return num2
    else:
        return sum_",Code,Human
1322,,Code,Human
1323,"import math
def area_of_polygon(number_of_edges, circumradius):
        return number_of_edges * 2 * circumradius * math.sin(180/number_of_edges) * circumradius * math.cos(180/number_of_edges) * 0.5",Code,Human
1324,,Code,Human
1325,"import math
def apothem_of_polygon(number_of_edges, circumradius):
    return circumradius * math.cos(180/number_of_edges)",Code,Human
1326,,Code,Human
1327,"def create_deck_of_cards(values: list, suits: list):
    card_deck = []
    for i in range(52):
        tup = (values[i], suits[i])
        card_deck.append(tup)
    return card_deck",Code,Human
1328,,Code,Human
1329,,Code,Human
1330,"def temp_converter(value, unit):
    if unit =='F' and value in range(32, 212):
        converts = (value - 32) * 5.0/9.0
        return converts
    elif unit =='C' and value in range(0,100):
        converts = (9.0/5.0) * value + 32
        return converts
    else:
        raise ValueError",Code,Human
1331,,Code,Human
1332,"def powered_list(a_list, a_number):
    a_list = [math.pow(a_number) for i in a_list]  
    return a_list",Code,Human
1333,,Code,Human
1334,"def execute_python_code(a_string):
    return exec(a_string)",Code,Human
1335,,Code,Human
1336,"def multiply_all(a_list):
    product = 1
    for i in a_list:
        product *= i
    return product",Code,Human
1337,,Code,Human
1338,"def slice_a_tuple(a_tuple, start, stop, step=1):
    return a_tuple[start:stop:step]",Code,Human
1339,,Code,Human
1340,"def list_is_empty(a_list):
    if not a_list:
        return True
    else:
        return False",Code,Human
1341,,Code,Human
1342,"import ast
def convert_string_to_list(str_lst):
    return ast.literal_eval(str_lst)",Code,Human
1343,,Code,Human
1344,"def extend_list_without_append(list1, list2):
    return list1.extend(list2)",Code,Human
1345,,Code,Human
1346,"def find_the_median(x,y,z):
    list_ = sorted([x,y,z])
    return list_[1]",Code,Human
1347,,Code,Human
1348,"def remove_newline(string):
    return string.strip()",Code,Human
1349,,Code,Human
1350,"def convert_str_to_list(string):
    return string.split(' ')",Code,Human
1351,,Code,Human
1352,"def remove_spaces_from_string(string):
    return string.replace(' ', '')",Code,Human
1353,,Code,Human
1354,"capitalize_both_ends = lambda x: x[0].upper() + x[1:-1] + x[-1].upper()

def capitalize_first_and_last(string):
    string = string.strip().split()
    new_string = [capitalize_both_ends(word) for word in string]
    return new_string",Code,Human
1355,,Code,Human
1356,"def remove_duplicate_words(string):
    string = string.strip().split()
    return ' '.join(set(string))",Code,Human
1357,,Code,Human
1358,"from datetime import date
def day_diff(date1, date2):
    diff = date1 - date2
    return diff.days",Code,Human
1359,,Code,Human
1360,"def sphere_volume(radius):
    volume =  4.0/3.0 * 3.14 * radius ** 3
    return volume",Code,Human
1361,,Code,Human
1362,"def check_vowel_or_not(letter):
    result =  str(letter) in ""aeiou""
    return result",Code,Human
1363,,Code,Human
1364,"import os
import platform
def get_info():
    return f'OS: {os.name}\n Platform: {platform.system}'",Code,Human
1365,,Code,Human
1366,"import multiprocessing
print(multiprocessing.cpu_count())",Code,Human
1367,,Code,Human
1368,"from math import sqrt
print(""Input lengths of shorter triangle sides:"")
def hypotenuse(side1, side2):
    hyp = sqrt(side1**2 + side2**2)
    return hyp",Code,Human
1369,,Code,Human
1370,"def height_converter(h_ft, h_inch):
    h_inch += h_ft * 12
    h_cm = round(h_inch * 2.54, 1)
    return h_cm",Code,Human
1371,,Code,Human
1372,"def distance_converter(d_ft):
    d_inches = d_ft  * 12
    d_yards = d_ft  / 3.0
    d_miles = d_ft  / 5280.0
    return f""Distance in Inches:{d_inches}\nDistance in Yards :{d_yards}\nDistance in Miles :{d_miles}""",Code,Human
1373,,Code,Human
1374,"import sys
print(""\nPython Copyright Information"")
print(sys.copyright)
print()",Code,Human
1375,,Code,Human
1376,"import sys
import textwrap
module_name = ', '.join(sorted(sys.builtin_module_names))
print(textwrap.fill(module_name, width=70))",Code,Human
1377,,Code,Human
1378,"import getpass
print(getpass.getuser())",Code,Human
1379,,Code,Human
1380,"def filename_extension(file):
    f_extns = file.split(""."")
    return f""The extension of the file is :{repr(f_extns[-1])}""",Code,Human
1381,,Code,Human
1382,"def area_shape(base, height, shape):
    return {'triangle': 0.5*base*height, 'parallelogram': base*height}[shape]",Code,Human
1383,,Code,Human
1384,"def reverse_string(str1):
    if len(str1) % 4 == 0:
       return ''.join(reversed(str1))
    return str1",Code,Human
1385,,Code,Human
1386,"def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))",Code,Human
1387,,Code,Human
1388,"def vowel(text):
    vowels = ""aeiuoAEIOU""
    main_list = [letter for letter in text if letter in vowels]
    return len(main_list), main_list",Code,Human
1389,,Code,Human
1390,"def first_repeated_char(str1):
    for index,c in enumerate(str1):
        if str1[:index+1].count(c) > 1:
            return c 
    return ""None""",Code,Human
1391,,Code,Human
1392,"def first_repeated_word(str1):
    temp = set()
    for word in str1.split():
        if word in temp:
            return word
        else:
            temp.add(word)
    return 'None'",Code,Human
1393,,Code,Human
1394,"def remove_spaces(str1):
    str1 = str1.replace(' ','')
    return str1",Code,Human
1395,,Code,Human
1396,"def remove_duplicate(str1):
    list_str = str1.split()
    return """".join(set(list_str))",Code,Human
1397,,Code,Human
1398,"def triangle_area(base, height):
    area = base*height/2
    return area",Code,Human
1399,,Code,Human
1400,"def permute(nums):
    result_perms = [[]]
    for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm)+1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
    return result_perms",Code,Human
1401,,Code,Human
1402,"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))",Code,Human
1403,,Code,Human
1404,"def cube_volume(side):
    volume = side ** 3
    return volume",Code,Human
1405,,Code,Human
1406,"def prism_volume(base_area, height):
    volume = base_area * height
    return volume",Code,Human
1407,,Code,Human
1408,"def cylinder_volume(radius, height):
    volume = 3.14 * (radius ** 2) * height
    return volume",Code,Human
1409,,Code,Human
1410,"def cone_volume(radius, height):
    volume = 1/3 * 3.14 * (radius ** 2) * height
    return volume",Code,Human
1411,,Code,Human
1412,"def pyramid_volume(base_area, height):
    volume = 1/3 * base_area * height
    return volume",Code,Human
1413,,Code,Human
1414,"def cube_surface_area(side):
    surface_area = 6 * side ** 2
    return surface_area",Code,Human
1415,,Code,Human
1416,"def rec_prism_volume(length, width, height):
    volume = length * width * height
    return volume",Code,Human
1417,,Code,Human
1418,"def rec_prism_surface_area(length, width, height):
    surface_area = 2*((length * width) + (width * height) + (height * length))
    return surface_area",Code,Human
1419,,Code,Human
1420,"def prism_surface_area(base_area, base_perimeter, height):
    surface_area = 2*base_area + (base_perimeter*height)
    return surface_area",Code,Human
1421,,Code,Human
1422,"def cylinder_surface_area(radius, height):
    surface_area = 3.14 * (radius ** 2) + (2 * 3.14 * radius * height)
    return surface_area",Code,Human
1423,,Code,Human
1424,"def cone_surface_area(radius, slant_height):
    surface_area =  3.14 * (radius ** 2) + 3.14 * radius * slant_height
    return surface_area",Code,Human
1425,,Code,Human
1426,"def pyramid_surface_area(base_area, height):
    surface_area = 1/3 * base_area * height
    return surface_area",Code,Human
1427,,Code,Human
1428,"def cuboid_volume(length, breadth, height):
    volume = length * breadth * height
    return volume",Code,Human
1429,,Code,Human
1430,"my_list = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']",Code,Human
1431,,Code,Human
1432,"def divide_chunks(l, n):",Code,Human
1433,"for i in range(0, len(l), n): 
		yield l[i:i + n]",Code,Human
1434,,Code,Human
1435,"def lucas_numbers(n):
    first, second = 2,1
    for _ in range(n):
        first, second = second, first+second
    return first",Code,Human
1436,,Code,Human
1437,"def square_numbers(n):
    for i in range(n):
        yield i ** 2",Code,Human
1438,,Code,Human
1439,"def cube_numbers(n):
    for i in range(n):
        yield i **  3",Code,Human
1440,,Code,Human
1441,"def triangle_numbers(n):
    for i in range(n):
        yield int(i*(i+1)/2)",Code,Human
1442,,Code,Human
1443,"from math import sqrt
from itertools import count, islice

def is_prime(n):
    return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n)-1)))

def euclid_numbers(n):
    product = 1
    if n > 3:
        for i in range(n):
            if is_prime(i):
                product = product * i
                yield product",Code,Human
1444,,Code,Human
1445,"import textwrap
sample_text ='''
        Python is a widely used high-level, general-purpose, interpreted,
        dynamic programming language. Its design philosophy emphasizes
        code readability, and its syntax allows programmers to express
        concepts in fewer lines of code than possible in languages such
        as C++ or Java.
        '''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)
#wrapped += '\n\nSecond paragraph after a blank line.'
final_result = textwrap.indent(wrapped, '> ')",Code,Human
1446,,Code,Human
1447,"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(x))
print(""Original Number: "", y)
print(""Formatted Number with no decimal places: ""+""{:.0f}"".format(y))",Code,Human
1448,,Code,Human
1449,"list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)",Code,Human
1450,,Code,Human
1451,"from copy import deepcopy
#create a tuple
tuplex = (""HELLO"", 5, [], True) 
print(tuplex)
#make a copy of a tuple using deepcopy() function
tuplex_colon = deepcopy(tuplex)
tuplex_colon[2].append(50)


#65",Code,Human
1452,"tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7 
print(tuplex)
#return the number of times it appears in the tuple.
count = tuplex.count(4)
print(count)",Code,Human
1453,,Code,Human
1454,"#create a tuple
tuplex = (2, 4, 3, 5, 4, 6, 7, 8, 6, 1)
#used tuple[start:stop] the start index is inclusive and the stop index
_slice = tuplex[3:5]",Code,Human
1455,,Code,Human
1456,"#create a tuple
x = (""w3resource"")",Code,Human
1457,y = reversed(x),Code,Human
1458,,Code,Human
1459,"#create a list
l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
    d.setdefault(a, []).append(b)
print (d)",Code,Human
1460,,Code,Human
1461,"tuplex = (""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"")
print(""e"" in tuplex)",Code,Human
1462,,Code,Human
1463,"def convert_list_to_tuple(list_input):
    return tuple(list_input)",Code,Human
1464,,Code,Human
1465,"def unzip_list_of_tuples(list_tuple):
    return list(zip(*l))",Code,Human
1466,,Code,Human
1467,"l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
    d.setdefault(a, []).append(b)
print(d)",Code,Human
1468,,Code,Human
1469,"def clear_set(set_input):
    setp_copy = set_input.copy()
    setp_copy.clear()
    return setp_copy",Code,Human
1470,,Code,Human
1471,"def ascii_value_of_character(char):
    return ord(char)",Code,Human
1472,,Code,Human
1473,"#Union
def union_of_sets(Set1, Set2):
    result = Set1 | Set2
    return result",Code,Human
1474,,Code,Human
1475,"#A new empty set
color_set = set()
color_set.add(""Red"")
print(color_set)",Code,Human
1476,,Code,Human
1477,"def add_two_lists(list_1, list_2):
    result = map(lambda x, y: x + y, list_1, list_2)
    return result",Code,Human
1478,,Code,Human
1479,"def divisible_by_digits(start_num, end_num):
    return [n for n in range(start_num, end_num+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",Code,Human
1480,,Code,Human
1481,"def max_val(list_val):
     max_val = max(list_val, key = lambda i: (isinstance(i, int), i))  
     return(max_val)",Code,Human
1482,,Code,Human
1483,"def first_last(name):
    return name[0] + name[-1]",Code,Human
1484,,Code,Human
1485,,Code,Human
1486,"def syslvester_seq(n):
    if n == 1:
        return 2
    if n > 1:
        return syslvester_seq(n-1)**2 - syslvester_seq(n-1) + 1",Code,Human
1487,,Code,Human
1488,,Code,Human
1489,"def tribonacci_seq(n):
    if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        elif n == 2 :
            return 1
        else:
            return tribonacci_seq(n-1) + tribonacci_seq(n-2) + tribonacci_seq(n-3)",Code,Human
1490,,Code,Human
1491,,Code,Human
1492,"def pell_seq(n):
    if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return 2 * pell_seq(n-1) + pell_seq(n-2)",Code,Human
1493,,Code,Human
1494,,Code,Human
1495,"def fermat_seq(n):
    if n >= 0:
        return 2 ** (2**n) + 1",Code,Human
1496,,Code,Human
1497,,Code,Human
1498,"def padovan_seq(n):
    if n >= 0:
        if n in {0,1,2}:
            return 1
        else:
            return padovan_seq(n-3) + padovan_seq(n-2)",Code,Human
1499,,Code,Human
1500,,Code,Human
1501,"def jacobsthal_seq(n):
     if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return 2 * jacobsthal_seq(n-2) + jacobsthal_seq(n-1)",Code,Human
1502,,Code,Human
1503,,Code,Human
1504,"def perrins_number(n):
    if n >= 0:
        if n == 0:
            return 3
        elif n == 1:
            return 0
        elif n == 2:
            return 2
        else:
            return perrins_number(n-3) + perrins_number(n-2)",Code,Human
1505,,Code,Human
1506,,Code,Human
1507,"def cullen_number(n):
    if n >= 0:
        return n * 2 ** n + 1",Code,Human
1508,,Code,Human
1509,,Code,Human
1510,"def woodall_number(n):
    if n >= 0:
        return n * 2 ** n - 1",Code,Human
1511,,Code,Human
1512,,Code,Human
1513,"def carol_number(n):
    if n >= 0:
        return (2**n - 1)**2 - 2",Code,Human
1514,,Code,Human
1515,,Code,Human
1516,"def star_number(n):
    return 6*n*(n-1)+1",Code,Human
1517,,Code,Human
1518,,Code,Human
1519,"def stella_octangula_number(n):
    if n >= 0:
        return n*(2**n - 1)",Code,Human
1520,,Code,Human
1521,"def hours_to_seconds(hours):
    return hours * 60 * 60",Code,Human
1522,,Code,Human
1523,"def mod(m, n):
    return m % n",Code,Human
1524,,Code,Human
1525,"def next_edge(side1, side2):
    return (side1+side2-1)",Code,Human
1526,,Code,Human
1527,"def difference_max_min(lst):
	return abs(min(lst) - max(lst))",Code,Human
1528,,Code,Human
1529,"def number_of_frames(minutes, fps):
	return (minutes * 60) * fps",Code,Human
1530,,Code,Human
1531,"def is_empty(s):
    if s == """":
        return True
    else:
        return False",Code,Human
1532,,Code,Human
1533,"def inches_to_feet(inches):
    if inches < 12:
        return 0
    return inches/12",Code,Human
1534,,Code,Human
1535,"def calc_age(age):
    calculation = age*365
    return calculation",Code,Human
1536,"def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples 
  
tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  
          ('krishna', 'akbar', '45'), ('',''),()] 
print(Remove(tuples))",Code,Human
1537,"def countX(lst, x): 
    return lst.count(x) 

lst = [8, 6, 8, 10, 8, 20, 10, 8, 8] 
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))",Code,Human
1538,"def Cloning(li1): 
    li_copy = list(li1) 
    return li_copy 

li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print(""Original List:"", li1) 
print(""After Cloning:"", li2)",Code,Human
1539,"list1 = [10, 21, 4, 45, 66, 93] 
only_odd = [num for num in list1 if num % 2 == 1] 
print(""Odd numbers in the list: "",only_odd)",Code,Human
1540,"list1 = [10, 21, 4, 45, 66, 93]  
even_nos = [num for num in list1 if num % 2 == 0] 

print(""Even numbers in the list: "", even_nos)",Code,Human
1541,"l = [1000,298,3579,100,200,-45,900] 
n = 4

l.sort() 
print(l[-n:])",Code,Human
1542,"list1 = [10, 20, 4, 45, 99]

list1.sort()
print(""Second largest element is:"", list1[-2])",Code,Human
1543,"def swapList(newList): 
    
    newList[0], newList[-1] = newList[-1], newList[0] 

    return newList 

newList = [12, 35, 9, 56, 24] 
print(swapList(newList))",Code,Human
1544,"def simple_interest(p,t,r): 
    print('The principal is', p) 
    print('The time period is', t) 
    print('The rate of interest is',r) 
    
    si = (p * t * r)/100
    
    print('The Simple Interest is', si) 
    return si 

simple_interest(8, 6, 8)",Code,Human
1545,"def insertionSort(arr): 

    for i in range(1, len(arr)): 

        key = arr[i] 

        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 


arr = [12, 11, 13, 5, 6] 
insertionSort(arr) 
print (f""Sorted array is: {arr}"")",Code,Human
1546,"def bubbleSort(arr): 
    n = len(arr) 
    for i in range(n-1): 
        for j in range(0, n-i-1): 

            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

arr = [64, 34, 25, 12, 22, 11, 90] 

bubbleSort(arr) 

print (f""Sorted array {arr}"")",Code,Human
1547,"A = [64, 25, 12, 22, 11] 

for i in range(len(A)): 
    
    min_idx = i 
    for j in range(i+1, len(A)): 
        if A[min_idx] > A[j]: 
            min_idx = j 
     
    A[i], A[min_idx] = A[min_idx], A[i] 

print (f""Sorted array {A}"")",Code,Human
1548,"num1 = '00001'
num2 = '10001'

sum = bin(int(num1,2) + int(num2,2))
print(sum)",Code,Human
1549,"vowels = 'aeiou'

ip_str = 'Hello, have you tried our tutorial section yet?'

ip_str = ip_str.casefold()

count = {}.fromkeys(vowels,0)

for char in ip_str:
   if char in count:
       count[char] += 1

print(count)",Code,Human
1550,"E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};

print(""Union of E and N is"",E | N)",Code,Human
1551,"E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};

print(""Intersection of E and N is"",E & N)",Code,Human
1552,"E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};
print(""Difference of E and N is"",E - N)",Code,Human
1553,"E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};
print(""Symmetric difference of E and N is"",E ^ N)",Code,Human
1554,"my_str = ""Hello this Is an Example With cased letters""

words = [word.lower() for word in my_str.split()]
words.sort()

print(""The sorted words are:"")
for word in words:
   print(word)",Code,Human
1555,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''

my_str = ""Hello!!!, he said ---and went.""

no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char

print(no_punct)",Code,Human
1556,"my_str = 'aIbohPhoBiA'

my_str = my_str.casefold()
rev_str = reversed(my_str)

if list(my_str) == list(rev_str):
   print(""The string is a palindrome."")
else:
   print(""The string is not a palindrome."")",Code,Human
1557,"X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]

for i in range(len(X)):
   for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)",Code,Human
1558,"def print_factors(x):
   print(""The factors of"",x,""are:"")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)

num = 63
print_factors(num)",Code,Human
1559,"def compute_lcm(x, y):

   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))",Code,Human
1560,"def compute_hcf(x, y):
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

num1 = 54 
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))",Code,Human
1561,"my_list = [12, 65, 54, 39, 102, 339, 221,]

result = list(filter(lambda x: (x % 13 == 0), my_list))

print(""Numbers divisible by 13 are"",result)",Code,Human
1562,"terms = 10

result = list(map(lambda x: 2 ** x, range(terms)))
for i in range(terms):
   print(""2 raised to power"",i,""is"",result[i])",Code,Human
1563,"num = 16

if num < 0:
   print(""Enter a positive number"")
else:
   sum = 0
   while(num > 0):
       sum += num
       num -= 1
   print(""The sum is"", sum)",Code,Human
1564,"lower = 100
upper = 2000

for num in range(lower, upper + 1):

   order = len(str(num))
    
   sum = 0

   temp = num
   while temp > 0:
       digit = temp % 10
       sum += digit ** order
       temp //= 10

   if num == sum:
       print(num)",Code,Human
1565,"num = 663
sum = 0

temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** 3
   temp //= 10

if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")",Code,Human
1566,"lower = 900
upper = 1000

print(""Prime numbers between"", lower, ""and"", upper, ""are:"")

for num in range(lower, upper + 1):",Code,Human
1567,"if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)",Code,Human
1568,"num = 407

if num > 1:
   for i in range(2,num):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           print(i,""times"",num//i,""is"",num)
           break
   else:
       print(num,""is a prime number"")
else:
   print(num,""is not a prime number"")",Code,Human
1569,"a = 'hello. i am a sentence.'
a = '. '.join(i.capitalize() for i in a.split('. '))
print(a)",Code,Human
1570,"str_input = ""1 2 3 4 5 6""

int_input = map(int, str_input.split())

print(list(int_input))",Code,Human
1571,"lst = [40, 10, 20, 30]

def minIndex(lst):
    return min(range(len(lst)), key=lst.__getitem__)
print(minIndex(lst))",Code,Human
1572,"lst = [40, 10, 20, 30]

def maxIndex(lst):
    return max(range(len(lst)), key=lst.__getitem__)

print(maxIndex(lst))",Code,Human
1573,"s = ""foo    bar   foobar foo""

print(s.split(None, 2))",Code,Human
1574,"dctA = {'a': 1, 'b': 2, 'c': 3}
dctB = {'b': 4, 'c': 3, 'd': 6}

for ky in dctA.keys() & dctB.keys():
    print(ky)",Code,Human
1575,"dctA = {'a': 1, 'b': 2, 'c': 3}
dctB = {'b': 4, 'c': 3, 'd': 6}

for item in dctA.items() & dctB.items():
    print(item)",Code,Human
1576,"data = [2, 'hello', 3, 3.4]

print (','.join(map(str, data)))",Code,Human
1577,"L = [1, 2, [3, 4], [5, 6, [7]]]

def flatten(L):
    for item in L:
        if isinstance(item, list):
            yield from flatten(item)
        else:
            yield item

print(list(flatten(L)))",Code,Human
1578,"_dict = {""one"": 1, ""two"": 2}",Code,Human
1579,"assert len(_dict) == len(set(_dict.values()))
reversed_dict = {v: k for k, v in _dict.items()}
print(reversed_dict)",Code,Human
1580,"s = 'The Little Price'

width = 20
s3 = s.center(width)

print(s3)",Code,Human
1581,"d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d.items(), key=lambda x: x[1]))",Code,Human
1582,"d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d, key=d.get))",Code,Human
1583,"def product(a, b):
    return a * b

def subtract(a, b):
    return a - b

b = True
print((product if b else subtract)(1, 1))",Code,Human
1584,"a = 10
print(1 < a < 50)
print(10 == a < 20)",Code,Human
1585,"class PropertyCache(object):
    """""" a decorator to cache property
    """"""

    def __init__(self, func):
        self.func = func

    def __get__(self, obj, cls):
        if not obj:
            return self
        value = self.func(obj)
        setattr(obj, self.func.__name__, value)
        return value
        

class Foo:
    def __init__(self):
        self._property_to_be_cached = 'result'

    @PropertyCache
    def property_to_be_cached(self):
        print('compute')
        return self._property_to_be_cached
    
test = Foo()

print(test.property_to_be_cached)
print(test.property_to_be_cached)",Code,Human
1586,"x = {'a': 1, 'b' : 2}
y = {'c': 3, 'd' : 4}

z = {**x, **y}
print(z)",Code,Human
1587,"list1=[10,20,30,40,50]
new_list=[] 
j=0
for i in range(0,len(list1)):
    j+=list1[i]
    new_list.append(j) 
    
print(new_list)",Code,Human
1588,"l = [1, 2, 3, 4, 5, 6, 7, 8, 9] 
n = 4
x = [l[i:i + n] for i in range(0, len(l), n)] 
print(x)",Code,Human
1589,"def check(string, sub_str): 
    if (string.find(sub_str) == -1): 
        print(""NO"") 
    else: 
        print(""YES"") 

string = ""geeks for geeks""
sub_str =""geek""
check(string, sub_str)",Code,Human
1590,"test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'

print(""The original string is : "" + str(test_str)) 
res = {key: test_str.count(key) for key in test_str.split()} 
print(""The words frequency : "" + str(res))",Code,Human
1591,"test_str = 'geeksforgeeks_is_best'
print(""The original string is : "" + test_str) 

res = test_str.replace(""_"", "" "").title().replace("" "", """") 
print(""The String after changing case : "" + str(res))",Code,Human
1592,"def printWords(s): 
    s = s.split(' ') 

    for word in s: 
        if len(word)%2==0: 
            print(word) 

s = ""i am muskan""
printWords(s)",Code,Human
1593,"def removeDuplicate(str): 
    s=set(str) 
    s="""".join(s) 
    print(""Without Order:"",s) 
    t="""" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
    print(""With Order:"",t) 
    
str1=""geeksforgeeks""
removeDuplicate(str1)",Code,Human
1594,"test_str = ""GeeksforGeeks""
print (""The original string is : "" + test_str) 

all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get) 

print (""The minimum of all characters in GeeksforGeeks is : "" + res)",Code,Human
1595,"test_str = ""GeeksforGeeks""
print (""The original string is : "" + test_str) 

all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = max(all_freq, key = all_freq.get) 

print (""The maximum of all characters in GeeksforGeeks is : "" + res)",Code,Human
1596,"def string_k(k, str): 
    
    string = [] 

    text = str.split("" "") 

    for x in text: 

        if len(x) > k: 
            
            string.append(x) 

    return string 

k = 3
str1 =""geek for geeks""
print(string_k(k, str1))",Code,Human
1597,"def check2(string) : 

    t = '01'

    count = 0
    for char in string : 

        if char not in t : 
            count = 1
            break
        else : 
            pass
    if count : 
        print(""No, string is not binary"") 
    else : 
        print(""Yes, string is binary"") 

string = ""001021010001010""

check2(string)",Code,Human
1598,"def UncommonWords(A, B): 

    count = {} 
    
    for word in A.split(): 
        count[word] = count.get(word, 0) + 1
    
    for word in B.split(): 
        count[word] = count.get(word, 0) + 1

    return [word for word in count if count[word] == 1] 

A = ""Geeks for Geeks""
B = ""Learning from Geeks for Geeks""

print(UncommonWords(A, B))",Code,Human
1599,"test_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '

print(""The original string is : "" + test_str) 

repl_dict = {'Gfg' : 'It', 'Classes' : 'They' } 

test_list = test_str.split(' ') 
res = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx 
                                else val for idx, val in enumerate(test_list)]) 

print(""The string after replacing : "" + res)",Code,Human
1600,"def rotate(input,d): 

    Lfirst = input[0 : d] 
    Lsecond = input[d :] 
    Rfirst = input[0 : len(input)-d] 
    Rsecond = input[len(input)-d : ] 

    print (""Left Rotation : "", (Lsecond + Lfirst) ) 
    print (""Right Rotation : "", (Rsecond + Rfirst)) 

input = 'GeeksforGeeks'
d=4
rotate(input,d)",Code,Human
1601,"test_str = ""geeksforgeeks""

print(""The original string is : "" + test_str) 

temp = str.maketrans(""geek"", ""abcd"") 
test_str = test_str.translate(temp) 

print(""The string after swap : "" + test_str)",Code,Human
1602,"test_dict = {'gfg' : [5, 6, 7, 8], 
            'is' : [10, 11, 7, 5], 
            'best' : [6, 12, 10, 8], 
            'for' : [1, 2, 5]} 

print(f""The original dictionary is : {test_dict}"")

res = sorted({ele for val in test_dict.values() for ele in val})

print(f""The unique values list is : {res}"")",Code,Human
1603,"def returnSum(dict): 
    
    sum = 0
    for i in dict.values(): 
        sum = sum + i 
    
    return sum

dict = {'a': 100, 'b':200, 'c':300} 
print(""Sum :"", returnSum(dict))",Code,Human
1604,"test_dict = {""Arushi"" : 22, ""Anuradha"" : 21, ""Mani"" : 21, ""Haritha"" : 21} 

print (f""The dictionary before performing remove is : {test_dict}"") 

del test_dict['Mani'] 

print (f""The dictionary after remove is : {test_dict}"")",Code,Human
1605,"country_code = {'India' : '0091', 
                'Australia' : '0025', 
                'Nepal' : '00977'} 

print(country_code.get('India', 'Not Found')) 
print(country_code.get('Japan', 'Not Found'))",Code,Human
1606,"class Node: 

    def __init__(self, data): 
        self.data = data 
        self.next = None

class LinkedList: 

    def __init__(self): 
        self.head = None

    def reverse(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev 
        
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 

    def printList(self): 
        temp = self.head 
        while(temp): 
            print(temp.data)
            temp = temp.next


llist = LinkedList() 
llist.push(20) 
llist.push(4) 
llist.push(15) 
llist.push(85) 

print(""Given Linked List"")
llist.printList() 
llist.reverse() 
print(""\nReversed Linked List"")
llist.printList()",Code,Human
1607,"def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print(""Move disk 1 from source"",source,""to destination"",destination)
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print(""Move disk"",n,""from source"",source,""to destination"",destination)
    TowerOfHanoi(n-1, auxiliary, destination, source) 
          
n = 4
TowerOfHanoi(n,'A','B','C')",Code,Human
1608,"def calcAngle(hh, mm): 

    hour_angle = 0.5 * (hh * 60 + mm) 
    minute_angle = 6 * mm 

    angle = abs(hour_angle - minute_angle) 

    angle = min(360 - angle, angle) 

    return angle 

def printTime(theta): 

    for hh in range(0, 12): 
        for mm in range(0, 60): 
            if (calcAngle(hh, mm)==theta): 
                print(hh, "":"", mm, sep = """") 
                return
            
    print(""Input angle not valid."") 
    return

theta = 90.0
printTime(theta)",Code,Human
1609,"def find_time(h1): 

    theta = 30 * h1 
    print(""("", end = """") 
    print((theta * 2),""/ 11) minutes"") 

h1 = 3
find_time(h1)",Code,Human
1610,"def num_to_eng(n):
    if n == 0:
        return 'zero'

    unit = ('','one','two','three','four','five','six','seven','eight','nine')
    tens = ('','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety')
    teen = ('ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen')
    h, t, u = '', '', ''

    if n//100:
        h = unit[n//100] + ' hundred'
        n = n%100

    if n >= 20:
        t = tens[n//10]
        n = n%10
    elif n >= 10:
        t = teen[n-10]
        n = 0
    
    u = unit[n]
    
    return ' '.join(filter(None,[h,t,u]))

print(num_to_eng(115))",Code,Human
1611,"def reduce_frac(n, d):
    for i in range(min(n, d), 0, -1):
        if not n%i and not d%i:
            return '{}/{}'.format(n//i, d//i)

def mixed_number(frac):
    n, d = map(int, frac.lstrip('-').split('/'))
    sign = '-' if frac.startswith('-') else ''

    if not n%d:
        return sign + str(n//d)
    n, r = divmod(n, d)
    return sign + '{} {}'.format(n, reduce_frac(r, d)).lstrip('0 ')


print(mixed_number(""5/4""))",Code,Human
1612,"def pi(n):
  i = 1
  p = x = 3 * 10 ** (n + 10)
  while x:
    x = x * i // ((i + 1) * 4)
    i += 2
    p += x // i
  return '3.' + f""{p // 10 ** 10}""[1:]


print(pi(7))",Code,Human
1613,"def non_repeats(radix):
    count = 0
    for num_digits in range(1, radix + 1):
        product = radix - 1
        for i in range(1, num_digits):
            product *= (radix - i)
        count += product
    return count


print(non_repeats(6))",Code,Human
1614,"def determinant(A):
    if len(A) == 1:
        return A[0][0]
    elif len(A) == 2:
        return A[0][0]*A[1][1] - A[0][1]*A[1][0]
    else:
        s = 0
        for i in range(len(A)):
            B = [[A[row][col] for col in range(1,len(A))] for row in range(len(A)) if row!=i ]
            s += ((-1)**i)*A[i][0]*determinant(B)
        return s

print(determinant([[3, 0], [2, 2]]))",Code,Human
1615,"def newton_raphson(c, x=0):
    for _ in range(20):
        polynomial = c[0]*x**3 + c[1]*x**2 + c[2]*x + c[3]
        derivative = 3*c[0]*x**2 + 2*c[1]*x + c[2]
        x -= polynomial/derivative
    return round(x, 3)


print(newton_raphson([-0.1, 0.4, 0.1, -0.8]))",Code,Human
1616,"def findArea(a, b): 
    
    Area = 3.142 * a * b ; 

    print(""Area:"", round(Area, 2)); 

a = 5; 
b = 4; 

findArea(a, b)",Code,Human
1617,"def area(a, b): 
    
    if (a < 0 or b < 0): 
        return -1

    A = a * b 
    return A 

a = 5
b = 2
print(area(a, b))",Code,Human
1618,"pi = 22/7
def volume(r, h): 
    vol = pi * r * r * h 
    return vol 

r = 5
h = 8

print(""Volume Of Cylinder = "",volume(r, h))",Code,Human
1619,"def totalsurfacearea(r, h): 
    tsurf_ar = (2 * pi * r * h) + (2 * pi * r * r) 
    return tsurf_ar 

r = 5
h = 8

print(""Total Surface Area Of Cylinder = "",totalsurfacearea(r,h))",Code,Human
1620,"def curvedsurfacearea(r, h): 
    cursurf_ar = (2 * pi * r * h) 
    return cursurf_ar 

r = 5
h = 8

print(""Curved Surface Area Of Cylinder = "",curvedsurfacearea(r,h))",Code,Human
1621,"def findArea(a): 
  
    area = 5 * 3 ** 0.5 * a * a 
    return area 

a = 5
print(""Area: "" , findArea(a))",Code,Human
1622,"def findVolume(a): 
      
    volume = ((5 / 12) * 
              (3 + 5 ** 0.5) * 
               a * a * a) 
    return volume 

a = 5

print(""Volume: "" , findVolume(a))",Code,Human
1623,"def surfaceArea(a, b, h): 
    return 5 * a * b + 5 * b * h 

a = 5
b = 3
h = 7

print(""surface area ="", surfaceArea(a, b, h))",Code,Human
1624,"def volume(b, h): 
    return (5 * b * h) / 2

a = 5
b = 3
h = 7

print(""volume ="", volume(b, h))",Code,Human
1625,"def volumeRec(a, b, e, h) : 
    return (((b * h) / 6) * (2 * a + e))

a = 2; b = 5; e = 5; h = 6; 
print(""Volume = "",volumeRec(a, b, e, h))",Code,Human
1626,"r = 3
R = 7

pi = 3.14159
Volume = (float)(2 * pi * pi * R * r * r)
print(""Volume: "", Volume)",Code,Human
1627,"r = 3
R = 7

Surface = (float)(4 * pi * pi * R * r)
print(""Surface: "", Surface)",Code,Human
1628,"test_list = [ '[1, 4, 5]', '[4, 6, 8]' ] 

print (f""The original list is : {test_list}"") 

res = [i.strip(""[]"").split("", "") for i in test_list] 

print (f""The list after conversion is : {res}"")",Code,Human
1629,"test_str = ""(1, 3, 4), (5, 6, 4), (1, 3, 6)""

print(""The original string is : "" + test_str) 

res = [] 
temp = [] 
for token in test_str.split("", ""): 
    num = int(token.replace(""("", """").replace("")"", """")) 
    temp.append(num) 
    if "")"" in token: 
        res.append(tuple(temp)) 
        temp = [] 

print(f""List after conversion from string : {res}"")",Code,Human
1630,"test_list = [6, 8, 4, 9, 10, 2] 

print(f""The original list is : {test_list}"") 

res = tuple([ele] for ele in test_list)  

print(f""Tuple after conversion : {res}"")",Code,Human
1631,"string_input = '''GeeksforGeeks is a Computer Science portal for geeks. 
    It contains well written, well thought and well explained 
    computer science and programming articles, quizzes etc.'''

words = string_input.split() 

dictionary = {} 

for word in words: 

    if (word[0].lower() not in dictionary.keys()): 

        dictionary[word[0].lower()] = [] 
        dictionary[word[0].lower()].append(word) 

    else: 

        if (word not in dictionary[word[0].lower()]): 
            dictionary[word[0].lower()].append(word) 

print(dictionary)",Code,Human
1632,"Tv = {'BreakingBad':100, 'GameOfThrones':1292, 'TMKUC' : 88} 

Keymax = max(Tv, key=Tv.get) 
print(Keymax)",Code,Human
1633,"test_dict = {'gfg' : 1, 'is' : 2, 'best' : 3} 

print(f""The original dictionary is : {test_dict}"") 

test_key = 'is'

temp = list(test_dict)
try: 
    res = temp[temp.index(test_key) + 1] 
except (ValueError, IndexError): 
    res = None

print(f""The next key is : {res}"")",Code,Human
1634,"test_list1 = [1, 2, 4, 3, 5] 
test_list2 = [1, 2, 4, 3, 5] 

print (""The first list is : "" + str(test_list1)) 
print (""The second list is : "" + str(test_list2)) 

test_list1.sort() 
test_list2.sort() 

if test_list1 == test_list2: 
    print (""The lists are identical"") 
else : 
    print (""The lists are not identical"")",Code,Human
1635,"test_list = [(1, 4, 5), (7, 8), (2, 4, 10)] 

print(""The original list : "" + str(test_list)) 


res = [] 
for sub in test_list : 
    for ele in sub : 
        res.append(ele) 
res.sort() 
mid = len(res) // 2
res = (res[mid] + res[~mid]) / 2

print(""Median of Records is : "" + str(res))",Code,Human
1636,"def prod(val) : 
    res = 1
    for ele in val: 
        res *= ele 
    return res 

test_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)] 

print(""The original list : "" + str(test_list)) 
res = prod(int(j) for i in test_list for j in i) 

print(""The Cummulative product of list is : "" + str(res))",Code,Human
1637,"def days_between(d1, d2):
    from datetime import datetime as dt
    f_date = dt.strptime(d1, ""%d/%m/%Y"").date()
    l_date = dt.strptime(d2, ""%d/%m/%Y"").date()
    delta = l_date - f_date
    print(delta.days)",Code,Human
1638,"def near_thousand(n):
    return (abs(1000 - n) <= 100) or (abs(2000 - n) <= 100)


print(near_thousand(1000))
print(near_thousand(900))
print(near_thousand(800))
print(near_thousand(2200))",Code,Human
1639,"def sum_thrice(x, y, z):
    sum1 = x + y + z
    if x == y == z:
        sum1 = sum1 * 3
    return sum1


print(sum_thrice(1, 2, 3))
print(sum_thrice(3, 3, 3))",Code,Human
1640,"def larger_string(string1, n):
    result = """"
    for i in range(n):
        result = result + string1
    return result


print(larger_string('abc', 2))
print(larger_string('.py', 3))",Code,Human
1641,,Code,Human
1642,"def check_number(num):
    mod = num % 2
    if mod > 0:
        return ""This is an odd number.""
    else:
        return ""This is an even number.""


print(check_number(5))",Code,Human
1643,,Code,Human
1644,"def hashing(num):
    T = tuple([int(i) for i in num.split()])
    return hash(T)


print(hashing(23456))",Code,Human
1645,"def word_join(s):
    words = s.split(' ')
    return '-'.join(words)


print(word_join(""This is 17B Assignment""))",Code,Human
1646,"def gcd(x, y):
    gcd1 = 1

    if x % y == 0:
        return y

    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd1 = k
            break
    return gcd1


print(gcd(12, 17))
print(gcd(4, 6))",Code,Human
1647,"def area(a):
    from math import pi
    r = float(input(""Input the radius of the circle : ""))
    return ""The area of the circle with radius "" + str(r) + "" is: "" + str(pi * a ** 2)


print(area(5))",Code,Human
1648,"def custom(n):
    a = n
    n1 = int(""%s"" % a)
    n2 = int(""%s%s"" % (a, a))
    n3 = int(""%s%s%s"" % (a, a, a))
    return n1 + n2 + n3


print(custom(20))",Code,Human
1649,"def list_count_4(nums):
    count = 0
    for num in nums:
        if num == 4:
            count = count + 1

    return count


print(list_count_4([1, 4, 6, 7, 4]))
print(list_count_4([1, 4, 6, 4, 7, 4]))",Code,Human
1650,,Code,Human
1651,"def substring_copy(str, n):
    flen = 2
    if flen > len(str):
        flen = len(str)
    substr = str[:flen]

    result = """"
    for i in range(n):
        result = result + substr
    return result


print(substring_copy('abcdef', 2))
print(substring_copy('p', 3))",Code,Human
1652,"def is_vowel(char):
    all_vowels = 'aeiou'
    return char in all_vowels


print(is_vowel('c'))
print(is_vowel('e'))",Code,Human
1653,"def histogram(items):
    for n in items:
        output = ''
        times = n
        while times > 0:
            output += '*'
            times = times - 1
        print(output)


histogram([2, 3, 6, 5])",Code,Human
1654,,Code,Human
1655,"numbers = [
    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,
    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,
    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,
    958, 743, 527
]

for x in numbers:
    if x == 237:
        print(x)
        break;
    elif x % 2 == 0:
        print(x)",Code,Human
1656,"def add_numbers(a, b):
    if not (isinstance(a, int) and isinstance(b, int)):
        raise TypeError(""Inputs must be integers"")
    return a + b


print(add_numbers(10, 20))",Code,Human
1657,"def points(x1, x2):
    import math
    p1 = list(x1)
    p2 = list(x2)
    distance = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))
    print(distance)


points((2, 3), (4, 5))",Code,Human
1658,"def sumofdigits(num):
    x = num // 1000
    x1 = (num - x * 1000) // 100
    x2 = (num - x * 1000 - x1 * 100) // 10
    x3 = num - x * 1000 - x1 * 100 - x2 * 10
    print(""The sum of digits in the number is"", x + x1 + x2 + x3)


sumofdigits(3456)",Code,Human
1659,"def multiply(numbers):
    total = 1
    for x in numbers:
        total *= x
    return total


print(multiply((8, 2, 3, -1, 7)))",Code,Human
1660,"def string_reverse(str1):
    rstr1 = ''
    index = len(str1)
    while index > 0:
        rstr1 += str1[index - 1]
        index = index - 1
    return rstr1


print(string_reverse('1234abcd'))",Code,Human
1661,"def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


n = 45
print(factorial(n))",Code,Human
1662,"def string_test(s):
    d = {""UPPER_CASE"": 0, ""LOWER_CASE"": 0}
    for c in s:
        if c.isupper():
            d[""UPPER_CASE""] += 1
        elif c.islower():
            d[""LOWER_CASE""] += 1
        else:
            pass
    print(""Original String : "", s)
    print(""No. of Upper case characters : "", d[""UPPER_CASE""])
    print(""No. of Lower case Characters : "", d[""LOWER_CASE""])


string_test('The quick Brown Fox')",Code,Human
1663,"def unique_list(l):
    x1 = []
    for a in l:
        if a not in x1:
            x1.append(a)
    return x1


print(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))",Code,Human
1664,"def isPalindrome(string):
    left_pos = 0
    right_pos = len(string) - 1

    while right_pos >= left_pos:
        if not string[left_pos] == string[right_pos]:
            return False
        left_pos += 1
        right_pos -= 1
    return True


print(isPalindrome('aza'))",Code,Human
1665,"def make_bold(fn):
    def wrapped():
        return ""<b>"" + fn() + ""</b>""

    return wrapped


def make_italic(fn):
    def wrapped():
        return ""<i>"" + fn() + ""</i>""

    return wrapped


def make_underline(fn):
    def wrapped():
        return ""<u>"" + fn() + ""</u>""

    return wrapped


@make_bold
@make_italic
@make_underline
def hello():
    return ""hello world""


print(hello())",Code,Human
1666,"mycode = 'print(""hello world"")'
code = """"""
def multiply(x,y):
    return x*y

print('Multiply of 2 and 3 is: ',multiply(2,3))
""""""
exec(mycode)
exec(code)",Code,Human
1667,"def test(a):
    def add(b):
        nonlocal a
        a += 1
        return a + b

    return add


func = test(4)
print(func(4))",Code,Human
1668,"def abc():
    x = 1
    y = 2
    str1 = ""w3resource""
    print(""Python Exercises"")


print(abc.__code__.co_nlocals)",Code,Human
1669,"def add_list(num1, num2, num3):
    result = map(lambda x, y, z: x + y + z, num1, num2, num3)
    print(""\nNew list after adding above three lists:"")
    print(list(result))


nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
nums3 = [7, 8, 9]

add_list(nums1, nums2, nums3)",Code,Human
1670,,Code,Human
1671,"bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def power_base(num1, index1):
    print(""Base numbers abd index: "")
    print(bases_num)
    print(index)
    result = list(map(pow, num1, index1))
    print(""\nPower of said number in bases raised to the corresponding number in the index:"")
    print(result)


power_base(bases_num, index)",Code,Human
1672,"def odd_product(nums):
    for i in range(len(nums)):
        for j in range(len(nums)):
            if i != j:
                product = nums[i] * nums[j]
                if product & 1:
                    return True
                    return False


dt1 = [2, 4, 6, 8]
dt2 = [1, 6, 4, 7, 8]
print(dt1, odd_product(dt1))
print(dt2, odd_product(dt2))",Code,Human
1673,,Code,Human
1674,"def sum_of_cubes(n):
    n -= 1
    total = 0
    while n > 0:
        total += n * n * n
        n -= 1
    return total


print(""Sum of cubes: "", sum_of_cubes(3))",Code,Human
1675,"def multiple(m, n):
    return True if m % n == 0 else False


print(multiple(20, 5))
print(multiple(7, 2))",Code,Human
1676,"def check_date(m, d, y):
    import datetime
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False


print(check_date(11, 11, 2002))
print(check_date('11', '11', '2002'))
print(check_date(13, 11, 2002))",Code,Human
1677,"def permute(nums):
    result_perms = [[]]
    for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
    return result_perms


my_nums = [1, 2, 3]
print(""Original Collection: "", my_nums)
print(""Collection of distinct numbers:\n"", permute(my_nums))",Code,Human
1678,"def pythagoras(opposite_side, adjacent_side, hypotenuse):
    if opposite_side == str(""x""):
        return ""Opposite = "" + str(((hypotenuse ** 2) - (adjacent_side ** 2)) ** 0.5)
    elif adjacent_side == str(""x""):
        return ""Adjacent = "" + str(((hypotenuse ** 2) - (opposite_side ** 2)) ** 0.5)
    elif hypotenuse == str(""x""):
        return ""Hypotenuse = "" + str(((opposite_side ** 2) + (adjacent_side ** 2)) ** 0.5)
    else:
        return ""You know the answer!""


print(pythagoras(3, 4, 'x'))
print(pythagoras(3, 'x', 5))
print(pythagoras('x', 4, 5))
print(pythagoras(3, 4, 5))",Code,Human
1679,"def absent_digits(n):
    all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    n = set([int(i) for i in n])
    n = n.symmetric_difference(all_nums)
    n = sorted(n)
    return n


print(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))",Code,Human
1680,"def random_number(a, b):
    import random
    return random.randint(a, b)",Code,Human
1681,"def fibonacci(n):
    n1, n2 = 0, 1
    count = 0
    
    if n <= 0:
        print('Please enter a positive integer')
    elif n == 1:
        print(""Fibonacci sequence:"")
        print(n1)
    else:
        print(""Fibonacci sequence:"")
        while count < n:
            print(n1)
            nth = n1 + n2",Code,Human
1682,"n1, n2 = n2, nth
            count += 1",Code,Human
1683,"def fibonacci_nth(n):
    a = 0
    b = 1
    
    if n <= 0: 
        print(""Incorrect input"")
    elif n==1: 
        return a
    elif n==1: 
        return 1
    else: 
        for i in range(2, n):
            c = a + b
            a, b = b, c
        return b",Code,Human
1684,"def count_digits(n):
    return len(str(n))",Code,Human
1685,"def nth_prime_number(n):
    prime_list = [2]
    num = 3
    while len(prime_list) < n:
        for p in prime_list:
            if num % p == 0:
                break
        else:
            prime_list.append(num)
            num += 2
    return prime_list[-1]

#1. write a python program to add two numbers 
num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')

#2. write a python program to subtract two numbers 
num1 = 1.5
num2 = 6.3
sum = num1 - num2
print(f'Sub: {sum}')

#3. write a python Program to calculate the square root
num = 8 
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))



#4. write a python function to add two user provided numbers and return the sum
def add_two_numbers(num1, num2):
    sum = num1 + num2
    return sum


#5. write a program to find and print the largest among three numbers

num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3
print(f'largest:{largest}')


#6. Write a python program to swap two variables, Using a temporary variable

x = 5
y = 10


temp = x
x = y
y = temp

print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))

#7. Write a python program to swap two variables, Without Using Temporary Variable

x = 5
y = 10

x, y = y, x
print(""x ="", x)
print(""y ="", y)

#8. Python Program to Convert Kilometers to Miles
kilometers = 5.0
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))

#9. Python Program to Convert Celsius To Fahrenheit
celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))


#10. Python Program to Check if a Number is Positive, Negative or 0
num = float(input(""Enter a number: ""))
if num > 0:
   print(""Positive number"")
elif num == 0:
   print(""Zero"")
else:
   print(""Negative number"")

 #11. Python Program to Check if a Number is Odd or Even
 num = int(input(""Enter a number: ""))
if (num % 2) == 0:
   print(""{0} is Even"".format(num))
else:
   print(""{0} is Odd"".format(num))


#12. Python Program to Check Leap Year
year = 2000

if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(""{0} is a leap year"".format(year))
       else:
           print(""{0} is not a leap year"".format(year))
   else:
       print(""{0} is a leap year"".format(year))
else:
   print(""{0} is not a leap year"".format(year))


#13. Python Program to Find the Largest Among Three Numbers

num1 = 10
num2 = 14
num3 = 12

if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3

print(""The largest number is"", largest)

#14.Write a Python Program to check if a number is prime or not

num = 407


if num > 1:",Code,Human
1686,"for i in range(2,num):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           print(i,""times"",num//i,""is"",num)
           break
   else:
       print(num,""is a prime number"")
       
else:
   print(num,""is not a prime number"")

#15.Python program to display all the prime numbers within an interval

lower = 900
upper = 1000

print(""Prime numbers between"", lower, ""and"", upper, ""are:"")

for num in range(lower, upper + 1):",Code,Human
1687,"if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)

#16. Python program to find the factorial of a number.
num = 7
factorial = 1

if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(""The factorial of"",num,""is"",factorial)


#17. Python Program to Display the multiplication Table
num = 12

for i in range(1, 11):
   print(num, 'x', i, '=', num*i)


#18. Python Program to Print the Fibonacci sequence

nterms = int(input(""How many terms? ""))",Code,Human
1688,"n1, n2 = 0, 1
count = 0",Code,Human
1689,"if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   print(""Fibonacci sequence:"")
   while count < nterms:
       print(n1)
       nth = n1 + n2",Code,Human
1690,"n1 = n2
       n2 = nth
       count += 1
#19. Python Program to Check Armstrong Number (for 3 digits)

num = int(input(""Enter a number: ""))",Code,Human
1691,sum = 0,Code,Human
1692,"temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** 3
   temp //= 10",Code,Human
1693,"if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")

#20. Python Program to Check Armstrong Number (for 3 digits)
num = 1634",Code,Human
1694,,Code,Human
1695,order = len(str(num)),Code,Human
1696,sum = 0,Code,Human
1697,"temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10",Code,Human
1698,"if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")


#21. Python Program to Find Armstrong Number in an Interval
lower = 100
upper = 2000

for num in range(lower, upper + 1):",Code,Human
1699,order = len(str(num)),Code,Human
1700,"sum = 0

   temp = num
   while temp > 0:
       digit = temp % 10
       sum += digit ** order
       temp //= 10

   if num == sum:
       print(num)
#22.  Python Program to Find the Sum of Natural Numbers
num = 16

if num < 0:
   print(""Enter a positive number"")
else:
   sum = 0",Code,Human
1701,"while(num > 0):
       sum += num
       num -= 1
   print(""The sum is"", sum)

#23. Python Program To Display Powers of 2 Using Anonymous Function",Code,Human
1702,terms = 10,Code,Human
1703,,Code,Human
1704,,Code,Human
1705,"result = list(map(lambda x: 2 ** x, range(terms)))

print(""The total terms are:"",terms)
for i in range(terms):
   print(""2 raised to power"",i,""is"",result[i])

#24. Python Program to Find Numbers Divisible by Another Number",Code,Human
1706,"my_list = [12, 65, 54, 39, 102, 339, 221,]",Code,Human
1707,"result = list(filter(lambda x: (x % 13 == 0), my_list))",Code,Human
1708,"print(""Numbers divisible by 13 are"",result)


#25. Python Program to Convert Decimal to Binary
dec = 344

print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")


#26. Python Program to Convert Decimal to Octal 
dec = 344

print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")


#27. Python Program to Convert Decimal to Hexadecimal
dec = 344
print(""The decimal value of"", dec, ""is:"")
print(hex(dec), ""in hexadecimal."")


#28. Python Program to Find ASCII Value of Character
c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))

#29. Python Program to Find HCF or GCD

def compute_hcf(x, y):",Code,Human
1709,"if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

num1 = 54 
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))


#30. Write a python function to find HCf or GCD and return the value
def compute_hcf(x, y):",Code,Human
1710,"if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm
def compute_hcf(x, y):
   while(y):
       x, y = y, x % y
   return x

#32. Write a python program to find HCf or GCD using euclidian Algorithm
def compute_hcf(x, y):
   while(y):
       x, y = y, x % y
   return x

#33. Python Program to Find LCM
def compute_lcm(x, y):",Code,Human
1711,"if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))

#34. write a Python function to Find LCM and returb the value
def compute_lcm(x, y):",Code,Human
1712,"if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

#35. Python Program to Compute LCM Using GCD",Code,Human
1713,"def compute_gcd(x, y):

   while(y):
       x, y = y, x % y
   return x",Code,Human
1714,"def compute_lcm(x, y):
   lcm = (x*y)//compute_gcd(x,y)
   return lcm

num1 = 54
num2 = 24 

print(""The L.C.M. is"", compute_lcm(num1, num2))

#36. Python funcction to Find the Factors of a Number
def print_factors(x):
   print(""The factors of"",x,""are:"")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)

#37. Python Program to Make a Simple Calculator",Code,Human
1715,"def add(x, y):
    return x + y",Code,Human
1716,"def subtract(x, y):
    return x - y",Code,Human
1717,"def multiply(x, y):
    return x * y",Code,Human
1718,"def divide(x, y):
    return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

while True:",Code,Human
1719,"choice = input(""Enter choice(1/2/3/4): "")",Code,Human
1720,"if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
    else:
        print(""Invalid Input"")

#37. Python Program to Display Fibonacci Sequence Using Recursion
def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))

nterms = 10",Code,Human
1721,"if nterms <= 0:
   print(""Plese enter a positive integer"")
else:
   print(""Fibonacci sequence:"")
   for i in range(nterms):
       print(recur_fibo(i))


#38. Python Program to Find Sum of Natural Numbers Using Recursion
def recur_sum(n):
   if n <= 1:
       return n
   else:
       return n + recur_sum(n-1)",Code,Human
1722,"num = 16

if num < 0:
   print(""Enter a positive number"")
else:
   print(""The sum is"",recur_sum(num))


#39. Python Program to Find Factorial of Number Using Recursion
def recur_factorial(n):
   if n == 1:
       return n
   else:
       return n*recur_factorial(n-1)

num = 7",Code,Human
1723,"if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   print(""The factorial of"", num, ""is"", recur_factorial(num))

#40. Python Program to Add Two Matrices
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[0,0,0],
         [0,0,0],
         [0,0,0]]",Code,Human
1724,for i in range(len(X)):,Code,Human
1725,"for j in range(len(X[0])):
       result[i][j] = X[i][j] + Y[i][j]

for r in result:
   print(r)

#41. Python Program to Add Two Matrices using Nested List Comprehension
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]

for r in result:
   print(r)


#42. Python Program to Transpose a Matrix using Nested Loop

X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]",Code,Human
1726,for i in range(len(X)):,Code,Human
1727,"for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)


#43. Python Program to Transpose a Matrix using Nested List Comprehension

X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]

for r in result:
   print(r)


#44. Python Program to Multiply Two Matrices using Nested Loop

X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
1728,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
1729,"result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]",Code,Human
1730,for i in range(len(X)):,Code,Human
1731,for j in range(len(Y[0])):,Code,Human
1732,"for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)




#44. Python Program to Multiply Two Matrices using Nested List Comprehension
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
1733,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
1734,"result = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]

for r in result:
   print(r)


#45. Python Program to Check Whether a String is Palindrome or Not

my_str = 'aIbohPhoBiA'",Code,Human
1735,my_str = my_str.casefold(),Code,Human
1736,rev_str = reversed(my_str),Code,Human
1737,"if list(my_str) == list(rev_str):
   print(""The string is a palindrome."")
else:
   print(""The string is not a palindrome."")


#46. Python Program to Remove Punctuations From a String

punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''

my_str = ""Hello!!!, he said ---and went.""",Code,Human
1738,,Code,Human
1739,,Code,Human
1740,"no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char",Code,Human
1741,"print(no_punct)


#47. Python Program to Sort Words in Alphabetic Order

my_str = ""Hello this Is an Example With cased letters""",Code,Human
1742,"#my_str = input(""Enter a string: "")",Code,Human
1743,words = [word.lower() for word in my_str.split()],Code,Human
1744,words.sort(),Code,Human
1745,"print(""The sorted words are:"")
for word in words:
   print(word)

#48. Python Program to Illustrate Different Set Operations",Code,Human
1746,"E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};",Code,Human
1747,"print(""Union of E and N is"",E | N)",Code,Human
1748,"print(""Intersection of E and N is"",E & N)",Code,Human
1749,"print(""Difference of E and N is"",E - N)",Code,Human
1750,"print(""Symmetric difference of E and N is"",E ^ N)",Code,Human
1751,"vowels = 'aeiou'

ip_str = 'Hello, have you tried our tutorial section yet?'",Code,Human
1752,ip_str = ip_str.casefold(),Code,Human
1753,"count = {}.fromkeys(vowels,0)",Code,Human
1754,"for char in ip_str:
   if char in count:
       count[char] += 1

print(count)



#50. Python Program to Count the Number of Each Vowel Using a list and a dictionary comprehension

ip_str = 'Hello, have you tried our tutorial section yet?'",Code,Human
1755,ip_str = ip_str.casefold(),Code,Human
1756,"count = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}

print(count)",Code,Human
1757,"def get_slope(x1,y1, x2,y2):
    if (x1 == x2 ):
        return ValueError
    return -((y2-y1)/(x2-x1))",Code,Human
1758,"def rotate(origin, point, angle):
    ox, oy = origin
    px, py = point

    radian_angle = math.radians(angle)
    qx = ox + math.cos(radian_angle) * (px - ox) - math.sin(radian_angle) * (py - oy)
    qy = oy + math.sin(radian_angle) * (px - ox) + math.cos(radian_angle) * (py - oy)
    return qx, qy",Code,Human
1759,"def copysign(dst, src) :
    return math.copysign(dst, src)",Code,Human
1760,"def split_filename(input_file_name):
    if( isinstance(input_file_name,str) ==False ):
        raise TypeError
    tokens = input_file_name.split(""/"")
    return ""/"".join(tokens[:-1]),tokens[-1]",Code,Human
1761,"def join_filename(base_dir, *args):
    file_path_args = [base_dir ,*args]
    for file_name in file_path_args:
        if( isinstance(file_name,str) ==False ):
            raise TypeError
    return ""/"".join(file_path_args)",Code,Human
1762,"def linear_interpolate(x, y, t ):
    if( t >=1 or t <= 0):
        raise ValueError
    return t*x + (1-t)*y",Code,Human
1763,"def bilinear_interpolation(x, y, points):
    points = sorted(points)",Code,Human
1764,"(x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points

    if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:
        raise ValueError('points do not form a rectangle')
    if not x1 <= x <= x2 or not y1 <= y <= y2:
        raise ValueError('(x, y) not within the rectangle')

    return (q11 * (x2 - x) * (y2 - y) +
            q21 * (x - x1) * (y2 - y) +
            q12 * (x2 - x) * (y - y1) +
            q22 * (x - x1) * (y - y1)
           ) / ((x2 - x1) * (y2 - y1) + 0.0)",Code,Human
1765,"def check_string(new_str):
    return isinstance(new_str,str)

#",Code,Human
1766,"def extract_alpha(my_string):
    return """".join([ c for c in my_string if c.isalpha()])",Code,Human
1767,"def extract_alpha(my_string):
    return """".join([ c for c in my_string if (c.isalpha() or c.isspace())])",Code,Human
1768,"import re
def extract_not_alpha(my_string):
    #result = re.findall(r'[^a-zA-Z]+',my_string)
    return re.sub('[^a-zA-Z\s]+', """", my_string)
    #return """".join(result)",Code,Human
1769,"import re
def extract_unicode(my_string):
    regex = re.compile(r'[^\W\d_]+', re.UNICODE)    
    return regex.findall(my_string)",Code,Human
1770,"import re
def extract_mailid(my_string, outfile):
    regex = re.compile(r'[\w]+@[\w]+\.[\w]+', re.UNICODE)    
    mailids = regex.findall(my_string)
    if(len(mailids) > 0):
        with open(outfile, 'w') as mailfile:
            for mailid in mailids:
                mailfile.write(mailid+""\n"")
        mailfile.close()",Code,Human
1771,"import random
def rand_run_name(n):
    ran = random.randrange(10**80)
    myhex = ""%064x"" % ran
    #limit string to 64 characters
    myhex = myhex[:n]
    return myhex",Code,Human
1772,"import argparse
def create_parser(prog_name, prog_description, arg_name):
    parser = argparse.ArgumentParser(prog = prog_name, description = prog_description)
    parser.add_argument(arg_name, nargs='+')
    #args = parser.parse_args()
    return parser",Code,Human
1773,"import os
def check_dir_files(src_dir_path):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return False
    files_in_dir = glob.glob(src_dir_path+""/*.*"")
    if (len(files_in_dir) <= 0):
        print(""No files present in:"",src_dir_path)
        return False
    print(""The directory "", src_dir_path, "" has "",len(files_in_dir), "" files."")
    return True",Code,Human
1774,"import datetime
def get_attributes_from_date(date_string,*args):
    if(isinstance(date_string, datetime.datetime) == False):
        print(""Input string is not a valid datetime type"")
        raise TypeError
    get_attrs = [ i for i in dir(date_string) if not callable(i) ]
    arg_list = []
    for attr in args:
        if(attr not in get_attrs):
            print(""Invalid argument passed"",attr)
            raise AttributeError
        print(attr, ':', getattr(date_string, attr))
        arg_list.append((attr,getattr(date_string, attr)))
    return arg_list",Code,Human
1775,"import glob
import os
def find_move_files(src_dir_path, dst_dir_path, file_pattern):
    if(os.path.exists(dst_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    all_png_files = glob.glob(src_dir_path+""/*""+file_pattern)
    if (len(all_png_files) > 0):
        for file_name in all_png_files:
            base_file_name=os.path.basename(file_name)
            os.replace(file_name, os.path.join(dst_dir_path, base_file_name))
        return 
    else:
        print(""No files with matching pattern found"")
        return",Code,Human
1776,"import glob
import os
import random
def retrieve_random_file(src_dir_path, file_pattern, count):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    
    files_in_dir = glob.glob(src_dir_path+""/*""+file_pattern)
    if (count > len(files_in_dir)):
        print(""Requested count more than file count in:"",src_dir_path,"" for pattern:"",file_pattern)
        return
    return random.sample(files_in_dir, count)",Code,Human
1777,"import glob
import os
import time
def retrieve_files_bydate(src_dir_path,*args):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    files_in_dir = glob.glob(src_dir_path+""/*.*"")
    if (len(files_in_dir) <= 0):
        print(""No files present in:"",src_dir_path)
        return
    file_date_list = [ (filename, time.ctime(os.path.getmtime(filename)))for filename in files_in_dir]
    return file_date_list",Code,Human
1778,"import glob
import os
import datetime
def retrieve_files_sort_bydate(src_dir_path):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    files_in_dir = glob.glob(src_dir_path+""/*.*"")
    if (len(files_in_dir) <= 0):
        print(""No files present in:"",src_dir_path)
        return
    files_in_dir.sort(key=os.path.getmtime)    
    return files_in_dir",Code,Human
1779,"import glob
import os
import random
import datetime
def retrieve_last_files(src_dir_path, last_modified_hour):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    if( last_modified_hour <0 or last_modified_hour>24):
        print(""Invalid delta requested"")
        raise ValueError
    
    files_in_dir = glob.glob(src_dir_path+""/*.*"")
    if (len(files_in_dir) <= 0):
        print(""No files present in:"",src_dir_path)
        return
    return [ filename for filename in files_in_dir if (datetime.datetime.fromtimestamp(os.path.getmtime(filename)) < datetime.datetime.now() + datetime.timedelta(hours=last_modified_hour)) ]",Code,Human
1780,"import os
def get_filesize_for_dir(src_dir_path):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    files_in_dir = glob.glob(src_dir_path+""/*.*"")
    if (len(files_in_dir) <= 0):
        print(""No files present in:"",src_dir_path)
        return
    total_size = 0
    for filename in files_in_dir:
        #(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)
        total_size += os.stat(filename)[6]
    return total_size",Code,Human
1781,"import csv
def read_csv_length(csv_file_name, delimiter_pattern):
    if(os.path.exists(csv_file_name) == False):
        print(""Destination File doesn't exist"")
        return
    with open(csv_file_name, newline='') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=delimiter_pattern)
        csv_list = list(csv_reader)
        return len(csv_list), len(csv_list[0])",Code,Human
1782,"import itertools
def extract_characters(input_list):
    return [ char_val for char_val in itertools.chain.from_iterable(input_list) ]",Code,Human
1783,"import itertools
def get_random_combination(input_list, combination_length):
    if(len(input_list) < combination_length):
        print(""Requested combination length less than length of list"")
        return
    combination_list = list(itertools.combinations(input_list, combination_length))
    return random.sample(combination_list, 1)",Code,Human
1784,"import itertools
def loan_schedule(principal, interest_rate, annual_payment, tenure):
    if(tenure <= 0):
        print(""Invalid tenure"",tenure)
        raise ValueError
    if(interest_rate > 1 or interest_rate < 0):
        print(""Invalid interest rate"",interest_rate,"" Expected between 0 and 1"")
        raise ValueError
    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]
    effective_interest_rate = 1+interest_rate
    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]",Code,Human
1785,"import itertools
def loan_schedule(principal, interest_rate, annual_payment, tenure):
    if(tenure <= 0):
        print(""Invalid tenure"",tenure)
        raise ValueError
    if(interest_rate > 1 or interest_rate < 0):
        print(""Invalid interest rate"",interest_rate,"" Expected between 0 and 1"")
        raise ValueError
    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]
    effective_interest_rate = 1+interest_rate
    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]",Code,Human
1786,"import logging
def create_logging_level(user_func, user_filename, user_loglevel):
    logger = logging.getLogger('simple_example')
    logger.setLevel(user_loglevel)
    ch = logging.FileHandler(user_filename)
    ch.setLevel(user_loglevel)
    logger.addHandler(ch)

    if callable(user_func):
        user_func(logger)",Code,Human
1787,"def exception_simulator(logger):
    try:
        raise ValueError
    except ValueError:
        logger.exception(""ValueError occured in the function"")",Code,Human
1788,"def default_exception_simulator(user_func):
    try:
        if callable(user_func):
            user_func()
    except:
        print(""An exception occured"")
        raise

#1. write a python program to add two numbers 
num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')

#2. write a python program to subtract two numbers 
num1 = 1.5
num2 = 6.3
sum = num1 - num2
print(f'Sub: {sum}')

#3. write a python Program to calculate the square root
num = 8 
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))



#4. write a python function to add two user provided numbers and return the sum
def add_two_numbers(num1, num2):
    sum = num1 + num2
    return sum


#5. write a program to find and print the largest among three numbers

num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3
print(f'largest:{largest}')


#6. Write a python program to swap two variables, Using a temporary variable

x = 5
y = 10


temp = x
x = y
y = temp

print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))

#7. Write a python program to swap two variables, Without Using Temporary Variable

x = 5
y = 10

x, y = y, x
print(""x ="", x)
print(""y ="", y)

#8. Python Program to Convert Kilometers to Miles
kilometers = 5.0
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))

#9. Python Program to Convert Celsius To Fahrenheit
celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))


#10. Python Program to Check if a Number is Positive, Negative or 0
num = float(input(""Enter a number: ""))
if num > 0:
   print(""Positive number"")
elif num == 0:
   print(""Zero"")
else:
   print(""Negative number"")

 #11. Python Program to Check if a Number is Odd or Even
 num = int(input(""Enter a number: ""))
if (num % 2) == 0:
   print(""{0} is Even"".format(num))
else:
   print(""{0} is Odd"".format(num))


#12. Python Program to Check Leap Year
year = 2000

if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(""{0} is a leap year"".format(year))
       else:
           print(""{0} is not a leap year"".format(year))
   else:
       print(""{0} is a leap year"".format(year))
else:
   print(""{0} is not a leap year"".format(year))


#13. Python Program to Find the Largest Among Three Numbers

num1 = 10
num2 = 14
num3 = 12

if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3

print(""The largest number is"", largest)

#14.Write a Python Program to check if a number is prime or not

num = 407


if num > 1:",Code,Human
1789,"for i in range(2,num):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           print(i,""times"",num//i,""is"",num)
           break
   else:
       print(num,""is a prime number"")
       
else:
   print(num,""is not a prime number"")

#15.Python program to display all the prime numbers within an interval

lower = 900
upper = 1000

print(""Prime numbers between"", lower, ""and"", upper, ""are:"")

for num in range(lower, upper + 1):",Code,Human
1790,"if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)

#16. Python program to find the factorial of a number.
num = 7
factorial = 1

if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(""The factorial of"",num,""is"",factorial)


#17. Python Program to Display the multiplication Table
num = 12

for i in range(1, 11):
   print(num, 'x', i, '=', num*i)


#18. Python Program to Print the Fibonacci sequence

nterms = int(input(""How many terms? ""))",Code,Human
1791,"n1, n2 = 0, 1
count = 0",Code,Human
1792,"if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   print(""Fibonacci sequence:"")
   while count < nterms:
       print(n1)
       nth = n1 + n2",Code,Human
1793,"n1 = n2
       n2 = nth
       count += 1
#19. Python Program to Check Armstrong Number (for 3 digits)

num = int(input(""Enter a number: ""))",Code,Human
1794,sum = 0,Code,Human
1795,"temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** 3
   temp //= 10",Code,Human
1796,"if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")

#20. Python Program to Check Armstrong Number (for 3 digits)
num = 1634",Code,Human
1797,,Code,Human
1798,order = len(str(num)),Code,Human
1799,sum = 0,Code,Human
1800,"temp = num
while temp > 0:
   digit = temp % 10
   sum += digit ** order
   temp //= 10",Code,Human
1801,"if num == sum:
   print(num,""is an Armstrong number"")
else:
   print(num,""is not an Armstrong number"")


#21. Python Program to Find Armstrong Number in an Interval
lower = 100
upper = 2000

for num in range(lower, upper + 1):",Code,Human
1802,order = len(str(num)),Code,Human
1803,"sum = 0

   temp = num
   while temp > 0:
       digit = temp % 10
       sum += digit ** order
       temp //= 10

   if num == sum:
       print(num)
#22.  Python Program to Find the Sum of Natural Numbers
num = 16

if num < 0:
   print(""Enter a positive number"")
else:
   sum = 0",Code,Human
1804,"while(num > 0):
       sum += num
       num -= 1
   print(""The sum is"", sum)

#23. Python Program To Display Powers of 2 Using Anonymous Function",Code,Human
1805,terms = 10,Code,Human
1806,,Code,Human
1807,,Code,Human
1808,"result = list(map(lambda x: 2 ** x, range(terms)))

print(""The total terms are:"",terms)
for i in range(terms):
   print(""2 raised to power"",i,""is"",result[i])

#24. Python Program to Find Numbers Divisible by Another Number",Code,Human
1809,"my_list = [12, 65, 54, 39, 102, 339, 221,]",Code,Human
1810,"result = list(filter(lambda x: (x % 13 == 0), my_list))",Code,Human
1811,"print(""Numbers divisible by 13 are"",result)


#25. Python Program to Convert Decimal to Binary
dec = 344

print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")


#26. Python Program to Convert Decimal to Octal 
dec = 344

print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")


#27. Python Program to Convert Decimal to Hexadecimal
dec = 344
print(""The decimal value of"", dec, ""is:"")
print(hex(dec), ""in hexadecimal."")


#28. Python Program to Find ASCII Value of Character
c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))

#29. Python Program to Find HCF or GCD

def compute_hcf(x, y):",Code,Human
1812,"if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

num1 = 54 
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))


#30. Write a python function to find HCf or GCD and return the value
def compute_hcf(x, y):",Code,Human
1813,"if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

#31. Write a python function to find HCf or GCD and return the value using euclidian Algorithm
def compute_hcf(x, y):
   while(y):
       x, y = y, x % y
   return x

#32. Write a python program to find HCf or GCD using euclidian Algorithm
def compute_hcf(x, y):
   while(y):
       x, y = y, x % y
   return x

#33. Python Program to Find LCM
def compute_lcm(x, y):",Code,Human
1814,"if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))

#34. write a Python function to Find LCM and returb the value
def compute_lcm(x, y):",Code,Human
1815,"if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

#35. Python Program to Compute LCM Using GCD",Code,Human
1816,"def compute_gcd(x, y):

   while(y):
       x, y = y, x % y
   return x",Code,Human
1817,"def compute_lcm(x, y):
   lcm = (x*y)//compute_gcd(x,y)
   return lcm

num1 = 54
num2 = 24 

print(""The L.C.M. is"", compute_lcm(num1, num2))

#36. Python funcction to Find the Factors of a Number
def print_factors(x):
   print(""The factors of"",x,""are:"")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)

#37. Python Program to Make a Simple Calculator",Code,Human
1818,"def add(x, y):
    return x + y",Code,Human
1819,"def subtract(x, y):
    return x - y",Code,Human
1820,"def multiply(x, y):
    return x * y",Code,Human
1821,"def divide(x, y):
    return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

while True:",Code,Human
1822,"choice = input(""Enter choice(1/2/3/4): "")",Code,Human
1823,"if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
    else:
        print(""Invalid Input"")

#37. Python Program to Display Fibonacci Sequence Using Recursion
def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))

nterms = 10",Code,Human
1824,"if nterms <= 0:
   print(""Plese enter a positive integer"")
else:
   print(""Fibonacci sequence:"")
   for i in range(nterms):
       print(recur_fibo(i))


#38. Python Program to Find Sum of Natural Numbers Using Recursion
def recur_sum(n):
   if n <= 1:
       return n
   else:
       return n + recur_sum(n-1)",Code,Human
1825,"num = 16

if num < 0:
   print(""Enter a positive number"")
else:
   print(""The sum is"",recur_sum(num))


#39. Python Program to Find Factorial of Number Using Recursion
def recur_factorial(n):
   if n == 1:
       return n
   else:
       return n*recur_factorial(n-1)

num = 7",Code,Human
1826,"if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   print(""The factorial of"", num, ""is"", recur_factorial(num))

#40. Python Program to Add Two Matrices
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[0,0,0],
         [0,0,0],
         [0,0,0]]",Code,Human
1827,for i in range(len(X)):,Code,Human
1828,"for j in range(len(X[0])):
       result[i][j] = X[i][j] + Y[i][j]

for r in result:
   print(r)

#41. Python Program to Add Two Matrices using Nested List Comprehension
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]

for r in result:
   print(r)


#42. Python Program to Transpose a Matrix using Nested Loop

X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]",Code,Human
1829,for i in range(len(X)):,Code,Human
1830,"for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)


#43. Python Program to Transpose a Matrix using Nested List Comprehension

X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]

for r in result:
   print(r)


#44. Python Program to Multiply Two Matrices using Nested Loop

X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
1831,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
1832,"result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]",Code,Human
1833,for i in range(len(X)):,Code,Human
1834,for j in range(len(Y[0])):,Code,Human
1835,"for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)




#44. Python Program to Multiply Two Matrices using Nested List Comprehension
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
1836,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
1837,"result = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]

for r in result:
   print(r)


#45. Python Program to Check Whether a String is Palindrome or Not

my_str = 'aIbohPhoBiA'",Code,Human
1838,my_str = my_str.casefold(),Code,Human
1839,rev_str = reversed(my_str),Code,Human
1840,"if list(my_str) == list(rev_str):
   print(""The string is a palindrome."")
else:
   print(""The string is not a palindrome."")


#46. Python Program to Remove Punctuations From a String

punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''

my_str = ""Hello!!!, he said ---and went.""",Code,Human
1841,,Code,Human
1842,,Code,Human
1843,"no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char",Code,Human
1844,"print(no_punct)


#47. Python Program to Sort Words in Alphabetic Order

my_str = ""Hello this Is an Example With cased letters""",Code,Human
1845,"#my_str = input(""Enter a string: "")",Code,Human
1846,words = [word.lower() for word in my_str.split()],Code,Human
1847,words.sort(),Code,Human
1848,"print(""The sorted words are:"")
for word in words:
   print(word)

#48. Python Program to Illustrate Different Set Operations",Code,Human
1849,"E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};",Code,Human
1850,"print(""Union of E and N is"",E | N)",Code,Human
1851,"print(""Intersection of E and N is"",E & N)",Code,Human
1852,"print(""Difference of E and N is"",E - N)",Code,Human
1853,"print(""Symmetric difference of E and N is"",E ^ N)",Code,Human
1854,"vowels = 'aeiou'

ip_str = 'Hello, have you tried our tutorial section yet?'",Code,Human
1855,ip_str = ip_str.casefold(),Code,Human
1856,"count = {}.fromkeys(vowels,0)",Code,Human
1857,"for char in ip_str:
   if char in count:
       count[char] += 1

print(count)



#50. Python Program to Count the Number of Each Vowel Using a list and a dictionary comprehension

ip_str = 'Hello, have you tried our tutorial section yet?'",Code,Human
1858,ip_str = ip_str.casefold(),Code,Human
1859,"count = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}

print(count)",Code,Human
1860,"""""""PythonGeneration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10cXGL8ix2PbFMLcNlTpHdAA7GBJkQzRe
""""""",Code,Human
1861,"str = ""IshwarVenugopal""

def longest_non_repeat(str):   
    i=0
    max_length = 1

    for i,c in enumerate(str):       
        start_at = i
        sub_str=[]         
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
            
        if len(sub_str) > max_length:
            max_length = len(sub_str)

        print(sub_str)
        
    return max_length

longest_non_repeat(str)",Code,Human
1862,"input_array = [2, 7, 11, 15]
target = 26
result = []

for i, num in enumerate(input_array):
    for j in range(i+1, len(input_array)):
        print(i,j)",Code,Human
1863,"input_array = [0,1,2,4,5,7]
start=0
result = []
while start < len(input_array):
    end = start 
    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):
        end = end + 1
    if end!=start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
    else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
    start = end+1

print(result)",Code,Human
1864,"org = [1,2,3,4,5,6,7]
result = org[:]
steps = 3

for idx,num in enumerate(org):
    if idx+steps < len(org):
        result[idx+steps] = org[idx]
    else:
        result[idx+steps-len(org)] = org[idx]

print(result)",Code,Human
1865,"first_array = [1,2,3,4,5,6,7]
second_array = [3,7,2,1,4,6]

def finder(first_array, second_array):
    return(sum(first_array) - sum(second_array))

missing_number = finder(first_array, second_array)

print(missing_number)",Code,Human
1866,"org_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]
i = 0
while i < len(org_intervals)-1:
    if org_intervals[i+1][0] < org_intervals[i][1]:
        org_intervals[i][1]=org_intervals[i+1][1]
        del org_intervals[i+1]
        i = i - 1
    i = i + 1
print(org_intervals)",Code,Human
1867,"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]

length = len(sampleList)
chunkSize  = int(length/3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
  indexes = slice(start, end, 1)
  listChunk = sampleList[indexes]
  mylist = [i for i in listChunk]
  print(""After reversing it "", mylist)
  start = end
  if(i != 2):
    end +=chunkSize
  else:
    end += length - chunkSize",Code,Human
1868,"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')",Code,Human
1869,,Code,Human
1870,"X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
1871,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
1872,"result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]",Code,Human
1873,for i in range(len(X)):,Code,Human
1874,for j in range(len(Y[0])):,Code,Human
1875,"for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")",Code,Human
1876,"num1 = 12
num2 = 10

ratio = num1 % num2
print(f'remainder:{ratio}')",Code,Human
1877,"number = 1367891
revs_number = 0  
while (number > 0):
  remainder = number % 10
  revs_number = (revs_number * 10) + remainder
  number = number // 10
print(""The reverse number is : {}"".format(revs_number))",Code,Human
1878,"def sumDigits(no):  
    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   
n = 1234511
print(sumDigits(n))",Code,Human
1879,"my_list = [4,3,2,9,10,44,1]
print(""mid value is "",my_list[int(len(my_list)/2)])",Code,Human
1880,"my_list = [4,3,2,9,10,44,1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")",Code,Human
1881,"my_list = [4,3,2,9,10,44,1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")",Code,Human
1882,"my_list1 = [4,3,2,9,10,44,1]
my_list2 = [5,6,2,8,15,14,12]
print(f""Sum of two list:,{my_list1+my_list2}"")",Code,Human
1883,"my_list1 = [4,3,2,9,10,44,1,9,12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")",Code,Human
1884,"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)",Code,Human
1885,"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)",Code,Human
1886,"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)",Code,Human
1887,"list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)",Code,Human
1888,"word = ""Hello World""
letter=word[0]
print(f""First Charecter in String:{letter}"")",Code,Human
1889,"word = ""Hello World""
letter=word[-1]
print(f""First Charecter in String:{letter}"")",Code,Human
1890,"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")",Code,Human
1891,"list = ""AMITKAYAL""
newlist = [x.upper() for x in list]
print(f""New list to upper case:{newlist}"")",Code,Human
1892,"thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")",Code,Human
1893,"set1 = {""a"", ""b"" , ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")",Code,Human
1894,"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}

x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")",Code,Human
1895,"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}

x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")",Code,Human
1896,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")",Code,Human
1897,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}

print(f""Length of Dictionary:{len(thisdict)}"")",Code,Human
1898,"print(bool(""Hello""))
print(bool(15))",Code,Human
1899,"word = ""Hello World""
print(f""Length of string: {len(word)}"")",Code,Human
1900,"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")",Code,Human
1901,"word = ""Hello World""
ksplit = word.split(' ') 
print(f""Splited Strings: {ksplit}"")",Code,Human
1902,"ten = ""."" * 10
print(f""Ten dots: {ten}"")",Code,Human
1903,"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")

#removes leading characters
word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")

#removes trailing characters
word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")",Code,Human
1904,"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")",Code,Human
1905,"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")",Code,Human
1906,"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")",Code,Human
1907,"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")",Code,Human
1908,"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")",Code,Human
1909,"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")",Code,Human
1910,"n = 100
result = []
a, b = 0 , 1
while b < n:
  result. append( b)
  a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")",Code,Human
1911,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isdigit()):
    digitCount += 1
print('Number of digits: ',digitCount)",Code,Human
1912,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isalpha()):
    digitCount += 1
print('Number of alphanumeric: ',digitCount)",Code,Human
1913,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.upper()):
    digitCount += 1
print('Number total Upper Case: ',digitCount)",Code,Human
1914,"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.lower()):
    digitCount += 1
print('Number total lower Case: ',digitCount)",Code,Human
1915,"list1 = [1, 5, 3, 4]

for i in range(len(list1)-1):
  for j in range(i+1,len(list1)):
    if(list1[i] > list1[j]):
      temp = list1[i]
      list1[i] = list1[j]
      list1[j] = temp
print(""Bubble Sorted list: "",list1)",Code,Human
1916,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a*b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")",Code,Human
1917,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a+b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")",Code,Human
1918,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [list1[i]*list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")",Code,Human
1919,"s = [1,2,3,4]
print(f""last element from the stack:{s.pop()}"")",Code,Human
1920,"q = [1,2,3,4]
q.insert(0,5)
print(f""Revised List:{q}"")",Code,Human
1921,"v1 = [1,2,3]
v2 = [1,2,3]
s1 = [0,0,0]

for i in range(len(v1)):
  s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")",Code,Human
1922,"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""Final List:{prices}"")",Code,Human
1923,"import json
person_dict = {'name': 'Bob',
'age': 12,
'children': None
}
person_json = json.dumps(person_dict)
print(person_json)",Code,Human
1924,"import json
person_dict = {""name"": ""Bob"",
""languages"": [""English"", ""Fench""],
""married"": True,
""age"": 32
}
with open('person.txt', 'w') as json_file:
  json.dump(person_dict, json_file)",Code,Human
1925,"import json
person_string = '{""name"": ""Bob"", ""languages"": ""English"", ""numbers"": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent = 4, sort_keys=True))",Code,Human
1926,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""john wick"",
   ""class"": 8,
   ""percentage"": 75,
   ""email"": ""jhon@pynative.com""
}""""""

print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
    print(""Key exist in JSON data"")
    print(student[""name""], ""marks is: "", student[""percentage""])
else:
    print(""Key doesn't exist in JSON data"")",Code,Human
1927,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""Ishwar Venugopal"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""ishwarraja@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
     print(""value is present for given JSON key"")
     print(student.get('email'))
else:
    print(""value is not present for given JSON key"")",Code,Human
1928,"import json
sampleJson = {""id"" : 1, ""name"" : ""value2"", ""age"" : 29}

with open(""sampleJson.json"", ""w"") as write_file:
    json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")",Code,Human
1929,"aList = [1, 2, 3, 4, 5, 6, 7]
aList =  [x * x for x in aList]
print(aList)",Code,Human
1930,"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)",Code,Human
1931,"list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
   
resList = removeValue(list1, 20)
print(resList)",Code,Human
1932,"import random

print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
    print(random.randrange(100, 999, 5), end=', ')",Code,Human
1933,"import random

name = 'pynative'
char = random.choice(name)
print(""random char is "", char)",Code,Human
1934,"import random
import string

def randomString(stringLength):
    """"""Generate a random string of 5 charcters""""""
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(stringLength))

print (""Random String is "", randomString(5) )",Code,Human
1935,"import random
import time

def getRandomDate(startDate, endDate ):
    print(""Printing random date between"", startDate, "" and "", endDate)
    randomGenerator = random.random()
    dateFormat = '%m/%d/%Y'

    startTime = time.mktime(time.strptime(startDate, dateFormat))
    endTime = time.mktime(time.strptime(endDate, dateFormat))

    randomTime = startTime + randomGenerator * (endTime - startTime)
    randomDate = time.strftime(dateFormat, time.localtime(randomTime))
    return randomDate

print (""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))",Code,Human
1936,"def appendMiddle(s1, s2):
  middleIndex = int(len(s1) /2)
  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]
  print(""After appending new string in middle"", middleThree)
  
appendMiddle(""Ault"", ""Kelly"")",Code,Human
1937,"str1 = ""PyNaTive""
lower = []
upper = []
for char in str1:
    if char.islower():
        lower.append(char)
    else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)",Code,Human
1938,"import re

inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
  totalMarks+=mark

percentage = totalMarks/len(markList)  
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)",Code,Human
1939,"str1 = ""Apple""
countDict = dict()
for char in str1:
  count = str1.count(char)
  countDict[char]=count
print(countDict)",Code,Human
1940,"str1 = ""PYnative""
print(""Original String is:"", str1)

str1 = str1[::-1]
print(""Reversed String is:"", str1)",Code,Human
1941,"import string

str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)",Code,Human
1942,"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)",Code,Human
1943,"from string import punctuation

str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
    str1 = str1.replace(char, replace_char)

print(""The strings after replacement : "", str1)",Code,Human
1944,"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
  if(item in countDict):
    countDict[item] += 1
  else:
    countDict[item] = 1
  
print(""Printing count of each item  "",countDict)",Code,Human
1945,"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)",Code,Human
1946,"firstSet  = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}

intersection = firstSet.intersection(secondSet)
for item in intersection:
  firstSet.remove(item)
print(""First Set after removing common element "", firstSet)",Code,Human
1947,"speed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,
          'july':54, 'Aug':44, 'Sept':54} 

speedList = []
for item in speed.values():
  if item not in speedList:
    speedList.append(item)
print(""unique list"", speedList)",Code,Human
1948,"print('%o,' % (8))",Code,Human
1949,"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)",Code,Human
1950,"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)",Code,Human
1951,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))",Code,Human
1952,"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)",Code,Human
1953,"from datetime import datetime

date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
    delta = date_1 - date_2
else:
    delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")",Code,Human
1954,"def calculateSum(num):
    if num:
        return num + calculateSum(num-1)
    else:
        return 0
res = calculateSum(10)
print(res)",Code,Human
1955,"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)",Code,Human
1956,"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))",Code,Human
1957,"number = 7536
while (number > 0):
    digit = number % 10
    number = number // 10
    print(digit, end="" "")",Code,Human
1958,"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
resList = removeValue(list1, num1)
print(resList)",Code,Human
1959,"import random
list = [2,5,8,9,12]
random.shuffle(list)
print (""Printing shuffled list "", list)",Code,Human
1960,"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array,""\n"")",Code,Human
1961,"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)",Code,Human
1962,"import random
num1 =5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))",Code,Human
1963,"import random
randomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)
print(randomList)",Code,Human
1964,"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)",Code,Human
1965,"import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print(""size of list = "",sys.getsizeof(list1))",Code,Human
1966,"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"", listOne.count(listOne[0]) == len(listOne))",Code,Human
1967,"currentEmployee = {1: 'Scott', 2: ""Eric"", 3:""Kelly""}
formerEmployee  = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)",Code,Human
1968,"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)",Code,Human
1969,"test_str = ""geeksforgeeks""
res = """" 
for idx in range(len(test_str)): 
    if not idx % 2 : 
       res = res + test_str[idx].upper() 
    else: 
       res = res + test_str[idx].lower() 
print(res)",Code,Human
1970,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check(email):
  if(re.search(regex,email)):
    print(""Valid Email"")
  else:
    print(""Invalid Email"")

email = ""ishwarraja@gmail.com""
check(email)",Code,Human
1971,"class Password:
    def __init__(self, password):
        self.password = password

    def validate(self):        
        vals = {
        'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),
        'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),
        'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),
        'Password must be at least 8 characters.': lambda s: len(s) >= 8,
        'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)            
        } 
        valid = True  
        for n, val in vals.items():                         
           if not val(self.password):                   
               valid = False
               return n
        return valid                


input_password = ""Ishwar@12Su@ 1'""
p = Password(input_password)
if p.validate() is True:
  print('Password Valid')
else:
  print(p.validate())",Code,Human
1972,"def fib(n):
   if n <= 1:
      return n
   else:
      return (fib(n-1) + fib(n-2))",Code,Human
1973,"def fact(n):
   if n == 1:
      return n
   else:
      return n * fact(n-1)",Code,Human
1974,"def sq(n):
   return [i**2 for i in range(n)]",Code,Human
1975,"def sqrt(n):
   return [i**0.5 for i in range(n)]",Code,Human
1976,"def even_odd(l1, l2):
    return[x + y for x, y in zip(l1, l2) if x % 2 ==0 and y % 2 != 0]",Code,Human
1977,"def strip_vowel_str(str):
    vowels = ['a', 'e', 'i', 'o', 'u']
    return """".join([x for x in str if x not in vowels])",Code,Human
1978,"def relu_like_activation(l):
    return[0 if x < 0 else x for x in l]",Code,Human
1979,"def sigmoid_activation(l):
    return[round(1/(1+math.exp(-x)),2) for x in l]

#8. python function to identify profane words
def profane_filter(str):
    profane_word_url = ""https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt""
    file = urllib.request.urlopen(profane_word_url)
    for line in file:
        decoded_line = line.decode(""utf-8"")
    return decoded_line
    str = re.findall(r'\w+', str)
    return [i for i in str if i in decoded_line]",Code,Human
1980,"def add_even_num(l):
    sum = reduce(lambda a, b: a + b, filter(lambda a: (a % 2 == 0), l))
    return sum",Code,Human
1981,"def circle_area(r):
    return 22/7 * r**2",Code,Human
1982,"def test_prime(n):
    if (n==1):
        return False
    elif (n==2):
        return True;
    else:
        for x in range(2,n):
            if(n % x==0):
                return False
        return True",Code,Human
1983,"def cube(n):
   return [i*i*i for i in range(n)]",Code,Human
1984,"def average():
    numbers = []
    def add(number):
        numbers.append(number)
        total = sum(numbers)
        count = len(numbers)
        return total/count
    return add
a = average()
a(10)
a(20)
a(45)",Code,Human
1985,"def create_adders():
    adders = []
    for n in range(1, 4):
        adders.append(lambda x, y=n: x + y)
    return adders
adders = create_adders()",Code,Human
1986,"from datetime import datetime
datetime.utcnow()
def log(msg, *, dt = datetime.utcnow()):
    print(f'Message at {dt} was {msg}')",Code,Human
1987,"import ctypes
def ref_count(address : int): #what is int doing here? Annotations
    return ctypes.c_long.from_address(address).value",Code,Human
1988,"def modify_tuple(t):
    print(f'Initial t mem-add = {id(t)}')
    t[0].append(100)
    print(f'Final t mem-add = {id(t)}')",Code,Human
1989,"def compare_using_equals(n):
    a = 'a long string that is not intered' * 200
    b = 'a long string that is not intered' * 200
    for i in range(n):
        if a == b:
            pass",Code,Human
1990,"import sys
def compare_using_interning(n):
    a = sys.intern('a long string that is not intered' * 200)
    b = sys.intern('a long string that is not intered' * 200)
    for i in range(n):
        if a is b:
            pass",Code,Human
1991,"import time
def run_float(n = 1):
    for i in range(n):
        a = 3.1415

def run_decimal(n = 1):
    for i in range(n):
        a = Decimal('3.1415')
n = 10000000
start = time.perf_counter()
run_float(n)
end = time.perf_counter()

print ('float: ', end - start)

start = time.perf_counter()
run_decimal(n)
end = time.perf_counter()

print ('decimal: ', end - start)",Code,Human
1992,"def fact(n):
    from operator import mul
    from functools import reduce
    return reduce(mul, range(1, n+1))
fact(10)",Code,Human
1993,"from random import uniform
from math import sqrt
def random_shot(rad):
    r_x = uniform(-rad, rad)
    r_y = uniform(-rad, rad)

    if sqrt(r_x**2 + r_y**2) <= rad:
        is_in_circle = True
    else:
        is_in_circle = False
    
    return r_x, r_y, is_in_circle",Code,Human
1994,"def square_area(x):
    return x ** 2",Code,Human
1995,"def sum_n_num(n):
    return n * (n + 1)/2",Code,Human
1996,"NumList1 = []
NumList2 = []
total = []

Number = int(input(""Please enter the Total Number of List Elements: ""))
print(""Please enter the Items of a First and Second List   "")
for i in range(1, Number + 1):
    List1value = int(input(""Please enter the %d Element of List1 : "" %i))
    NumList1.append(List1value)

    List2value = int(input(""Please enter the %d Element of List2 : "" %i))
    NumList2.append(List2value)
    
for j in range(Number):
    total.append( NumList1[j] + NumList2[j])
 
print(""\nThe total Sum of Two Lists =  "", total)",Code,Human
1997,"NumList = []
Number = int(input(""Please enter the Total Number of List Elements: ""))
for i in range(1, Number + 1):
    value = int(input(""Please enter the Value of %d Element : "" %i))
    NumList.append(value)

smallest = largest = NumList[0]

for j in range(1, Number):
    if(smallest > NumList[j]):
        smallest = NumList[j]
        min_position = j
    if(largest < NumList[j]):
        largest = NumList[j]
        max_position = j

print(""The Smallest Element in this List is : "", smallest)
print(""The Index position of Smallest Element in this List is : "", min_position)
print(""The Largest Element in this List is : "", largest)
print(""The Index position of Largest Element in this List is : "", max_position)",Code,Human
1998,"reverse = 0
def integer_reverse(number):
    global reverse
    
    if(number > 0):
        Reminder = number % 10
        reverse = (reverse * 10) + Reminder
        integer_reverse(number // 10)
    return reverse


number = int(input(""Please Enter any Number: ""))

rev = integer_reverse(number)
print(""Reverse of a Given number is = %d"" %rev)

if(number == rev):
    print(""%d is a Palindrome Number"" %number)
else:
    print(""%d is not a Palindrome Number"" %number)",Code,Human
1999,"a = float(input("" Please Enter the First Value a: ""))
b = float(input("" Please Enter the Second Value b: ""))

print(""Before Swapping two Number: a = {0} and b = {1}"".format(a, b))

temp = a
a = b
b = temp

print(""After Swapping two Number: a = {0} and b = {1}"".format(a, b))",Code,Human
2000,"str1 = input(""Please Enter the First  String : "")
str2 = input(""Please Enter the Second String : "")

concat1 = str1 + str2
print(""The Final String After Python String Concatenation = "", concat1)

concat2 = str1 + ' ' + str2
print(""The Final After String Concatenation with Space = "", concat2)",Code,Human
2001,"a = float(input(""Please Enter the First value: ""))
b = float(input(""Please Enter the First value: ""))
c = float(input(""Please Enter the First value: ""))

if (a > b and a > c):
          print(""{0} is Greater Than both {1} and {2}"". format(a, b, c))
elif (b > a and b > c):
          print(""{0} is Greater Than both {1} and {2}"". format(b, a, c))
elif (c > a and c > b):
          print(""{0} is Greater Than both {1} and {2}"". format(c, a, b))
else:
          print(""Either any two values or all the three values are equal"")",Code,Human
2002,"import math

def find_Diameter(radius):
    return 2 * radius

def find_Circumference(radius):
    return 2 * math.pi * radius

def find_Area(radius):
    return math.pi * radius * radius

r = float(input(' Please Enter the radius of a circle: '))

diameter = find_Diameter(r)
circumference = find_Circumference(r)
area = find_Area(r)

print(""\n Diameter Of a Circle = %.2f"" %diameter)
print("" Circumference Of a Circle = %.2f"" %circumference)
print("" Area Of a Circle = %.2f"" %area)",Code,Human
2003,"string = input(""Please Enter your Own String : "")

string1 = string.upper()
 
print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)",Code,Human
2004,"princ_amount = float(input("" Please Enter the Principal Amount : ""))
rate_of_int = float(input("" Please Enter the Rate Of Interest   : ""))
time_period = float(input("" Please Enter Time period in Years   : ""))

simple_interest = (princ_amount * rate_of_int * time_period) / 100

print(""\nSimple Interest for Principal Amount {0} = {1}"".format(princ_amount, simple_interest))",Code,Human
2005,"keys = ['name', 'age', 'job']
values = ['John', 25, 'Developer']

myDict = {k: v for k, v in zip(keys, values)}
print(""Dictionary Items  :  "",  myDict)",Code,Human
2006,"def volume(r, h): 
    vol = 22/7 * r * r * h 
    return vol",Code,Human
2007,"def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print ""Move disk 1 from source"",source,""to destination"",destination 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print ""Move disk"",n,""from source"",source,""to destination"",destination 
    TowerOfHanoi(n-1, auxiliary, destination, source) 

n = 4
TowerOfHanoi(n,'A','B','C') 

Python 3 program to find time for a",Code,Human
2008,,Code,Human
2009,"def calcAngle(hh, mm):",Code,Human
2010,,Code,Human
2011,,Code,Human
2012,"hour_angle = 0.5 * (hh * 60 + mm) 
    minute_angle = 6 * mm",Code,Human
2013,,Code,Human
2014,angle = abs(hour_angle - minute_angle),Code,Human
2015,,Code,Human
2016,"angle = min(360 - angle, angle) 
  
    return angle",Code,Human
2017,,Code,Human
2018,"def printTime(theta): 
  
    for hh in range(0, 12): 
        for mm in range(0, 60): 
            if (calcAngle(hh, mm)==theta): 
                print(hh, "":"", mm, sep = """") 
                return
              
    print(""Input angle not valid."") 
    return",Code,Human
2019,"class Node: 

    def __init__(self, data): 
        self.data = data 
        self.next = None

class LinkedList: 

    def __init__(self): 
        self.head = None

    def reverse(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev 
        
    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 

    def printList(self): 
        temp = self.head 
        while(temp): 
            print(temp.data)
            temp = temp.next


llist = LinkedList() 
llist.push(20) 
llist.push(4) 
llist.push(15) 
llist.push(85) 

print(""Given Linked List"")
llist.printList() 
llist.reverse() 
print(""\nReversed Linked List"")
llist.printList()",Code,Human
2020,"def removeDuplicate(str): 
    s=set(str) 
    s="""".join(s) 
    print(""Without Order:"",s) 
    t="""" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
    print(""With Order:"",t) 
    
str1=""conondrum""
removeDuplicate(str1) 

from .sin import sine
from .cos import cosine
from .tan import tangent
from .softmax import softmax
from .sigmoid import sigmoid
from .tanh import tanh
from .relu import ReLU
from .log import log
from .exp import exp

from .sin import dsine
from .cos import dcosine
from .tan import dtangent
from .sigmoid import dsigmoid
from .tanh import dtanh
from .log import dlog
from .exp import dexp

import math",Code,Human
2021,"def cosine(angle):

    """""" returns the cosine value for an angle mentioned in radians""""""

    return math.cos(angle)",Code,Human
2022,"def dcosine(angle):

    """""" returns the cosine value for an angle mentioned in radians""""""

    return -math.sin(angle)",Code,Human
2023,"def sine(angle):

    """""" returns the sine value for an angle mentioned in radians""""""

    return math.sin(angle)",Code,Human
2024,"def dsine(angle):

    """""" returns the sine value for an angle mentioned in radians""""""

    return math.cos(angle)",Code,Human
2025,"def tangent(angle):

  """""" returns the tangent value for an angle mentioned in radians""""""

  return math.tan(angle)",Code,Human
2026,"def dtangent(angle):

  """""" returns the tangent value for an angle mentioned in radians""""""

  return 1/(math.cos(angle)**2)",Code,Human
2027,"def exp(x):

  """"""returns e^x of a number""""""

  return math.exp(x)",Code,Human
2028,"def dexp(x):

    return math.exp(x)",Code,Human
2029,"def log(x):

  """"""returns the logarithmic value of a number""""""

  return math.log(x)",Code,Human
2030,"def dlog(x):

    return 1/x",Code,Human
2031,"def softmax(x):

  """"""returns the softmax output of a vector""""""

  if(type(x) == int or type(x) == float):

    return 1

  denom = 0

  for i in x:

    denom+=math.exp(i)

  new_vec = []

  for i in x:

    new_vec.append(math.exp(i)/denom)

  return new_vec",Code,Human
2032,"def tanh(x):

  """""" returns the hyperbolic tangent value of a number""""""

  return math.tanh(x)",Code,Human
2033,"def dtanh(x):

  """""" returns the hyperbolic tangent value of a number""""""

  return 1 - (math.tanh(x)**2)",Code,Human
2034,"def isPalindrome(s):
    return s == s[::-1]",Code,Human
2035,"def symmetry(a): 
      
    n = len(a) 
    flag = 0
      
    if n%2: 
        mid = n//2 +1
    else: 
        mid = n//2
          
    start1 = 0
    start2 = mid 
      
    while(start1 < mid and start2 < n): 
          
        if (a[start1]== a[start2]): 
            start1 = start1 + 1
            start2 = start2 + 1
        else: 
            flag = 1
            break
       
    return flag",Code,Human
2036,"def rev_sentence(sentence):  
  
    words = sentence.split(' ')  
  
    reverse_sentence = ' '.join(reversed(words))  
  
    return reverse_sentence",Code,Human
2037,"string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1): 
    print(""NO"") 
else: 
    print(""YES"")",Code,Human
2038,"str1 = ""great way to learn!""
print(len(str1))",Code,Human
2039,"test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()} 
print(""The words frequency: "" + str(res))",Code,Human
2040,"str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:  
    if len(word)%2==0: 
        print(word)",Code,Human
2041,"str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou""))>=5: 
  print('accepted') 
else: 
  print(""not accepted"")",Code,Human
2042,"str1=""ababccd12@""
str2=""bb123cca1@""

matched_chars = set(str1) & set(str2) 
print(""No. of matching characters are : "" + str(len(matched_chars)) )",Code,Human
2043,"str1 = ""what a great day!""
print("""".join(set(str1)))",Code,Human
2044,"str1=""watch the match""
all_freq = {} 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)
print(""Minimum of all characters is: "" + str(res))",Code,Human
2045,"str1 = ""watch the match""
all_freq = {} 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = max(all_freq, key = all_freq.get)
print(""Maximum of all characters is: "" + str(res))",Code,Human
2046,"str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5

res_str = [] 
      
text = str1.split("" "") 
      
for x in text: 

    if len(x) < str_len: 
        res_str.append(x) 

print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))",Code,Human
2047,"str1 = ""part of speech""
delimiter = ""-""

list_str = str1.split("" "")

new_str = delimiter.join(list_str)

print(""Delimited String is: "" + new_str)",Code,Human
2048,"str1=""01110011 a""

set1 = set(str1)

if set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:
    print(""string is binary"")
else:
    print(""string is not binary"")",Code,Human
2049,"def remove_char(string, i):

    str1 = string[ : i]  

    str2 = string[i + 1: ] 
      
    return str1 + str2",Code,Human
2050,"import re 
  
def find_urls(string): 
   
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url]",Code,Human
2051,"def UncommonWords(str1, str2): 
  
    count = {} 
      
    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1
      
    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] == 1]",Code,Human
2052,"def commonWords(str1, str2): 
  
    count = {} 
      
    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1
      
    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] > 1]",Code,Human
2053,"str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""

repl_dict = {'IISC':'It', 'Classes': 'They'}

str_list = str1.split(' ') 

res = set() 

for idx, ele in enumerate(str_list): 
    if ele in repl_dict: 
        print(str(idx) + '  '+ele)
        if ele in res: 
            str_list[idx] = repl_dict[ele] 
        else: 
            res.add(ele)

res = ' '.join(str_list)

print(""Replaced String: "" + str(res))",Code,Human
2054,"str1 = 'CoffeeDay is best for coffee and having long conversations'
  
word_list = [""best"", 'long'] 
  
repl_word = 'good'
  
res = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) 

print(""String after multiple replace : "" + str(res))",Code,Human
2055,"def rotate_left(input,d):  
  
    Lfirst = input[0 : d]  
    Lsecond = input[d :]  
    return (Lsecond + Lfirst)",Code,Human
2056,"def rotate_right(input,d):  
  
    Rfirst = input[0 : len(input)-d]  
    Rsecond = input[len(input)-d : ]  
    return (Rsecond + Rfirst)",Code,Human
2057,"str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""

replaced_str = str1.replace(substr1, substr2)

print(""String after replace :"" + str(replaced_str))",Code,Human
2058,"str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'
  
res = '' 
dig = '' 

for ele in str1: 
    if ele.isdigit(): 
        dig += ele 
    else: 
        res += ele 
  
res += dig 

print(""Strings after digits at end : "" + str(res))",Code,Human
2059,"str1 = 'week after week the numbers are increasing'
  
res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']

for idx in range(1, len(str1) - 1): 

    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): 
        res += 1
  
if str1[0] not in vow_list and str1[1] in vow_list: 
    res += 1
  
if str1[-1] not in vow_list and str1[-2] in vow_list: 
    res += 1

print(""Characters around vowels count : "" + str(res))",Code,Human
2060,"def count_space(str1): 

    count = 0
      
    for i in range(0, len(str1)): 

        if str1[i] == "" "": 
            count += 1
          
    return count",Code,Human
2061,"str1 = ""whatisthis""
  
split_string = list(''.join(str1)) 
  
print(split_string)",Code,Human
2062,"str1 = 'GoodisalwaysGoood'
  
N = 3
  
K = 2
  
res = [] 

for idx in range(0, len(str1) - N + 1): 

    if (len(set(str1[idx: idx + N])) == K): 
        res.append(str1[idx: idx + N]) 
  
print(""Extracted Strings : "" + str(res))",Code,Human
2063,"import re 
  
str1 = 'count001'

res = re.sub(r'[0-9]+$', 
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",  
             str1) 
      
print(""Incremented numeric String : "" + str(res))",Code,Human
2064,"str1 = ""python1234""
  
total_digits = 0
total_letters = 0
  
for s in str1: 
  
    if s.isnumeric(): 
        total_digits += 1
    else: 
        total_letters += 1
  
print(""Total letters found : "", total_letters) 
print(""Total digits found : "", total_digits)",Code,Human
2065,"def check_lower(str1):
    
    for char in str1: 
        k = char.islower()   
        if k == True: 
            return True 
    if(k != 1): 
        return False",Code,Human
2066,"def check_upper(str1):
    
    for char in str1: 
        k = char.isupper()   
        if k == True: 
            return True
    if(k != 1): 
        return False",Code,Human
2067,"str1 = 'It is a glorious day'

res = len(str1.split()) 
  
print(""The number of words in string are : "" + str(res))",Code,Human
2068,"str1 = 'It is a glorious day'

res = len(str1) 

print(""The number of characters in string are : "", str(res))",Code,Human
2069,"def list_to_dict(list1, list2):
  return dict(zip(list1, list2))",Code,Human
2070,"def sort_dict_list(dict_list, sort_key):
  dict_list.sort(key=lambda item: item.get(sort_key))",Code,Human
2071,"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key=''
for key in dict_1:
  if len(key)>len(max_key):
    max_key=key
print(max_key)",Code,Human
2072,"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
  new_key = key[0].upper() + key[1:-1] + key[-1].upper()
  input_dict[new_key] = input_dict[key]
  if key != new_key:
    del input_dict[key]",Code,Human
2073,"key_val_map = {""key1"": ""length1"", ""key2"": ""len2"", ""Hello"": ""hi"", ""bingo"": ""print bingo""}
for key, val in key_val_map.items():
  if len(val) > len(key):
    print(""Bingo!"")
  else:
    print(""no bingo"")",Code,Human
2074,"def invert_dict(input_dict):
  my_inverted_dict = {value: key for key, value in input_dict.items()}
  return my_inverted_dict",Code,Human
2075,"def invert_dict_non_unique(my_dict):
  my_inverted_dict = dict()
  for key, value in my_dict.items():
      my_inverted_dict.setdefault(value, list()).append(key)
  return my_inverted_dict",Code,Human
2076,"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}",Code,Human
2077,"def mean_key_val_diff(input_dict):
  sum_diff = 0
  for key, val in input_dict.items():
    sum_diff += abs(len(val) - len(key))
  return sum_diff/len(input_dict)",Code,Human
2078,"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""}, 
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"":""bar2""}]
unique_keys = []
for d in list_of_dicts:
  for key in d:
    if key not in unique_keys:
      unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")",Code,Human
2079,"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, 
             {'tsai': 1, 'for': 10, 'geeks': 9}, 
             {'love': 4, 'tsai': [7, 3, 22, 1]}]   
N = 2
key = ""tsai""  
for sub in test_list: 
    if isinstance(sub[key], list): 
        sub[key] = sub[key][N]",Code,Human
2080,"test_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] 
res =[{} for idx in range(len(test_list))] 
idx = 0
for sub in test_list: 
	for key, val in sub.items(): 
		for ele in val: 
			res[idx][key] = ele 
			idx += 1
		idx = 0
print(""Records after conversion : "" + str(res))",Code,Human
2081,"ini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, 
            {'c':[7, 8, 9], 'd':[10, 11, 12]}] 
temp_dict = {} 
result = [] 
for ini_dict in ini_list: 
    for key in ini_dict.keys(): 
         if key in temp_dict: 
             temp_dict[key] += ini_dict[key] 
         else: 
             temp_dict[key] = ini_dict[key]   
for key in temp_dict.keys(): 
     result.append(tuple([key] + temp_dict[key])) 
print(""Resultant list of tuples: {}"".format(result))",Code,Human
2082,"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] 
res = {} 
for i, j in test_list: 
     res.setdefault(j, []).append(i) 
print(""The dictionary converted from tuple list : "" + str(res))",Code,Human
2083,"test_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}
prod_list=[]
for x in zip(*test_dict.values()):
  res = 1 
  for ele in x: 
      res *= ele
  prod_list.append(res)
res = tuple(prod_list) 
print(""The product from each index is : "" + str(res))",Code,Human
2084,"test_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} 
print(""The Pretty Print dictionary is : "") 
for sub in test_dict: 
    print(f""\n{sub}"") 
    for sub_nest in test_dict[sub]: 
        print(sub_nest, ':', test_dict[sub][sub_nest])",Code,Human
2085,"test_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, 
             'Akshat' : {'roll' : 54, 'marks' : 12},  
             'Akash' : { 'roll' : 12, 'marks' : 15}} 
sort_key = 'marks'
res = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) 
print(""The sorted dictionary by marks is : "" + str(res))",Code,Human
2086,"def lists_to_dict(test_list1, test_list2, test_list3):
  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] 
  return res",Code,Human
2087,"test_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} 
K = 3
res = {key : val for key, val in test_dict.items() 
                   if type(val) != int or val > K} 
print(""Values greater than K : "", res.keys())",Code,Human
2088,"def dict_to_tuple(input_dict):
  out_tuple = [(a, b) for a,b in input_dict.items()]
  return out_tuple",Code,Human
2089,"def flatten_dict(dd, separator ='_', prefix =''): 
    flattened =  { prefix + separator + k if prefix else k : v 
             for kk, vv in dd.items() 
             for k, v in flatten_dict(vv, separator, kk).items() 
             } if isinstance(dd, dict) else { prefix : dd } 
    return flattened",Code,Human
2090,"test_dict1 = {""tsai"" : 20, ""is"" : 36, ""best"" : 100} 
test_dict2 = {""tsai2"" : 26, ""is2"" : 19, ""best2"" : 70} 
keys1 = list(test_dict1.keys()) 
vals2 = list(test_dict2.values()) 
res = dict() 
for idx in range(len(keys1)): 
	res[keys1[idx]] = vals2[idx] 
print(""Mapped dictionary : "" + str(res))",Code,Human
2091,"test_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} 
test_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} 
prio_dict = {1 : test_dict2, 2: test_dict1} 
res = prio_dict[2].copy() 
for key, val in prio_dict[1].items(): 
    res[key] = val 
print(""The dictionary after combination : "" + str(res))",Code,Human
2092,"dict1 = {'a': 12, 'for': 25, 'c': 9} 
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300} 
for key in dict2: 
    if key in dict1: 
        dict2[key] = dict2[key] + dict1[key] 
    else: 
        pass",Code,Human
2093,"test_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} 
res = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) 
print(""List after conversion from dictionary : "", res)",Code,Human
2094,"test_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, 
             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, 
             {'tsai' : [7, 5], 'best' : [5, 7]}] 
res = dict() 
for inner_dict in test_list: 
    for inner_list in inner_dict: 
        if inner_list in res: 
            res[inner_list] += (inner_dict[inner_list]) 
        else: 
            res[inner_list] = inner_dict[inner_list]  
print(""The concatenated dictionary : "" + str(res))",Code,Human
2095,"test_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  
N = 4
res = []   
for key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: 
    res.append(key) 
print(""Top N keys are: "" + str(res))",Code,Human
2096,"test_list = [{""Gfg"" : 3, ""b"" : 7},  
             {""is"" : 5, 'a' : 10},  
             {""Best"" : 9, 'c' : 11}]  
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]   
print(""The extracted value : "" + str(res))",Code,Human
2097,"import time 
import datetime 
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1,""%d/%m/%Y"") 
timestamp = datetime.datetime.timestamp(element) 
print(timestamp)",Code,Human
2098,"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2] 
res = 1
for ele in test_list: 
    try: 
        res *= int(ele) 
    except : 
        pass
print(""Product of integers in list : "" + str(res))",Code,Human
2099,"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)",Code,Human
2100,"def extend_list(list1, list2):
    list1 = [1, 2]
    list2 = [3, 4]
    return list1.extend(list2)",Code,Human
2101,"def add_two_lists(list1, list2):
   list1 = [1, 2, 3]
   list2 = [4, 5, 6]
   sum_list = []

   for (item1, item2) in zip(list1, list2):
      sum_list.append(item1+item2)
   return sum_list",Code,Human
2102,"list1 = ['p','r','o','b','e']

print(list1[-1])",Code,Human
2103,"list1 = [11, -21, 0, 45, 66, -93] 
  
for num in list1: 
      
    if num >= 0: 
       print(num, end = "" "")",Code,Human
2104,"def multiplyList(myList) :
    result = 1
    for x in myList:
         result = result * x 
    return result",Code,Human
2105,"list1 = [10, 20, 1, 45, 99] 
  
print(""Smallest element is:"", min(list1))",Code,Human
2106,"list1 = [11, 5, 17, 18, 23, 50]  
  
for ele in list1: 
    if ele % 2 == 0: 
        list1.remove(ele) 
  
print(""New list after removing all even numbers: "", list1)",Code,Human
2107,"list1 = [11, 5, 17, 18, 23, 50]  
  
del list1[1:5] 
  
print(*list1)",Code,Human
2108,"list1 = [11, 5, 17, 18, 23, 50]  
  
unwanted_num = {11, 18} 
  
list1 = [ele for ele in list1 if ele not in unwanted_num] 
  
print(""New list after removing unwanted numbers: "", list1)",Code,Human
2109,"test_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] 
  
print(""The original list is : "" + str(test_list)) 
  
res = [ele for ele in test_list if ele.strip()] 
      
print(""List after filtering non-empty strings : "" + str(res))",Code,Human
2110,"def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]",Code,Human
2111,"l = [1, 2.0, 'hello','have', 'a', 'good', 'day'] 
  
s = 'hello'  
  
if s in l: 
    print(f'{s} is present in the list') 
else: 
    print(f'{s} is not present in the list')",Code,Human
2112,"test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] 
  
indices_list = [idx for idx in range( 
    len(test_list)) if test_list[idx] % 2 == 0] 
  

res = indices_list[-1] - indices_list[0] 
  
print(""Even elements distance : "" + str(res))",Code,Human
2113,"def emptylist():
   return list()",Code,Human
2114,"list1 = [5] * 10

print(list1)",Code,Human
2115,"def Reverse(lst): 
    return [ele for ele in reversed(lst)] 
      
lst = [10, 11, 12, 13, 14, 15] 
print(Reverse(lst))",Code,Human
2116,"list1 = [10, 21, 4, 45, 66, 93, 11]  
   
odd_nos = list(filter(lambda x: (x % 2 != 0), list1)) 
  
print(""Odd numbers in the list: "", odd_nos)",Code,Human
2117,"list1 = [11, -21, 0, 45, 66, -93] 
  
for num in list1: 
      
    if num < 0: 
       print(num, end = "" "")",Code,Human
2118,"def countX(lst, x): 
    count = 0
    for ele in lst: 
        if (ele == x): 
            count = count + 1
    return count 
  
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8] 
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))",Code,Human
2119,"def swapList(newList): 
    size = len(newList)",Code,Human
2120,"temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp 
      
    return newList 
      
newList = [12, 35, 9, 56, 24] 
  
print(swapList(newList))",Code,Human
2121,"test_list = [2323, 82, 129388, 234, 95] 
  
print(""The original list is : "" + str(test_list)) 
  
res = dict() 
for ele in test_list: 
  
    mid_idx = len(str(ele)) // 2
    key = int(str(ele)[:mid_idx]) 
    val = int(str(ele)[mid_idx:]) 
  
    res[key] = val 
  
print(""Constructed Dictionary : "" + str(res))",Code,Human
2122,"test_list = [56, 72, 875, 9, 173]  
   
K = 7
  
res = [ele for ele in test_list if str(K) in str(ele)] 
  
print(""Elements with digit K : "" + str(res))",Code,Human
2123,"input_list = [1, 2, 2, 5, 8, 4, 4, 8] 
  
l1 = [] 
  
count = 0
  
for item in input_list: 
    if item not in l1: 
        count += 1
        l1.append(item) 

print(""No of unique items are:"", count)",Code,Human
2124,"L = [4, 5, 1, 2, 9, 7, 10, 8] 
  
count = 0
  
for i in L: 
    count += i 

avg = count/len(L) 
  
print(""sum = "", count) 
print(""average = "", avg)",Code,Human
2125,"test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] 
K = 1
res = [ele for ele in test_list if len(ele) != K] 
  
print(""Filtered list : "" + str(res))",Code,Human
2126,"list1 = [1, 2, 5, 6] 
 
res = [(val, pow(val, 3)) for val in list1] 
  
print(res)",Code,Human
2127,"test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]
  
res = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] 

print(""The list tuple combination : "" + str(res))",Code,Human
2128,"test_list = [(3, 4), (6, 5), (7, 8)] 
  
res = [(sub[1], sub[0]) for sub in test_list] 
          
print(""The swapped tuple list is : "" + str(res))",Code,Human
2129,"def Sort_Tuple(tup):  
      
    lst = len(tup)  
    for i in range(0, lst):  
          
        for j in range(0, lst-i-1):  
            if (tup[j][1] > tup[j + 1][1]):  
                temp = tup[j]  
                tup[j]= tup[j + 1]  
                tup[j + 1]= temp  
    return tup",Code,Human
2130,"test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 
  
res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] 
  
print(""The filtered tuple : "" + str(res))",Code,Human
2131,"test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] 
  

print(""The original list is : "" + str(test_list)) 
  

res = [sub for sub in test_list if all(ele >= 0 for ele in sub)] 
  

print(""Positive elements Tuples : "" + str(res))",Code,Human
2132,"test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] 
print(""The original list is : "" + str(test_list)) 
  
res = [] 
for sub in test_list:                                            
    if res and res[-1][0] == sub[0]:               
        res[-1].extend(sub[1:])                         
    else: 
        res.append([ele for ele in sub])      
res = list(map(tuple, res)) 
  
print(""The extracted elements : "" + str(res))",Code,Human
2133,"test_list1 = [ [1, 2], [3, 4], [5, 6] ] 
test_list2 = [ [3, 4], [5, 7], [1, 2] ] 
  
res_list = [] 
for i in test_list1: 
    if i not in test_list2: 
        res_list.append(i) 
for i in test_list2: 
    if i not in test_list1: 
        res_list.append(i) 
          
print (""The uncommon of two lists is : "" + str(res_list))",Code,Human
2134,"def convert24(str1): 
      
    if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
        return ""00"" + str1[2:-2] 
          
    elif str1[-2:] == ""AM"": 
        return str1[:-2] 
      
    elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
        return str1[:-2] 
          
    else: 

        return str(int(str1[:2]) + 12) + str1[2:8]",Code,Human
2135,"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')",Code,Human
2136,"def divide_first_number_by_second(num1, num2):
    return (num1 // num2), (num1 % num2)",Code,Human
2137,"def largest_and_smallest(list_of_nums):
    if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
    else:
        return",Code,Human
2138,"def read_and_print_file(filepath):
    with open(filepath, ""r"") as infile:
        print( infile.read() )",Code,Human
2139,"n = 62
for num in range(n):
    print(num)",Code,Human
2140,"def sort_ascending(list_to_be_sorted):
    return sorted(list_to_be_sorted)",Code,Human
2141,"def sort_descending(list_to_be_sorted):
    return sorted(list_to_be_sorted, reverse=True)",Code,Human
2142,"def sum_first_n(n):
    return ( n * (n+1) ) // 2",Code,Human
2143,"def sum_first_n_recursive(n):
    if n == 0:
        return 0
    return sum_first_n_recursive(n-1) + n",Code,Human
2144,"def filter_with_key_value(list_of_dicts, key, value):
    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )",Code,Human
2145,"def reverse(seq):
    SeqType = type(seq)
    emptySeq = SeqType()
    if seq == emptySeq:
        return emptySeq
    restrev = reverse(seq[1:])
    first = seq[0:1]
    result = restrev + first
    return result",Code,Human
2146,"def square(x):
    return x**2",Code,Human
2147,"def selection_sort(list_to_be_sorted):
    sorted_list = list_to_be_sorted[:]
    for i in range(len(sorted_list)):
        new_min = sorted_list[i]
        new_min_old_place = i
        for j in range(i+1, len(sorted_list)):
            if new_min > sorted_list[j]:
                new_min = sorted_list[j]
                new_min_old_place = j
        old_val = sorted_list[i]
        sorted_list[i] = new_min
        sorted_list[new_min_old_place] = old_val
    return sorted_list",Code,Human
2148,"a = input(""User Input"")
print(a)",Code,Human
2149,"def shift_and_scale(list_of_nums, mean, std):
    return [ (x-mean) / std for x in list_of_nums ]",Code,Human
2150,"def zip_(list_of_seq):
    return list(zip(*list_of_seq))",Code,Human
2151,"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
    guess2 = input(""Is it <= 2? enter y/n \n"")
    if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
    else:
        print(""Yay! found the number, its 3"")
else:
    guess2 = input(""Is it 4? enter y/n \n"")
    if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
    else:
        print(""Yay! found the number, its 5"")",Code,Human
2152,"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)",Code,Human
2153,"def reverse_string(str_to_be_reversed):
    return str_to_be_reversed[::-1]",Code,Human
2154,"print(""Hello World"")",Code,Human
2155,"a = 10
b = 15
a, b = b, a",Code,Human
2156,"a = {""a"":1, ""b"":2, ""c"":3, ""d"":4}
for k, v in a.items():
    print(k, v)",Code,Human
2157,"def print_ascii(char):
    print(ord(char))",Code,Human
2158,"def hcf(num1, num2):
    smaller = num1 if num1 < num2 else num2
    for i in range(1, smaller+1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
    return hcf",Code,Human
2159,"def lcm(num1, num2):
    bigger = num1 if num1 > num2 else num2
    while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
    return bigger",Code,Human
2160,"def recursive_sum(n):
    if n <= 1:
        return n
    else:
        return n + recursive_sum(n-1)",Code,Human
2161,"def delete_last_element(list_to_be_processed):
    deleted_element = list_to_be_processed.pop()
    return list_to_be_processed, deleted_element",Code,Human
2162,"def square_list_elements(list_to_be_squared):
    return list( map(lambda x: x**2, list_to_be_squared) )",Code,Human
2163,"def find_integer_square_roots(num):
    found = False
    for k in range(1, (num//2)+1):
        if ((k**2)==num):
            found = True
            break
    if not found:
        return ""Error - the square root is not an integer""
    return -k, k",Code,Human
2164,"input_num = 27
while input_num:
    print(input_num)
    input_num -= 1",Code,Human
2165,"def divide(num1, num2):
    if num2 == 0:
        return
    else:
        return num1 / num2",Code,Human
2166,"seq = ""abcde""
for k in seq:
    if k == ""f"":
        break
else:
    print(""f Not Found!"")",Code,Human
2167,"def sort_and_merge(l1, l2):
    new_list = []
    i = 0
    j = 0
    l1_len = len(l1)
    l2_len = len(l2)
    while (i <= l1_len-1) and (j <= l2_len-1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i +=1
        else:
            new_list.append(l2[j])
            j +=1
    if i <= (l1_len-1):
        new_list += l1[i:]
    if j <= (l2_len-1):
        new_list += l2[j:]
    return new_list

def recursive_merge_sort(list_to_be_sorted):
    final_list = []
    first = 0
    last = len(list_to_be_sorted)
    if last <= 1:
        final_list.extend( list_to_be_sorted )
    else:
        mid = last // 2
        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )
        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )
        final_list.extend( sort_and_merge( l1, l2 ) )
    return final_list",Code,Human
2168,"def cal_mean(num_list:list)->float:
    if num_list:
        return sum(num_list)/len(num_list)
    else:
        return None",Code,Human
2169,"def cal_median(num_list:list)->float:
    if num_list:
        if len(num_list)%2 != 0:
            return sorted(num_list)[int(len(num_list)/2) - 1]
        else:
            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2
    else:
        return None",Code,Human
2170,"def cal_triangle_area(a:float,b:float,c:float)->float:
    if a or b or c:
        s = (a+b+c)/2
        if s>a and s>b and s>c:
            area = (s*(s-a)*(s-b)*(s-c))**(1/2)
            return round(area,2)
        else:
            return None
    return None",Code,Human
2171,"def cal_eq_triangle_area(a:float)->float:
    if a:
        return (3**(1/2))*(a**2)/4
    else:
        return None",Code,Human
2172,"def cal_rt_triangle_area(base:float,height:float)->float:
    if base and height:
        return (base*height)/2
    else:
        return None",Code,Human
2173,"def cal_dist_from_orign(x:float,y:float)->float:
    return (x**2+y**2)**(1/2)",Code,Human
2174,"def cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:
    return ((x1-x2)**2+(y1-y2)**2)**(1/2)",Code,Human
2175,"def root_type(a:float,b:float,c:float):
    if b**2-4*a*c >= 0:
        return 'real'
    else:
        return 'imaginary'",Code,Human
2176,"def sum_of_roots(a:float,c:float):
    if a:
        return c/a
    else:
        return None",Code,Human
2177,"def prod_of_roots(a:float,b:float):
    if a:
        return -b/a
    else:
        return None",Code,Human
2178,"def roots_of_qad_eq(a:float,b:float,c:float):
    d = b**2-4*a*c
    if d >= 0:
        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a
    else:
        return None",Code,Human
2179,"def find_profit_or_loss(cp,sp):
    if cp > sp:
        return 'loss', cp-sp
    elif cp < sp:
        return 'profit', sp-cp
    else:
        return 'no profit or loss', 0",Code,Human
2180,"def cal_area_rect(length, breadth):
    return length*breadth",Code,Human
2181,"def cal_area_square(side):
    return side**2",Code,Human
2182,"def cal_area_rhombus(q1,q2):
    return (q1*q2)/2",Code,Human
2183,"def cal_area_trapezium(a,b,h):
    return h*(a+b)/2",Code,Human
2184,"def cal_area_circle(r):
    pi = 3.14
    return pi*r**2",Code,Human
2185,"def cal_circumference(r):
    pi = 3.14
    return 2*pi*r",Code,Human
2186,"def cal_perimeter_rect(length, bredth):
    return 2*(length+bredth)",Code,Human
2187,"def cal_perimeter_triangle(s1,s2,s3):
    return s1+s2+s3",Code,Human
2188,"def cal_perimeter_square(side):
    return 4*side",Code,Human
2189,"def cal_perimeter_eq_triangle(a):
    return 3*a",Code,Human
2190,"def cal_perimeter_iso_triangle(s1,s2):
    return 2*s1+s2",Code,Human
2191,"def cal_area_ellipse(minor, major):
    pi = 3.14
    return pi*(minor*major)",Code,Human
2192,"def cal_cylinder_lat_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius*height",Code,Human
2193,"def cal_cone_curved_surf_area(slant_height,radius):
    pi=3.14
    return pi*radius*slant_height",Code,Human
2194,"def cal_surface_area_cube(a):
    return 6*(a**2)",Code,Human
2195,"def cal_surface_area_cuboid(l,b,h):
    return 2*(l*b+b*h+h*l)",Code,Human
2196,"def cal_area_sphere(radius):
    pi = 3.14
    return 4*pi*(radius**2)",Code,Human
2197,"def cal_area_hemisphere(radius):
    pi = 3.14
    return 2*pi*(radius**2)",Code,Human
2198,"def cal_cylinder_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius**2*+2*pi*radius*height",Code,Human
2199,"def cal_cone_lateral_surf_area(height,radius):
    pi=3.14
    return pi*radius*(((height**2)+(radius**2))**(1/2))",Code,Human
2200,"def cal_cylinder_volume(height, radius):
    pi=3.14
    return pi*(radius**2)*height",Code,Human
2201,"def cal_cone_volume(height,radius):
    pi=3.14
    return pi*(radius**2)*height/3",Code,Human
2202,"def cal_hemisphere_volume(radius:float)->float:
    pi=3.14
    return (2/3)*pi*(radius**3)",Code,Human
2203,"def cal_sphere_volume(radius:float)->float:
    pi=3.14
    return (4/3)*pi*(radius**3)",Code,Human
2204,"def cal_cuboid_volume(length:float, breadth:float, height:float)->float:
    return length*breadth*height",Code,Human
2205,"def cal_cube_volume(side:float)->float:
    return side**3",Code,Human
2206,"def cal_speed(distance:float,time:float)->float:
    return distance/time",Code,Human
2207,"def cal_distance(time:float,speed:float)->float:
    return time*speed",Code,Human
2208,"def cal_time(distance:float,speed:float)->float:
    return distance/speed",Code,Human
2209,"def cal_torque(force:float,theta:float,r:float)->float:
    import math
    return force*r*math.sin(theta)",Code,Human
2210,"def cal_angular_velocity(angular_dist:float,time:float)->float:
    return angular_dist/time",Code,Human
2211,"def cal_focal_length_of_lense(u:float,v:float)->float:
    return (u*v)/(u+v)",Code,Human
2212,"def cal_gforce(mass1:float,mass2:float, distance:float)->float:
    g = 6.674*(10)**(-11)
    return (g*mass1*mass2)/(distance**2)",Code,Human
2213,"def cal_current(resistance:float, voltage:float)->float:
    return voltage/resistance",Code,Human
2214,"def cal_total_cap_in_parallel(cap_list:list)->float:
    return sum(cap_list)",Code,Human
2215,"def cal_total_res_in_parallel(res_list:list)->float:
    return sum([1/r for r in res_list])",Code,Human
2216,"def cal_total_res_in_series(res_list:list)->float:
    return sum(res_list)",Code,Human
2217,"def cal_mi_ring(mass:float,radius:float)->float:
    return mass*(radius**2)",Code,Human
2218,"def cal_mi_sphere(mass:float,radius:float)->float:
    return (7/5)*mass*(radius**2)",Code,Human
2219,"def find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:
    r = 8.3145",Code,Human
2220,return (n*r*temp)/volume,Code,Human
2221,"def find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:
    r = 8.3145",Code,Human
2222,return (n*r*temp)/pressure,Code,Human
2223,"def find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:
    r = 8.3145",Code,Human
2224,return (pressure*volume)/n*r,Code,Human
2225,"def cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity + accelration*time",Code,Human
2226,"def cal_displacement(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity*time + .5*accelration*(time)**2",Code,Human
2227,"def cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:
    return initail_quatity*((1/2)**(time_elapsed/half_life))",Code,Human
2228,"def cal_sp_after_discount(sp:float,discount:float)->float:
    return sp*(1 - discount/100)",Code,Human
2229,"def get_si(p:float, r:float, t:float)->float:
    return (p*r*t)/100",Code,Human
2230,"def get_ci(p:float, r:float, t:float, n:float)->float:
    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)",Code,Human
2231,"def cal_energy_by_mass(mass:float)->float:
    c = 300000
    return mass * (c**2)",Code,Human
2232,"def cal_ke(mass:float,velocity:float)->float:
    return (mass*(velocity)**2)/2",Code,Human
2233,"def cal_pe(mass:float,height:float)->float:
    g = 9.8
    return (mass*g*height)",Code,Human
2234,"def cal_electrostatic_force(q1,q2,d):
    k = 9*(10**9)
    return (k*q1*q2)/(d**2)",Code,Human
2235,"def cal_density(mass,volume):
    return (mass/volume)",Code,Human
2236,"def temp_converter(temp,temp_given_in = 'f'):",Code,Human
2237,if temp_given_in.lower() == 'f':,Code,Human
2238,"return (temp - 32) * (5/9)
    else:",Code,Human
2239,return (temp * 9/5) + 32,Code,Human
2240,"def merge1():
    test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
    test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
    print(""The original list 1 is : "" + str(test_list1))
    print(""The original list 2 is : "" + str(test_list2))
    for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

    print(""The Merged Dictionary list : "" + str(test_list1))",Code,Human
2241,"def vertical_concatenation():
    test_list = [[""this"",""is""], [""program"", ""for""], [""vertical"",""concatenation""]]
    print(""The original list : "" + str(test_list))
    res = []
    N = 0
    while N != len(test_list):
        temp = ''
        for idx in test_list:
            try: temp = temp + idx[N]
            except IndexError: pass
        res.append(temp)
        N = N + 1
    res = [ele for ele in res if ele]
    print(""List after column Concatenation : "" + str(res))
vertical_concatenation()",Code,Human
2242,"def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):

    print(""The original list is : "" + str(test_list))
    K =k
    res = list(zip(*test_list))[K]
    print(""The Kth column of matrix is : "" + str(res))",Code,Human
2243,"def printSubArrays(arr, start, end):
    if end == len(arr):
        return
    elif start > end:
        return printSubArrays(arr, 0, end + 1)
    else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)

arr = [1, 2, 3]
printSubArrays(arr, 0, 0)",Code,Human
2244,"total = 0
def sum_nestedlist(l):
    global total
    for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]

sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)

#Write a function to find power of number using recursion
def power(N, P):
    if (P == 0 or P == 1):
        return N
    else:
        return (N * power(N, P - 1))

print(power(5, 2))",Code,Human
2245,"def f_substring():
    test_list = ['program ', 'to', 'filter', 'for', 'substring']
    print(""The original list is : "" + str(test_list))
    sub_str = 'geeks'
    i, j = 0, 5
    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
    print(""Filtered list : "" + str(res))",Code,Human
2246,"def r_punc():
    test_str = ""end, is best : for ! Nlp ;""
    print(""The original string is : "" + test_str)
    punc = r'!()-[]{};:\, <>./?@#$%^&*_~'
    for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
    print(""The string after punctuation filter : "" + test_str)",Code,Human
2247,"def gnomeSort(arr, n):
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
    return arr
arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
    print(i)",Code,Human
2248,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
    holes = [0] * size
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
    print(a[i], end="" "")



#Write a function to implement stooge sort
def stoogesort(arr, l, h):
    if l >= h:
        return
    if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
    if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))

arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
    print(arr[i], end = '')

#Write a function to find the  difference between two times
def difference(h1, m1, h2, m2):

    t1 = h1 * 60 + m1
    t2 = h2 * 60 + m2
    if (t1 == t2):
        print(""Both are same times"")
        return
    else:
        diff = t2 - t1
    h = (int(diff / 60)) % 24
    m = diff % 60
    print(h, "":"", m)
difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)


#Write a function to convert time from 12 hour to 24 hour format
def convert24(str1):
    if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
    elif str1[-2:] == ""AM"":
        return str1[:-2]

    elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
    else:
        return str(int(str1[:2]) + 12) + str1[2:8]
print(convert24(""08:05:45 PM""))


#Write a function to find time for a given angle.
def calcAngle(hh, mm):
    hour_angle = 0.5 * (hh * 60 + mm)
    minute_angle = 6 * mm
    angle = abs(hour_angle - minute_angle)
    angle = min(360 - angle, angle)
    return angle


#Write a function to print all time when angle between hour hand and minute
def printTime(theta):
    for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
    print(""Input angle not valid."")
    return
theta = 90.0
printTime(theta)",Code,Human
2249,"filepath = 'data.txt'
with open(filepath, 'r') as file:
    data = file.read()
    print(f'Data: {data}')",Code,Human
2250,"def add(list):
    sum = 0
    for i in range(0, len(list)):
        sum += list[i]
    return sum",Code,Human
2251,"def check(num):
    if num > 0:
        return True
    return False",Code,Human
2252,"def ReLU(num):
    if num > 0:
        return num
    return 0",Code,Human
2253,"import re

def match(pattern, string):
    if re.match(pattern, string):
        return True
    return False",Code,Human
2254,"num1 = 2
num2 = 4

num1, num2 = num2, num1

print(num1, num2)",Code,Human
2255,"def max(list):
    return max(list)",Code,Human
2256,"import random

n = 10
a = 1
b = 100

rand = [random.randint(a, b) for i in range(n)]
print(f'list : {rand}')",Code,Human
2257,"string = 'the sun is shining'

words = string.split()
print(words)",Code,Human
2258,"import sys
args = sys.argv 
print(args)",Code,Human
2259,"string = 'SFG';
print(string.lower())",Code,Human
2260,"def abs_diff(num1, num2):
    return abs(num1 - num2)",Code,Human
2261,"import sys
sys.exit()",Code,Human
2262,"x = 2
print(type(x))",Code,Human
2263,"list = [3, 1, 5, 6]
result = sorted(list, reverse = True)
print(result)",Code,Human
2264,"def check_vowel(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for vowel in vowels:
        if vowel in string:
            return True
    return False",Code,Human
2265,"list = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']
result = [item for item in list if item.isalpha()]
print(result)",Code,Human
2266,"string = ' asdga \t\r'
print(string.strip())",Code,Human
2267,"x = 2
y = str(x)
print(y)",Code,Human
2268,"import math
x = 2.3
y = math.ceil(x)
print(y)",Code,Human
2269,"def print_iter(iter):
    for item in iter:
        print(item)",Code,Human
2270,"def reverse_string(string):
    return string[::-1]",Code,Human
2271,"def reverse_string(string):
    return string[::-1]

def ispalin(string):
    if string == reverse_string(string):
        return True
    return False",Code,Human
2272,"def dic_largest(dic):
    return max(dic.values())",Code,Human
2273,"def fibonacci(n):
    a, b = 0, 1
    print(a)
    print(b)
    for i in range(n - 2):
        print(a + b)
        a, b = b, a + b",Code,Human
2274,"def tokenise(string):
    return len(string.split())",Code,Human
2275,"def cube(num)
    return num * num * num",Code,Human
2276,"import math
def area_circle(radius):
    return math.pi * radius * radius",Code,Human
2277,"from datetime import date 

def calculateAge(birthDate): 
    today = date.today() 
    age = today.year - birthDate.year - 
         ((today.month, today.day) < 
         (birthDate.month, birthDate.day)) 
  
    return age",Code,Human
2278,"def simpleIntereset(principal, rate, time):
    return principal * rate * time / 100",Code,Human
2279,"def frequency(list, num):
    count = 0
    for item in list:
        if item == num:
            count = count + 1
    return count",Code,Human
2280,"x = '5'
print(ord(x))",Code,Human
2281,"def factorial(num):
    if num == 0:
        return 1
    return num * factorial(num - 1)",Code,Human
2282,"def oddeven(num):
    if num % 2 == 0:
        print('even')
    else:
        print('odd')",Code,Human
2283,"name = input()
print('Hello ' + name)",Code,Human
2284,"from datetime import datetime

now = datetime.now()
print(now)",Code,Human
2285,"def cel_to_fah(celcius):
    return 9 * celcius / 5 + 32",Code,Human
2286,"list = ['a', 'bc', 'd', 'e']
element = 'bc'
list.remove(element)",Code,Human
2287,"Set1 = {""1"",""2"",""3""}
Set2 = {""a"",""b"",""c""}
Set = Set1.union(Set2)

print(Set)

#write a program to remove common element between two sets

s1 = {""apple"", ""banana"", ""cherry""}
s2 = {""google"", ""microsoft"", ""apple""}

s1.difference_update(s2)
print(s1)",Code,Human
2288,"a= ""Hello World""
x= a.find(""r"")
print(x)",Code,Human
2289,"import math
x = 100
base = 5
print(math.log(x,base))",Code,Human
2290,"list1 = [""a"", ""b"", ""c""]
list2 = [1, 2, 3]

list3 = list1 + list2
print(list3)",Code,Human
2291,"import re 

def check(email):    
    regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    if(re.search(regex,email)):  
        print(""Valid Email"")            
    else:  
        print(""Invalid Email"")",Code,Human
2292,"import datetime
dd = int(input(""date: ""))
mm = int(input(""month: ""))
yy = int(input(""year: ""))
a = datetime.date(yy,mm,dd)
x = date.today()
print(x-a)",Code,Human
2293,"year = int(input(""Year: ""))

if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(""{0} is a leap year"".format(year))
       else:
           print(""{0} is not a leap year"".format(year))
   else:
       print(""{0} is a leap year"".format(year))
else:
   print(""{0} is not a leap year"".format(year))",Code,Human
2294,"def replacewith_K(test_str, K): 

    vowels = 'AEIOUaeiou'
    for ele in vowels: 
        test_str = test_str.replace(ele, K) 
  
    return test_str",Code,Human
2295,"def mean(list):
    sum = 0
    for num in list:
        sum += num
    return sum / len(list)",Code,Human
2296,"class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart",Code,Human
2297,"from itertools import product 
test_dict = {'month' : [1, 2, 3], 
             'name' : ['Jan', 'Feb', 'March']} 
 
print(""The original dictionary is : "" + str(test_dict)) 
  
 

res = dict(zip(test_dict['month'], test_dict['name'])) 

print(""Flattened dictionary : "" + str(res))",Code,Human
2298,"test_list = [1, 3, 5, 6, 3, 5, 6, 1] 
print (""The original list is : "" +  str(test_list)) 
  
res = [] 
for i in test_list: 
    if i not in res: 
        res.append(i) 
  
print (""The list after removing duplicates : "" + str(res))",Code,Human
2299,"ls = [1,2,3,4,5,6,7,8,10,22]
sum = 0
for i in ls:
    if i % 2 == 0:
        sum += i
print(sum)",Code,Human
2300,"filename = 'file1.txt'
string = ""programming in \n python""
f1 = open(filename,'w')
f1.write(string)
f1.close()",Code,Human
2301,"def isprime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True",Code,Human
2302,"binaryNum = [0] * n; 
i = 0; 
while (n > 0):  
    binaryNum[i] = n % 2; 
    n = int(n / 2); 
    i += 1; 

for j in range(i - 1, -1, -1): 
    print(binaryNum[j], end = """")",Code,Human
2303,"import math
def checksquare(num):
    x = int(math.sqrt(num))
    if x * x == num:
        return True
    return False",Code,Human
2304,"import math
num = 3
print(math.sin(num))",Code,Human
2305,"import math
def calc_hypotenuse(base, height):
    return math.sqrt(base * base + height * height)",Code,Human
2306,"def sum_of_digits(num):
    sum = 0
    while(num > 0):
        sum += num % 10
        num = num // 10
    return sum",Code,Human
2307,"import re 
  
def Find(string): 
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url]",Code,Human
2308,"def dot(l1, l2):
    return sum(x*y for x,y in zip(l1, l2))",Code,Human
2309,"def height_into_cms(feet, inches):
    ininches = feet * 12 + inches
    return ininches * 2.54",Code,Human
2310,"def cel_to_kel(celcius):
    return celcius + 273",Code,Human
2311,"l1 = [1, 2, 3, 4]
l2 = [5, 8, 7, 0]

res = []
for i in range(len(l1)):
    res.append(l1[i] - l2[i])

print(res)",Code,Human
2312,"def bmi(height, weight):
    return weight / (height * height)",Code,Human
2313,"def area_triangle(base, height):
    return 0.5 * base * height",Code,Human
2314,"num1 = 5
num2 = 10
print(num1 | num2)",Code,Human
2315,"def kgs_to_pounds(weight_kg):
    return weight_kg * 2.2",Code,Human
2316,"def miles_to_kms(dist):
    return dist * 1.609",Code,Human
2317,"def calspeed(dist, time):
    return dist / time",Code,Human
2318,"def count_vowels(sentence):
   count = 0
   for letter in sentence:
      if letter in ""aeiouAEIOU"":
         count += 1
   return count",Code,Human
2319,"def is_palindrome(string):
   return string == string[::-1]",Code,Human
2320,"n1 = 1
n2 = 1
n = 5
for _ in range(n):
   n1, n2 = n2, n1 + n2
print(n2)",Code,Human
2321,"def get_squares(n):
   return [i*i for i in range(n)]",Code,Human
2322,"def filter_even(nums):
   return list(filter(lambda num: num % 2 == 0, nums))",Code,Human
2323,"def filter_odd(nums):
   return list(filter(lambda num: num % 2 == 1, nums))",Code,Human
2324,"from functools import reduce
nums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]
total_sum = reduce(lambda a, b: a + b, nums)
print(f'Sum: {total_sum}')",Code,Human
2325,"numbers = [1, 2, 2, 3, 4, 4, 5, 6]
unique = set(numbers)
print(f'Unique numbers: {list(unique)}')",Code,Human
2326,"string = 'The quick brown fox jumps over the lazy dog'
countmap = {}
for letter in string:
   if letter in countmap:
      countmap[letter] += 1
   else:
      countmap[letter] = 1
print(f'Count of letters: {countmap}')",Code,Human
2327,"def repeat_string(string, frequency):
   return string * frequency",Code,Human
2328,"string = 'The quick brown fox jumps over the lazy dog'
print(string.title())",Code,Human
2329,"def merge_dictionaries(dict1, dict2):
   return {**dict1, **dict2}",Code,Human
2330,"keys = [1, 2, 3]
values = ['aye', 'bee', 'sea']
dictionary = dict(zip(keys, values))",Code,Human
2331,"def invert_dict(dictionary):
   inverted_dict = {value: key for key, value in dictionary.items()}
   return inverted_dict",Code,Human
2332,"from datetime import date
date1 = date(2020, 10, 25)
date2 = date(2020, 12, 25)
print(f'Difference between dates: {(date2 - date1).days}')",Code,Human
2333,"def get_weighted_average(numbers, weightage):
   return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)",Code,Human
2334,"year = 2000
if (year % 4) == 0:
   if (year % 100) == 0:
      if (year % 400) == 0:
         print(""{0} is a leap year"".format(year))
      else:
         print(""{0} is not a leap year"".format(year))
   else:
      print(""{0} is a leap year"".format(year))
else:
   print(""{0} is not a leap year"".format(year))",Code,Human
2335,"num = 407
if num > 1:
   for i in range(2,num):
      if (num % i) == 0:
         print(num,""is not a prime number"")
         break
   else:
      print(num,""is a prime number"")
else:
   print(num,""is not a prime number"")",Code,Human
2336,"lower = 900
upper = 1000
for num in range(lower, upper + 1):
   if num > 1:
      for i in range(2, num):
         if (num % i) == 0:
               break
      else:
         print(num)",Code,Human
2337,"def get_sorted_words(sentence):
   words = [word for word in sentence.split()]
   words.sort()
   return words",Code,Human
2338,"def remove_punctuations(sentence):
   punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
   no_punct = ''
   for char in sentence:
      if char not in punctuations:
         no_punct = no_punct + char
   return no_punct",Code,Human
2339,"def fib(n):
   if n <= 1:
      return n
   else:
      return (fib(n-1) + fib(n-2))",Code,Human
2340,"def sum_of_nums(n):
   if n <= 1:
      return n
   else:
      return n + sum_of_nums(n-1)",Code,Human
2341,"def fact(n):
   if n == 1:
      return n
   else:
      return n * fact(n-1)",Code,Human
2342,"num = 320
for i in range(1, num + 1):
   if num % i == 0:
      print(i)",Code,Human
2343,"def lcm(x, y):
   if x > y:
      greater = x
   else:
      greater = y
   
   while(True):
      if((greater % x == 0) and (greater % y == 0)):
         lcm = greater
         break
      greater += 1
   
   return lcm",Code,Human
2344,"def gcd(x, y):
   if x > y:
      smaller = y
   else:
      smaller = x

   for i in range(1, smaller + 1):
      if((x % i == 0) and (y % i == 0)):
         gcd = i
   
   return gcd",Code,Human
2345,"character = 'x'
print(f'The ASCII value of {character} is {ord(character)}')",Code,Human
2346,"value = 65
print(f'The ASCII value {value} is of the character {chr(value)}')",Code,Human
2347,"def print_binary(dec):
   print(bin(dec))",Code,Human
2348,"def print_octal(dec):
   print(oct(dec))",Code,Human
2349,"def print_hexadecimal(dec):
   print(hex(dec))",Code,Human
2350,"num = 16
sum = 0
while (num > 0):
   sum += num
   num -= 1
print(f'The sum is {sum}')",Code,Human
2351,"def count_lines(filename):
   with open(filename, 'r') as f:
      contents = f.read().split('\n')
      return len(contents)",Code,Human
2352,"from datetime import datetime
now = datetime.now()
print(now)",Code,Human
2353,"import os
filename, extension = os.path.splitext('/path/to/some/file.ext')",Code,Human
2354,"odd = [1, 3, 5, 7, 9]
even = [2, 4, 6, 8, 10]
odd.extend(even)",Code,Human
2355,"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print(random.choice(vowels))",Code,Human
2356,"import random
heads = 0
tails = 0
for i in range(100):
   if(random.choice([True, False])):
      heads += 1
   else:
      tails += 1
print(f'{heads} heads, {tails} tails')",Code,Human
2357,"list_a = [1, 2, 3, 4, 5, 6, 7]
list_b = [2, 4, 6, 8, 10]
print(f'Common elements: { set(list_a).intersection(set(list_b)) }')",Code,Human
2358,"for i in range(20):
   print(i*i)",Code,Human
2359,"sentence = 'The Quick Brown Fox'
lowercase = 0
uppercase = 0
for c in sentence:
   if c.isupper():
      uppercase += 1
   elif c.islower():
      lowercase += 1
   else:
      pass
print(f'Lowercase: {lowercase}, Uppercase: {uppercase}')",Code,Human
2360,"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
   if c.isdigit():
      digits += 1
   elif c.isalpha():
      letters += 1
   else:
      pass
print(f'Digits: {digits}, Letters: {letters}')",Code,Human
2361,"def printn(string, n):
   print(string * n)",Code,Human
2362,"square_dict = {}
for i in range(1, 11):
   square_dict[i] = i*i",Code,Human
2363,"class Person:
   def __init__(self, name):
      self.name = name",Code,Human
2364,"def print_shorter(str1, str2):
   if (len(str1) > len(str2)):
      print(str2)
   else:
      print(str1)",Code,Human
2365,"word_freq = {}
line = 'how many how words does this many have'
for word in line.split():
   word_freq[word] = word_freq.get(word, 0) + 1
print(word_freq)",Code,Human
2366,"def square_numbers(nums):
   return [i*i for i in nums]",Code,Human
2367,"binary_num = '1010101'
decimal_num = int(binary_num, 2)
print(decimal_num)",Code,Human
2368,"octal_num = '17'
decimal_num = int(octal_num, 8)
print(decimal_num)",Code,Human
2369,"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)",Code,Human
2370,"sentence = 'the quick brown fox jumps'
sorted_words = sentence.split(' ')
sorted_words.sort()
print(' '.join(sorted_words))",Code,Human
2371,"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')",Code,Human
2372,"def calculate_rect_properties(width, height):
   return {
      'perimeter': 2 * (width + height),
      'area': width * height
   }",Code,Human
2373,"sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))",Code,Human
2374,"sentence = 'the quick brown fox'
print(sentence[::2])",Code,Human
2375,"sentence = 'the quick brown fox'
print(sentence[::3])",Code,Human
2376,"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_odd_nums = [i for i in nums if i % 2 == 0]",Code,Human
2377,"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_even_nums = [i for i in nums if i % 2 == 1]",Code,Human
2378,"import random
print(random.sample(range(100, 200), 5))",Code,Human
2379,"import random
print(random.sample([i for i in range(10, 100) if i%2 == 0], 5))",Code,Human
2380,"import random
print(random.sample([i for i in range(10, 100) if i%2 == 1], 5))",Code,Human
2381,"import random
print(random.sample([i for i in range(10, 100) if i%4 == 0], 5))",Code,Human
2382,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
sum_list = [a+b for (a,b) in zip(list1, list2)]
print(sum_list)",Code,Human
2383,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
diff_list = [a-b for (a,b) in zip(list1, list2)]
print(diff_list)",Code,Human
2384,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
prod_list = [a*b for (a,b) in zip(list1, list2)]
print(prod_list)",Code,Human
2385,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
quot_list = [a/b for (a,b) in zip(list1, list2)]
print(quot_list)",Code,Human
2386,"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print([random.choice(vowels) for _ in range(5)])",Code,Human
2387,"cube_dict = {}
for i in range(1, 11):
   cube_dict[i] = i ** 3",Code,Human
2388,"import sys
string_var = 'string variable'
print(sys.getsizeof(string_var))",Code,Human
2389,"def join_string_parts(str_list):
   return "" "".join(str_list)",Code,Human
2390,"num = 12345
reversed = int(str(num)[::-1])
print(reversed)",Code,Human
2391,"values = 'one,two,three,four,five'
items = values.split(',')
items.sort()
print(','.join(items))",Code,Human
2392,"sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)",Code,Human
2393,"my_tuple = (1, 2, 3)
n = 3
print(my_tuple * 3)",Code,Human
2394,"num1 = 2
num2 = 4
num3 = 6
print(num1 * num2 * num3)",Code,Human
2395,"n = 10
sum = 0
while n > 0:
   sum += n
   n -= 1
print(sum)",Code,Human
2396,"num = 5
fact = 1
while num > 0:
   fact *= num
   num -= 1
print(fact)",Code,Human
2397,"def get_factors(num):
   factors = []
   for i in range(1, num + 1):
      if num % i == 0:
         factors.append(i)
   return factors",Code,Human
2398,"def is_prod_even(num1, num2):
   prod = num1 * num2
   return not prod % 2",Code,Human
2399,"def is_prod_even(num1, num2):
   sum = num1 + num2
   return not sum % 2",Code,Human
2400,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])",Code,Human
2401,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])",Code,Human
2402,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[4:])",Code,Human
2403,"def make_negative_zero(items):
   return [0 if item < 0 else item for item in items]",Code,Human
2404,"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)",Code,Human
2405,"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)",Code,Human
2406,"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')",Code,Human
2407,"length = 10
width = 5
print(f'Area: {length * width}')",Code,Human
2408,"side = 5
print(f'Area: {side * side}')",Code,Human
2409,"number_dict = {
   1: 'one',
   2: 'two',
   3: 'three',
   4: 'four',
   5: 'five'
}",Code,Human
2410,"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]",Code,Human
2411,"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]

###",Code,Human
2412,,Code,Human
2413,"def make_all_positive(nums):
   return [num if num > 0 else -num for num in nums]",Code,Human
2414,"def make_all_negative(nums):
   return [num if num < 0 else -num for num in nums]",Code,Human
2415,"def get_punctuations(sentence):
   punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
   used_punctuation = set()
   for char in sentence:
      if char in punctuations:
         used_punctuation.add(char)
   return used_punctuation",Code,Human
2416,"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))",Code,Human
2417,"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))",Code,Human
2418,"myset = {1, 2, 4, 7}
mylist = list(myset)",Code,Human
2419,"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}",Code,Human
2420,"def add_even_odd_list(l1:list,l2:list)-> list:
    return [a+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0]",Code,Human
2421,"def strip_vowels(input_str:str)->str:

    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]
    return ''.join(list(filter(lambda x: x not in vowels, input_str)))",Code,Human
2422,"def relu_list(input_list:list)->list:
    return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]",Code,Human
2423,"def factorial(n):
    if n == 0 or n ==1:
        return 1
    else:
        return n*factorial(n-1)",Code,Human
2424,"def list_length(l):
    return len(l)",Code,Human
2425,"def biggest_no(l:list)->int:
    sorted(l)",Code,Human
2426,"def print_repeatnstring(text:str, n:int)-> str:
    return text*n",Code,Human
2427,"def merge_lists(l1:list, l2:list):
    return list(zip(l1,l2))",Code,Human
2428,"def merge_lists(l1:list, l2:list):
    return list(zip(l1,l2))",Code,Human
2429,"def append_lists(l1:list, l2:list)->list:
    return l1.extend(l2)",Code,Human
2430,"def reverse_list(l1:list)->list:
    return l1[::-1]",Code,Human
2431,"def adds_listelements(l1:list, l2:list):
    return [i+j for i, j in zip(l1,l2)]",Code,Human
2432,"def sub_listelements(l1:list, l2:list):
    return [i-j for i, j in zip(l1,l2)]",Code,Human
2433,"def adds_listevenelements(l1:list, l2:list):
    return [i+j for i, j in zip(l1,l2) if i*j%2 == 0]",Code,Human
2434,"def adds_listoddelements(l1:list, l2:list):
    return [i*j for i, j in zip(l1,l2) if i*j%2 == 1]",Code,Human
2435,"def n_power(l1:list, power:int)->list:
    return [i**power for i in l1]",Code,Human
2436,"def Fibonacci(n:int)-> int:
    if n==1:
        fibonacci = 0
    elif n==2:
        fibonacci = 1
    else:
        fibonacci = Fibonacci(n-1) + Fibonacci(n-2)
    return fibonacci",Code,Human
2437,"def sin(x:float) -> float:
    import math
    return math.sin(x)",Code,Human
2438,"def derivative_sin(x:float)-> float:
    import math
    return math.cos(x)",Code,Human
2439,"def tan(x:float) -> float:
    import math
    return math.tan(x)",Code,Human
2440,"def derivative_tan(x:float)-> float:
    import math
    return (1/math.cos(x))**2",Code,Human
2441,"def cos(x:float) -> float:
    import math
    return math.cos(x)",Code,Human
2442,"def derivative_cos(x:float)-> float:
    import math
    return -(math.sin(x))",Code,Human
2443,"def exp(x) -> float:
    import math
    return math.exp(x)",Code,Human
2444,"def derivative_exp(x:float) -> float:
    import math
    return math.exp(x)",Code,Human
2445,"def log(x:float)->float:
    import math
    return math.log(x)",Code,Human
2446,"def derivative_log(x:float)->float:
    return (1/x)",Code,Human
2447,"def relu(x:float) -> float:
    x = 0 if x < 0 else x
    return x",Code,Human
2448,"def derivative_relu(x:float) -> float:
    x = 1 if x > 0 else 0
    return x",Code,Human
2449,"def clear_memory():
    import gc
    gc.collect()",Code,Human
2450,"def time_it(fn, *args, repetitons= 1, **kwargs):
    import time
    total_time = []

    for _ in range(repetitons):
        start_time = time.perf_counter()
        fn(*args,**kwargs)
        end_time = time.perf_counter()
        ins_time = end_time - start_time
        total_time.append(ins_time)
    return sum(total_time)/len(total_time)",Code,Human
2451,"def check_value(d:dict, value)->bool:
    return any(v == value for v in dict.values())",Code,Human
2452,"def count_value(d:dict, value)->bool:
    return list(v == value for v in dict.values()).count(True)",Code,Human
2453,"def check_listvalue(l:list, value)->bool:
    return value in l",Code,Human
2454,"def check_tuplevalue(l:tuple, value)->bool:
    return value in l",Code,Human
2455,"def str_lowercase(s:str):
    return s.lower()",Code,Human
2456,"def str_uppercase(s:str):
    return s.upper()",Code,Human
2457,"def clean_str(s):
    import re
    return re.sub('[^A-Za-z0-9]+', '', s)",Code,Human
2458,"def ascending_sort(l:list):
    sorted(l, reverse=False)",Code,Human
2459,"def descending_sort(l:list):
    sorted(l, reverse=True)",Code,Human
2460,"def descending_dict_valuesort(d:dict):
    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[1])}",Code,Human
2461,"def ascending_dict_valuesort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}",Code,Human
2462,"def descending_dict_keysort(d:dict):
    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[0])}",Code,Human
2463,"def ascending_dict_keysort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}",Code,Human
2464,"def replace_values(s:str, old, new)->str:
    s.replace(old, new)",Code,Human
2465,"def join_elements(l:list)-> str:
    return (''.join(str(l)))",Code,Human
2466,"def split_elements(s:str, seperator)-> list:
    return s.split(seperator)",Code,Human
2467,"def sum_elements(l:list):
    return sum(l)",Code,Human
2468,"def sum_even_elements(l:list):
    return sum([i for i in l if i%2==0])",Code,Human
2469,"def sum_odd_elements(l:list):
    return sum([i for i in l if i%2==1])",Code,Human
2470,"def counter(fn):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count += 1
        print(f'Function {fn.__name__} was called {count} times.')
        return fn(*""args, **kwargs)    
    return inner",Code,Human
2471,"def remove_duplicatesinlist(lst):
    return len(lst) == len(set(lst))",Code,Human
2472,"def timed(fn):
    from time import perf_counter
    from functools import wraps

    @wraps(fn) 
    def inner(*args, **kwargs):
        start = perf_counter()
        result = fn(*args, **kwargs)
        end = perf_counter()
        elapsed = end - start

        args_ = [str(a) for a in args]
        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]
        all_args = args_ + kwargs_
        args_str = ','.join(all_args)",Code,Human
2473,"print(f'{fn.__name__}({args_str}) took {elapsed} seconds')

        return result",Code,Human
2474,return inner,Code,Human
2475,"input_string = input(""Enter a list element separated by space "")
list1  = input_string.split()
input_string = input(""Enter a list element separated by space "")
list2  = input_string.split()
list1 = [int(i) for i in list1] 
list2 = [int(i) for i in list2] 
result = map(lambda x, y: x + y, list1, list2) 
print(list(result))",Code,Human
2476,"def stringlist_to_intlist(sList): 
  return(list(map(int, sList)))",Code,Human
2477,"def map_values(*args):
  return set(zip(*args))",Code,Human
2478,"def nextSquare(): 
    i = 1;",Code,Human
2479,"while True: 
        yield i*i                 
        i += 1",Code,Human
2480,def fib(limit):,Code,Human
2481,"a, b = 0, 1",Code,Human
2482,"while a < limit: 
        yield a 
        a, b = b, a + b",Code,Human
2483,"userInput = input(""Enter a tuple:"")
x = map(lambda x:len(x), tuple(x.strip() for x in userInput.split(',')))
print(list(x))",Code,Human
2484,"def find_evennumbers(input_list):
  list_using_comp = [var for var in input_list if var % 2 == 0] 
  return list_using_comp",Code,Human
2485,"def dict_using_comp(list1, list2):
  dict_using_comp = {key:value for (key, value) in zip(list1, list2)} 
  return dict_using_comp

#Write a function to get list of profanity words from Google profanity URL
def profanitytextfile():
    url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
    html = urlopen(url).read()
    soup = BeautifulSoup(html, features=""html.parser"")

    textlist = []
    table = soup.find('table')
    trs = table.find_all('tr')
    for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
    return textlist

#write a python program to find the biggest character in a string 
bigChar = lambda word: reduce(lambda x,y: x if ord(x) > ord(y) else y, word)

#write a python function to sort list using heapq 
def heapsort(iterable):
    from heapq import heappush, heappop
    h = []
    for value in iterable:
        heappush(h, value)
    return [heappop(h) for i in range(len(h))]",Code,Human
2486,"def take(n, iterable):    
    import itertools
    return list(itertools.islice(iterable, n))",Code,Human
2487,"def prepend(value, iterator):    
    import itertools
    return itertools.chain([value], iterator)",Code,Human
2488,"def tail(n, iterable):    
    from collections import deque
    return iter(deque(iterable, maxlen=n))",Code,Human
2489,"def consume(iterator, n=None):
    import itertools
    from collections import deque
    ""Advance the iterator n-steps ahead. If n is None, consume entirely.""",Code,Human
2490,if n is None:,Code,Human
2491,"deque(iterator, maxlen=0)
    else:",Code,Human
2492,"next(itertools.islice(iterator, n, n), None)",Code,Human
2493,"def nth(iterable, n, default=None):
    from itertools import islice
    return next(islice(iterable, n, None), default)",Code,Human
2494,"def all_equal(iterable):
    from itertools import groupby
    g = groupby(iterable)
    return next(g, True) and not next(g, False)",Code,Human
2495,"def quantify(iterable, pred=bool):
    return sum(map(pred, iterable))",Code,Human
2496,"def pad_none(iterable):
    """"""Returns the sequence elements and then returns None indefinitely.
    Useful for emulating the behavior of the built-in map() function.
    """"""
    from itertools import chain, repeat
    return chain(iterable, repeat(None))",Code,Human
2497,"def ncycles(iterable, n):
    from itertools import chain, repeat
    return chain.from_iterable(repeat(tuple(iterable), n))",Code,Human
2498,"def dotproduct(vec1, vec2):
    return sum(map(operator.mul, vec1, vec2))",Code,Human
2499,"def flatten(list_of_lists):
    from itertools import chain
    return chain.from_iterable(list_of_lists)",Code,Human
2500,"def repeatfunc(func, times=None, *args):
    from itertools import starmap, repeat
    if times is None:
        return starmap(func, repeat(args))
    return starmap(func, repeat(args, times))",Code,Human
2501,"def pairwise(iterable):
    from itertools import tee
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)",Code,Human
2502,"def grouper(iterable, n, fillvalue=None):
    from itertools import zip_longest",Code,Human
2503,"args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)",Code,Human
2504,"def roundrobin(*iterables):    
    from itertools import islice, cycle",Code,Human
2505,"num_active = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:",Code,Human
2506,"num_active -= 1
            nexts = cycle(islice(nexts, num_active))",Code,Human
2507,"def partition(pred, iterable):
    from itertools import filterfalse, tee",Code,Human
2508,"t1, t2 = tee(iterable)
    return filterfalse(pred, t1), filter(pred, t2)",Code,Human
2509,"def powerset(iterable):
    ""powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)""
    from itertools import chain, combinations
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

list(powerset([1,2,3]))",Code,Human
2510,"def unique_everseen(iterable, key=None):
    from itertools import filterfalse",Code,Human
2511,,Code,Human
2512,"seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element",Code,Human
2513,"def unique_justseen(iterable, key=None):
    import operator
    from itertools import groupby",Code,Human
2514,,Code,Human
2515,"return map(next, map(operator.itemgetter(1), groupby(iterable, key)))",Code,Human
2516,"def iter_except(func, exception, first=None):
    """"""Converts a call-until-exception interface to an iterator interface.
    Like builtins.iter(func, sentinel) but uses an exception instead
    of a sentinel to end the loop.
    Examples:
        iter_except(s.pop, KeyError)",Code,Human
2517,"""""""
    try:
        if first is not None:
            yield first()",Code,Human
2518,"while True:
            yield func()
    except exception:
        pass",Code,Human
2519,"def random_product(*args, repeat=1):
    import random
    pools = [tuple(pool) for pool in args] * repeat
    return tuple(map(random.choice, pools))",Code,Human
2520,"def random_permutation(iterable, r=None):
    import random
    pool = tuple(iterable)
    r = len(pool) if r is None else r
    return tuple(random.sample(pool, r))",Code,Human
2521,"def random_combination(iterable, r):
    import random
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.sample(range(n), r))
    return tuple(pool[i] for i in indices)",Code,Human
2522,"def random_combination_with_replacement(iterable, r):
    import random
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.choices(range(n), k=r))
    return tuple(pool[i] for i in indices)",Code,Human
2523,"def index(a, x):
    from bisect import bisect_left    
    i = bisect_left(a, x)
    if i != len(a) and a[i] == x:
        return i
    raise ValueError",Code,Human
2524,"def find_lt(a, x):
    from bisect import bisect_left  
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError",Code,Human
2525,"def find_le(a, x):
    from bisect import bisect_right  
    i = bisect_right(a, x)
    if i:
        return a[i-1]
    raise ValueError",Code,Human
2526,"def find_gt(a, x):
    from bisect import bisect_right 
    i = bisect_right(a, x)
    if i != len(a):
        return a[i]
    raise ValueError",Code,Human
2527,"def find_ge(a, x):
    from bisect import bisect_left 
    i = bisect_left(a, x)
    if i != len(a):
        return a[i]
    raise ValueError",Code,Human
2528,"def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
    from bisect import bisect
    i = bisect(breakpoints, score)
    return grades[i]",Code,Human
2529,"import re
text = input(""Enter a string: "")
for m in re.finditer(r""\w+ly"", text):
    print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))",Code,Human
2530,"def read_csv(filename):
    import csv
    with open(filename, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            print(row)",Code,Human
2531,"test_list = [4, 5, 8, 9, 10] 
list(zip(range(len(test_list)), test_list))",Code,Human
2532,"def split(word): 
    return [char for char in word]",Code,Human
2533,"def pickle_data(data, pickle_file):
  import pickle
  with open(pickle_file, 'wb') as f:
      pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
  return None",Code,Human
2534,"def load_pickle_data(pickle_file):
  import pickle
  with open(pickle_file, 'rb') as f:
      data = pickle.load(f)
  return data",Code,Human
2535,"def isPalindrome(s):
    return s == s[::-1]",Code,Human
2536,"def symmetry(a): 
      
    n = len(a) 
    flag = 0
      
    if n%2: 
        mid = n//2 +1
    else: 
        mid = n//2
          
    start1 = 0
    start2 = mid 
      
    while(start1 < mid and start2 < n): 
          
        if (a[start1]== a[start2]): 
            start1 = start1 + 1
            start2 = start2 + 1
        else: 
            flag = 1
            break
       
    return flag",Code,Human
2537,"def rev_sentence(sentence):  
  
    words = sentence.split(' ')  
  
    reverse_sentence = ' '.join(reversed(words))  
  
    return reverse_sentence",Code,Human
2538,"string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1): 
    print(""NO"") 
else: 
    print(""YES"")",Code,Human
2539,"str1 = ""great way to learn!""
print(len(str1))",Code,Human
2540,"test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()} 
print(""The words frequency: "" + str(res))",Code,Human
2541,"str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:  
    if len(word)%2==0: 
        print(word)",Code,Human
2542,"str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou""))>=5: 
  print('accepted') 
else: 
  print(""not accepted"")",Code,Human
2543,"str1=""ababccd12@""
str2=""bb123cca1@""

matched_chars = set(str1) & set(str2) 
print(""No. of matching characters are : "" + str(len(matched_chars)) )",Code,Human
2544,"str1 = ""what a great day!""
print("""".join(set(str1)))",Code,Human
2545,"str1=""watch the match""
all_freq = {} 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)
print(""Minimum of all characters is: "" + str(res))",Code,Human
2546,"str1 = ""watch the match""
all_freq = {} 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = max(all_freq, key = all_freq.get)
print(""Maximum of all characters is: "" + str(res))",Code,Human
2547,"str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5

res_str = [] 
      
text = str1.split("" "") 
      
for x in text: 

    if len(x) < str_len: 
        res_str.append(x) 

print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))",Code,Human
2548,"str1 = ""part of speech""
delimiter = ""-""

list_str = str1.split("" "")

new_str = delimiter.join(list_str)

print(""Delimited String is: "" + new_str)",Code,Human
2549,"str1=""01110011 a""

set1 = set(str1)

if set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:
    print(""string is binary"")
else:
    print(""string is not binary"")",Code,Human
2550,"def remove_char(string, i):

    str1 = string[ : i]  

    str2 = string[i + 1: ] 
      
    return str1 + str2",Code,Human
2551,"import re 
  
def find_urls(string): 
   
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url]",Code,Human
2552,"def UncommonWords(str1, str2): 
  
    count = {} 
      
    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1
      
    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] == 1]",Code,Human
2553,"def commonWords(str1, str2): 
  
    count = {} 
      
    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1
      
    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] > 1]",Code,Human
2554,"str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""

repl_dict = {'IISC':'It', 'Classes': 'They'}

str_list = str1.split(' ') 

res = set() 

for idx, ele in enumerate(str_list): 
    if ele in repl_dict: 
        print(str(idx) + '  '+ele)
        if ele in res: 
            str_list[idx] = repl_dict[ele] 
        else: 
            res.add(ele)

res = ' '.join(str_list)

print(""Replaced String: "" + str(res))",Code,Human
2555,"str1 = 'CoffeeDay is best for coffee and having long conversations'
  
word_list = [""best"", 'long'] 
  
repl_word = 'good'
  
res = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) 

print(""String after multiple replace : "" + str(res))",Code,Human
2556,"def rotate_left(input,d):  
  
    Lfirst = input[0 : d]  
    Lsecond = input[d :]  
    return (Lsecond + Lfirst)",Code,Human
2557,"def rotate_right(input,d):  
  
    Rfirst = input[0 : len(input)-d]  
    Rsecond = input[len(input)-d : ]  
    return (Rsecond + Rfirst)",Code,Human
2558,"str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""

replaced_str = str1.replace(substr1, substr2)

print(""String after replace :"" + str(replaced_str))",Code,Human
2559,"str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'
  
res = '' 
dig = '' 

for ele in str1: 
    if ele.isdigit(): 
        dig += ele 
    else: 
        res += ele 
  
res += dig 

print(""Strings after digits at end : "" + str(res))",Code,Human
2560,"str1 = 'week after week the numbers are increasing'
  
res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']

for idx in range(1, len(str1) - 1): 

    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): 
        res += 1
  
if str1[0] not in vow_list and str1[1] in vow_list: 
    res += 1
  
if str1[-1] not in vow_list and str1[-2] in vow_list: 
    res += 1

print(""Characters around vowels count : "" + str(res))",Code,Human
2561,"def count_space(str1): 

    count = 0
      
    for i in range(0, len(str1)): 

        if str1[i] == "" "": 
            count += 1
          
    return count",Code,Human
2562,"str1 = ""whatisthis""
  
split_string = list(''.join(str1)) 
  
print(split_string)",Code,Human
2563,"str1 = 'GoodisalwaysGoood'
  
N = 3
  
K = 2
  
res = [] 

for idx in range(0, len(str1) - N + 1): 

    if (len(set(str1[idx: idx + N])) == K): 
        res.append(str1[idx: idx + N]) 
  
print(""Extracted Strings : "" + str(res))",Code,Human
2564,"import re 
  
str1 = 'count001'

res = re.sub(r'[0-9]+$', 
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",  
             str1) 
      
print(""Incremented numeric String : "" + str(res))",Code,Human
2565,"str1 = ""python1234""
  
total_digits = 0
total_letters = 0
  
for s in str1: 
  
    if s.isnumeric(): 
        total_digits += 1
    else: 
        total_letters += 1
  
print(""Total letters found : "", total_letters) 
print(""Total digits found : "", total_digits)",Code,Human
2566,"def check_lower(str1):
    
    for char in str1: 
        k = char.islower()   
        if k == True: 
            return True 
    if(k != 1): 
        return False",Code,Human
2567,"def check_upper(str1):
    
    for char in str1: 
        k = char.isupper()   
        if k == True: 
            return True
    if(k != 1): 
        return False",Code,Human
2568,"str1 = 'It is a glorious day'

res = len(str1.split()) 
  
print(""The number of words in string are : "" + str(res))",Code,Human
2569,"str1 = 'It is a glorious day'

res = len(str1) 

print(""The number of characters in string are : "", str(res))",Code,Human
2570,"def list_to_dict(list1, list2):
  return dict(zip(list1, list2))",Code,Human
2571,"def sort_dict_list(dict_list, sort_key):
  dict_list.sort(key=lambda item: item.get(sort_key))",Code,Human
2572,"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key=''
for key in dict_1:
  if len(key)>len(max_key):
    max_key=key
print(max_key)",Code,Human
2573,"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
  new_key = key[0].upper() + key[1:-1] + key[-1].upper()
  input_dict[new_key] = input_dict[key]
  if key != new_key:
    del input_dict[key]",Code,Human
2574,"key_val_map = {""key1"": ""length1"", ""key2"": ""len2"", ""Hello"": ""hi"", ""bingo"": ""print bingo""}
for key, val in key_val_map.items():
  if len(val) > len(key):
    print(""Bingo!"")
  else:
    print(""no bingo"")",Code,Human
2575,"def invert_dict(input_dict):
  my_inverted_dict = {value: key for key, value in input_dict.items()}
  return my_inverted_dict",Code,Human
2576,"def invert_dict_non_unique(my_dict):
  my_inverted_dict = dict()
  for key, value in my_dict.items():
      my_inverted_dict.setdefault(value, list()).append(key)
  return my_inverted_dict",Code,Human
2577,"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}",Code,Human
2578,"def mean_key_val_diff(input_dict):
  sum_diff = 0
  for key, val in input_dict.items():
    sum_diff += abs(len(val) - len(key))
  return sum_diff/len(input_dict)",Code,Human
2579,"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""}, 
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"":""bar2""}]
unique_keys = []
for d in list_of_dicts:
  for key in d:
    if key not in unique_keys:
      unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")",Code,Human
2580,"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, 
             {'tsai': 1, 'for': 10, 'geeks': 9}, 
             {'love': 4, 'tsai': [7, 3, 22, 1]}]   
N = 2
key = ""tsai""  
for sub in test_list: 
    if isinstance(sub[key], list): 
        sub[key] = sub[key][N]",Code,Human
2581,"test_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] 
res =[{} for idx in range(len(test_list))] 
idx = 0
for sub in test_list: 
	for key, val in sub.items(): 
		for ele in val: 
			res[idx][key] = ele 
			idx += 1
		idx = 0
print(""Records after conversion : "" + str(res))",Code,Human
2582,"ini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, 
            {'c':[7, 8, 9], 'd':[10, 11, 12]}] 
temp_dict = {} 
result = [] 
for ini_dict in ini_list: 
    for key in ini_dict.keys(): 
         if key in temp_dict: 
             temp_dict[key] += ini_dict[key] 
         else: 
             temp_dict[key] = ini_dict[key]   
for key in temp_dict.keys(): 
     result.append(tuple([key] + temp_dict[key])) 
print(""Resultant list of tuples: {}"".format(result))",Code,Human
2583,"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] 
res = {} 
for i, j in test_list: 
     res.setdefault(j, []).append(i) 
print(""The dictionary converted from tuple list : "" + str(res))",Code,Human
2584,"test_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}
prod_list=[]
for x in zip(*test_dict.values()):
  res = 1 
  for ele in x: 
      res *= ele
  prod_list.append(res)
res = tuple(prod_list) 
print(""The product from each index is : "" + str(res))",Code,Human
2585,"test_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} 
print(""The Pretty Print dictionary is : "") 
for sub in test_dict: 
    print(f""\n{sub}"") 
    for sub_nest in test_dict[sub]: 
        print(sub_nest, ':', test_dict[sub][sub_nest])",Code,Human
2586,"test_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, 
             'Akshat' : {'roll' : 54, 'marks' : 12},  
             'Akash' : { 'roll' : 12, 'marks' : 15}} 
sort_key = 'marks'
res = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) 
print(""The sorted dictionary by marks is : "" + str(res))",Code,Human
2587,"def lists_to_dict(test_list1, test_list2, test_list3):
  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] 
  return res",Code,Human
2588,"test_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} 
K = 3
res = {key : val for key, val in test_dict.items() 
                   if type(val) != int or val > K} 
print(""Values greater than K : "", res.keys())",Code,Human
2589,"def dict_to_tuple(input_dict):
  out_tuple = [(a, b) for a,b in input_dict.items()]
  return out_tuple",Code,Human
2590,"def flatten_dict(dd, separator ='_', prefix =''): 
    flattened =  { prefix + separator + k if prefix else k : v 
             for kk, vv in dd.items() 
             for k, v in flatten_dict(vv, separator, kk).items() 
             } if isinstance(dd, dict) else { prefix : dd } 
    return flattened",Code,Human
2591,"test_dict1 = {""tsai"" : 20, ""is"" : 36, ""best"" : 100} 
test_dict2 = {""tsai2"" : 26, ""is2"" : 19, ""best2"" : 70} 
keys1 = list(test_dict1.keys()) 
vals2 = list(test_dict2.values()) 
res = dict() 
for idx in range(len(keys1)): 
	res[keys1[idx]] = vals2[idx] 
print(""Mapped dictionary : "" + str(res))",Code,Human
2592,"test_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} 
test_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} 
prio_dict = {1 : test_dict2, 2: test_dict1} 
res = prio_dict[2].copy() 
for key, val in prio_dict[1].items(): 
    res[key] = val 
print(""The dictionary after combination : "" + str(res))",Code,Human
2593,"dict1 = {'a': 12, 'for': 25, 'c': 9} 
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300} 
for key in dict2: 
    if key in dict1: 
        dict2[key] = dict2[key] + dict1[key] 
    else: 
        pass",Code,Human
2594,"test_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} 
res = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) 
print(""List after conversion from dictionary : "", res)",Code,Human
2595,"test_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, 
             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, 
             {'tsai' : [7, 5], 'best' : [5, 7]}] 
res = dict() 
for inner_dict in test_list: 
    for inner_list in inner_dict: 
        if inner_list in res: 
            res[inner_list] += (inner_dict[inner_list]) 
        else: 
            res[inner_list] = inner_dict[inner_list]  
print(""The concatenated dictionary : "" + str(res))",Code,Human
2596,"test_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  
N = 4
res = []   
for key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: 
    res.append(key) 
print(""Top N keys are: "" + str(res))",Code,Human
2597,"test_list = [{""Gfg"" : 3, ""b"" : 7},  
             {""is"" : 5, 'a' : 10},  
             {""Best"" : 9, 'c' : 11}]  
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]   
print(""The extracted value : "" + str(res))",Code,Human
2598,"import time 
import datetime 
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1,""%d/%m/%Y"") 
timestamp = datetime.datetime.timestamp(element) 
print(timestamp)",Code,Human
2599,"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2] 
res = 1
for ele in test_list: 
    try: 
        res *= int(ele) 
    except : 
        pass
print(""Product of integers in list : "" + str(res))",Code,Human
2600,"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)",Code,Human
2601,"def extend_list(list1, list2):
    list1 = [1, 2]
    list2 = [3, 4]
    return list1.extend(list2)",Code,Human
2602,"def add_two_lists(list1, list2):
   list1 = [1, 2, 3]
   list2 = [4, 5, 6]
   sum_list = []

   for (item1, item2) in zip(list1, list2):
      sum_list.append(item1+item2)
   return sum_list",Code,Human
2603,"list1 = ['p','r','o','b','e']

print(list1[-1])",Code,Human
2604,"list1 = [11, -21, 0, 45, 66, -93] 
  
for num in list1: 
      
    if num >= 0: 
       print(num, end = "" "")",Code,Human
2605,"def multiplyList(myList) :
    result = 1
    for x in myList:
         result = result * x 
    return result",Code,Human
2606,"list1 = [10, 20, 1, 45, 99] 
  
print(""Smallest element is:"", min(list1))",Code,Human
2607,"list1 = [11, 5, 17, 18, 23, 50]  
  
for ele in list1: 
    if ele % 2 == 0: 
        list1.remove(ele) 
  
print(""New list after removing all even numbers: "", list1)",Code,Human
2608,"list1 = [11, 5, 17, 18, 23, 50]  
  
del list1[1:5] 
  
print(*list1)",Code,Human
2609,"list1 = [11, 5, 17, 18, 23, 50]  
  
unwanted_num = {11, 18} 
  
list1 = [ele for ele in list1 if ele not in unwanted_num] 
  
print(""New list after removing unwanted numbers: "", list1)",Code,Human
2610,"test_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] 
  
print(""The original list is : "" + str(test_list)) 
  
res = [ele for ele in test_list if ele.strip()] 
      
print(""List after filtering non-empty strings : "" + str(res))",Code,Human
2611,"def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]",Code,Human
2612,"l = [1, 2.0, 'hello','have', 'a', 'good', 'day'] 
  
s = 'hello'  
  
if s in l: 
    print(f'{s} is present in the list') 
else: 
    print(f'{s} is not present in the list')",Code,Human
2613,"test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] 
  
indices_list = [idx for idx in range( 
    len(test_list)) if test_list[idx] % 2 == 0] 
  

res = indices_list[-1] - indices_list[0] 
  
print(""Even elements distance : "" + str(res))",Code,Human
2614,"def emptylist():
   return list()",Code,Human
2615,"list1 = [5] * 10

print(list1)",Code,Human
2616,"def Reverse(lst): 
    return [ele for ele in reversed(lst)] 
      
lst = [10, 11, 12, 13, 14, 15] 
print(Reverse(lst))",Code,Human
2617,"list1 = [10, 21, 4, 45, 66, 93, 11]  
   
odd_nos = list(filter(lambda x: (x % 2 != 0), list1)) 
  
print(""Odd numbers in the list: "", odd_nos)",Code,Human
2618,"list1 = [11, -21, 0, 45, 66, -93] 
  
for num in list1: 
      
    if num < 0: 
       print(num, end = "" "")",Code,Human
2619,"def countX(lst, x): 
    count = 0
    for ele in lst: 
        if (ele == x): 
            count = count + 1
    return count 
  
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8] 
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))",Code,Human
2620,"def swapList(newList): 
    size = len(newList)",Code,Human
2621,"temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp 
      
    return newList 
      
newList = [12, 35, 9, 56, 24] 
  
print(swapList(newList))",Code,Human
2622,"test_list = [2323, 82, 129388, 234, 95] 
  
print(""The original list is : "" + str(test_list)) 
  
res = dict() 
for ele in test_list: 
  
    mid_idx = len(str(ele)) // 2
    key = int(str(ele)[:mid_idx]) 
    val = int(str(ele)[mid_idx:]) 
  
    res[key] = val 
  
print(""Constructed Dictionary : "" + str(res))",Code,Human
2623,"test_list = [56, 72, 875, 9, 173]  
   
K = 7
  
res = [ele for ele in test_list if str(K) in str(ele)] 
  
print(""Elements with digit K : "" + str(res))",Code,Human
2624,"input_list = [1, 2, 2, 5, 8, 4, 4, 8] 
  
l1 = [] 
  
count = 0
  
for item in input_list: 
    if item not in l1: 
        count += 1
        l1.append(item) 

print(""No of unique items are:"", count)",Code,Human
2625,"L = [4, 5, 1, 2, 9, 7, 10, 8] 
  
count = 0
  
for i in L: 
    count += i 

avg = count/len(L) 
  
print(""sum = "", count) 
print(""average = "", avg)",Code,Human
2626,"test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] 
K = 1
res = [ele for ele in test_list if len(ele) != K] 
  
print(""Filtered list : "" + str(res))",Code,Human
2627,"list1 = [1, 2, 5, 6] 
 
res = [(val, pow(val, 3)) for val in list1] 
  
print(res)",Code,Human
2628,"test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]
  
res = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] 

print(""The list tuple combination : "" + str(res))",Code,Human
2629,"test_list = [(3, 4), (6, 5), (7, 8)] 
  
res = [(sub[1], sub[0]) for sub in test_list] 
          
print(""The swapped tuple list is : "" + str(res))",Code,Human
2630,"def Sort_Tuple(tup):  
      
    lst = len(tup)  
    for i in range(0, lst):  
          
        for j in range(0, lst-i-1):  
            if (tup[j][1] > tup[j + 1][1]):  
                temp = tup[j]  
                tup[j]= tup[j + 1]  
                tup[j + 1]= temp  
    return tup",Code,Human
2631,"test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 
  
res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] 
  
print(""The filtered tuple : "" + str(res))",Code,Human
2632,"test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] 
  

print(""The original list is : "" + str(test_list)) 
  

res = [sub for sub in test_list if all(ele >= 0 for ele in sub)] 
  

print(""Positive elements Tuples : "" + str(res))",Code,Human
2633,"test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] 
print(""The original list is : "" + str(test_list)) 
  
res = [] 
for sub in test_list:                                            
    if res and res[-1][0] == sub[0]:               
        res[-1].extend(sub[1:])                         
    else: 
        res.append([ele for ele in sub])      
res = list(map(tuple, res)) 
  
print(""The extracted elements : "" + str(res))",Code,Human
2634,"test_list1 = [ [1, 2], [3, 4], [5, 6] ] 
test_list2 = [ [3, 4], [5, 7], [1, 2] ] 
  
res_list = [] 
for i in test_list1: 
    if i not in test_list2: 
        res_list.append(i) 
for i in test_list2: 
    if i not in test_list1: 
        res_list.append(i) 
          
print (""The uncommon of two lists is : "" + str(res_list))",Code,Human
2635,"def convert24(str1): 
      
    if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
        return ""00"" + str1[2:-2] 
          
    elif str1[-2:] == ""AM"": 
        return str1[:-2] 
      
    elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
        return str1[:-2] 
          
    else: 

        return str(int(str1[:2]) + 12) + str1[2:8]

#!/usr/bin/env python",Code,Human
2636,,Code,Human
2637,,Code,Human
2638,"class TreeNode:
    def __init__(self, data):
        self.data = data
        self.parent = None
        self.children =[]
    
    def add_child(self, child):
        child.parent = self
        self.children.append(child)

t = TreeNode(""Arun"")
t.add_child(TreeNode(""Shruthi""))",Code,Human
2639,,Code,Human
2640,"import os

def path_join(PARENT_DIR, DIR):
    joined_path = os.path.join(PARENT_DIR, DIR)
    return joined_path
path_join(""C:/"", ""DATA"")",Code,Human
2641,,Code,Human
2642,"def read_file(filepath='test.txt'):
    with open(filepath, 'r') as file_reader:
        f_read = file_reader.read()
    return f_read
read_file()",Code,Human
2643,,Code,Human
2644,"def read_file(filepath=None):
    if filepath:
        with open(filepath, 'r') as file_reader:
            f_read = file_reader.read()
        return f_read
    else:
        raise Exception(""filepath not found"")
read_file()",Code,Human
2645,,Code,Human
2646,"def check(x):
    if x < 10:
        raise ValueError('x should not be less than 10!')
    else:
        return x
check(9)",Code,Human
2647,,Code,Human
2648,"def check_insst(obj):
    if isinstance(obj, list):
        return ""list""
    elif isinstance(obj, dict):
        return ""dict""
    else:
        return ""unknown""
   
check_insst({})",Code,Human
2649,,Code,Human
2650,"def check_inst_tup_str(obj):
    if isinstance(obj, set):
        return ""set""
    elif isinstance(obj, tuple):
        return ""tuple""
    else:
        return ""unknown""
check_inst_tup_str({1})",Code,Human
2651,,Code,Human
2652,"class Myclass:  
    def __init__(self, attr1, attr2):
        self.attr1 = attr1
        self.attr2 = attr2

    def get_attributes_list(self):  
         return [self.attr1, self.attr2]
dress = Myclass(""pant"",""shirt"")
dress.get_attributes_list()",Code,Human
2653,,Code,Human
2654,"def A():
    B()

def B():
    print(""Inside B"")

A()",Code,Human
2655,,Code,Human
2656,"from functools import reduce

input_str = 'tsai'
res = reduce(lambda x, y: x if ord(x) > ord(y) else y, input_str)
print(f""{res}"")",Code,Human
2657,,Code,Human
2658,"from functools import reduce
input_list = [x for x in range(10)]
res = reduce(lambda x, y: x+y, [i for idx, i in enumerate(input_list) if (idx+1)%3==0])

print(f""{res}"")",Code,Human
2659,,Code,Human
2660,"f_list = [1,2,3,4]
s_list = [2,3,4,5]
res = [f_n +s_n for f_n, s_n in zip(f_list, s_list)]
print(f""{res}"")",Code,Human
2661,,Code,Human
2662,"def square_num(mynumbers):
    return list(map(lambda num: num**2,mynumbers))
square_num([1,2,3])",Code,Human
2663,,Code,Human
2664,"def combine_lists(L1, L2):
    return L1 + [items for items in L2 if items not in L1]

L1 = [1,2,3]
L2 = [2,4,3]

combine_lists(L1,L2)",Code,Human
2665,,Code,Human
2666,"def myfunc(listitems):
    final=[]
    for strchar in listitems:
        for letters in strchar:
            if letters in ('a','e','i','o','u', 'A','E','I','O','U'):
                strchar = strchar.replace(letters,"""")            
        final.append(strchar) 
    return final
    
myfunc([""rohan"", ""END""])",Code,Human
2667,,Code,Human
2668,"sample_dict = {'1':1, '2':2, '3':3}
key_list = list(sample_dict.keys())
print(f""{key_list}"")",Code,Human
2669,,Code,Human
2670,"input_list = [1,2,3,4,4,33,2,5]
dedup = list(set(input_list))
print(f""{dedup}"")",Code,Human
2671,,Code,Human
2672,"def nchar (list1,no):
    return [items[:no]+items[-no:] for items in list1]
list1 = [""ROHAN"", ""END""]
nchar(list1, 3)",Code,Human
2673,,Code,Human
2674,"def addentry (listname, addlist):
    for names,ages in addlist:
            listname.append(addlist)
    return listname
    
addentry([{'1':""A""}], [(""2"", ""B"")])",Code,Human
2675,,Code,Human
2676,"def addnames_in_dict (dictname, name):
    for i in dictname:
        dictname[i].append(name)
    return dictname
addnames_in_dict({""1"":[""A""]}, ""Arun"")",Code,Human
2677,,Code,Human
2678,"list_= [1,2,3,4]
dict_comp = {idx:value for idx,value in enumerate(list_)}
print(f""{dict_comp}"")",Code,Human
2679,,Code,Human
2680,"def add_even_num(min, max):
    return sum([i for i in range(min, max) if i%2==0])

add_even_num(1, 6)",Code,Human
2681,,Code,Human
2682,"h_letters = []

for letter in 'human':
    h_letters.append(letter)

print(f""{h_letters}"")",Code,Human
2683,,Code,Human
2684,"letters = list(map(lambda x: x, 'human'))
print(letters)",Code,Human
2685,,Code,Human
2686,"txns = [1.09, 23.56, 57.84, 4.56, 6.78]
TAX_RATE = .08
def get_price_with_tax(txn):
    return txn * (1 + TAX_RATE)
final_prices = list(map(get_price_with_tax, txns))
print(f""{final_prices}"")",Code,Human
2687,,Code,Human
2688,"import sys

print(f""{sys.version}"")",Code,Human
2689,,Code,Human
2690,"a = [3, 4, 6, 10, 11, 18]
b = [1, 5, 7, 12, 13, 19, 21]

a.extend(b)
c = sorted(a)
print(f""{c}"")",Code,Human
2691,,Code,Human
2692,"code = 'varCjjlopaxntrrgnbXrOPraiiItUuUuzaQlliyaxx*t#rgiffFoce&ntPls87C!'
code[3::4]",Code,Human
2693,,Code,Human
2694,"strin = ""Hello how are you ?""
res = strin.split()
print(f""{res}"")",Code,Human
2695,,Code,Human
2696,"dict_new = {'1':'A', '2':'B'}
tup = dict_new.items()
print(list(tup))",Code,Human
2697,,Code,Human
2698,"li = [1, 2, 3, 4]
li.remove(1)
li",Code,Human
2699,,Code,Human
2700,"import time
print(f""{time.time()}"")",Code,Human
2701,,Code,Human
2702,"class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

    def printname(self):
        print(self.firstname, self.lastname)

class Student(Person):
    pass",Code,Human
2703,,Code,Human
2704,"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""{prices}"")",Code,Human
2705,,Code,Human
2706,"import random

def get_weather_data(min, max):
    return random.randrange(min, max)

rand_num = get_weather_data(11, 20)
print(f""{rand_num}"")",Code,Human
2707,,Code,Human
2708,"min_value = 10
max_value = 10000
sum_all = sum(i * i for i in range(min_value, max_value))
print(f""{sum_all}"")",Code,Human
2709,,Code,Human
2710,"transposed = []
matrix = [[1, 2, 3, 4], [4, 5, 6, 8]]

for i in range(len(matrix[0])):
    transposed_row = []

    for row in matrix:
        transposed_row.append(row[i])
    transposed.append(transposed_row)

print(f""{transposed}"")",Code,Human
2711,,Code,Human
2712,"import threading 
  
def print_cube(num): 
    print(""Cube: {}"".format(num * num * num)) 
    
t1 = threading.Thread(target=print_cube, args=(10,)) 
t2 = threading.Thread(target=print_cube, args=(10,)) 

t1.start() 

t2.start() 

t1.join()
t2.join()",Code,Human
2713,,Code,Human
2714,"def myDecorator(func):
    def new_func(n):
        return '$' + func(n)        
    return new_func

@myDecorator
def myFunction(a):
    return(a)",Code,Human
2715,print(myFunction('100')),Code,Human
2716,"""""""Assignment8_part2_python_programs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L3UkCJFHDkuGHoibhSFxZVESxbw0NUrz
""""""

#",Code,Human
2717,"def type_conversion(typ,a):
  if(typ)=='int':
    return(int(a))
  elif(typ)=='float':
    return(float(a))
  else:
    return(str(a))

type_conversion('str',1)

#",Code,Human
2718,class Welcome(object):,Code,Human
2719,"def __init__(self, name):
        self.name = name",Code,Human
2720,,Code,Human
2721,"def welcome(self, up=False):
        if up:
            print('Hi, %s!' % self.name.upper())
        else:
            print('Hey, %s' % self.name)

w = Welcome('Geeta')           
w.welcome(up=True)

#",Code,Human
2722,"sample_dict = {1:'Hi',2:'Hello',3:'Hey'}

print(""The original dictionary : "" + str(sample_dict)) 

res = dict(reversed(list(sample_dict.items()))) 

print(""The reversed order dictionary : "" + str(res))

#",Code,Human
2723,"sample_dict = {1:'Seeta',2:'Geeta',3:'Babita'}

print(""The original dictionary : "" + str(sample_dict)) 

sample_dict = {v:k for k, v in sample_dict.items()}

print(""Inverse mapped dictionary : "", str(sample_dict))",Code,Human
2724,nterms = int(10000),Code,Human
2725,"n1, n2 = 0, 1
count = 0
fab_list = []",Code,Human
2726,"if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   while count < nterms:
       #print(n1)
       fab_list.append(n1)
       nth = n1 + n2",Code,Human
2727,"n1 = n2
       n2 = nth
       count += 1

fn = lambda x: ""FIBONACCI"" if x in fab_list else ""NOT_FIBONACCI""

print(""Given number is"",fn(20))",Code,Human
2728,"n=10
a = []
b = []
_ = [a.append(i) if i%2==0 else b.append(i) for i in range(n)]

def add(a,b):
    return [a+b for a,b in (zip(a,b))]

add(a,b)",Code,Human
2729,"vowels = ('a', 'e', 'i', 'o', 'u')
input_string = ""hello""

print('Vowel in a string',' '.join([x for x in input_string.lower() if x not in vowels]))",Code,Human
2730,"def shift_n_letters(letter, n):
    return chr((ord(letter) - 97 + n % 26) % 26 + 97) if ord(letter)>=97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)

name = ""hello""

res="""".join([shift_n_letters(x,5) for x in name])

print('Resulting string',res)",Code,Human
2731,"from functools import reduce

input_list = [x for x in range(100)]

def sum_even(it):
    return reduce(lambda x, y: x + y if (y % 2)==0 else x, it, 0)

res=sum_even(input_list)

print('Sum of even numbers in the list is ', res)",Code,Human
2732,"input_list = [x for x in range(20)]

res=reduce((lambda x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%5==0]) 
print('Sum of every 5th element in the list is', res)",Code,Human
2733,"def ds_type(ds):
  return(type(ds))

l=[1,2,3,4]
ds_type(l)",Code,Human
2734,"def remove_duplicates(lista):
    lista2 = []
    if lista: 
        for item in lista:
            if item not in lista2: #is item in lista2 already?
                lista2.append(item)
    else:
        return lista
    return lista2
print(""List with duplicates removed:"",remove_duplicates([1,2,3,3]))",Code,Human
2735,"def unique_values(v):
    return(list(set(v)))

t=[(1,2),(3,4),(4,3),(1,2)]

unique_values(t)",Code,Human
2736,"Cel = 90
 
Far = 9.0/5.0 * Cel + 32
 
print(""Temperature:"", Cel, ""Celsius = "", Far, "" F"")",Code,Human
2737,"kmh = 16
mph =  0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")",Code,Human
2738,"def greatest_common_divisor(x,y):
    print(""For"", x, ""and"", y,"","" ) 
    r=x%y
    while r>0:
        r=x%y
        if r ==0: 
            print(""the greatest common divisor is"", y,""."")
        else:
            q=y
            x=q
            y=r

greatest_common_divisor(1071,1029)",Code,Human
2739,"import re
import requests

url = ""http://checkip.dyndns.org""
request = requests.get(url)
clean = request.text.split(': ', 1)[1]
your_ip = clean.split('</body></html>', 1)[0]

print(""your IP Address is: "",  your_ip)",Code,Human
2740,"import random

LOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z')+1)))
UPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z')+1)))
DIGITS = tuple(map(str, range(0, 10)))
SPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')

SEQUENCE = (LOWERCASE_CHARS,
            UPPERCASE_CHARS,
            DIGITS,
            SPECIALS,
            )

def generate_random_password(total, sequences):
    r = _generate_random_number_for_each_sequence(total, len(sequences))

    password = []
    for (population, k) in zip(sequences, r):
        n = 0
        while n < k:
            position = random.randint(0, len(population)-1)
            password += population[position]
            n += 1
    random.shuffle(password)
    
    while _is_repeating(password):
        random.shuffle(password)
        
    return ''.join(password)

def _generate_random_number_for_each_sequence(total, sequence_number):
    """""" Generate random sequence with numbers (greater than 0).
        The number of items equals to 'sequence_number' and
        the total number of items equals to 'total'
    """"""
    current_total = 0
    r = []
    for n in range(sequence_number-1, 0, -1):
        current = random.randint(1, total - current_total - n)
        current_total += current
        r.append(current)
    r.append(total - sum(r))
    random.shuffle(r)

    return r

def _is_repeating(password):
    """""" Check if there is any 2 characters repeating consecutively """"""
    n = 1
    while n < len(password):
        if password[n] == password[n-1]:
            return True
        n += 1
    return False

if __name__ == '__main__':
    print(generate_random_password(random.randint(6, 30), SEQUENCE))",Code,Human
2741,"#get the username from a prompt
username = input(""Login: >> "")

#list of allowed users
user1 = ""Ram""
user2 = ""Mohan""

#control that the user belongs to the list of allowed users
if username == user1:
    print(""Access granted"")
elif username == user2:
    print(""Welcome to the system"")
else:
    print(""Access denied"")",Code,Human
2742,"def convert_to_minutes(num_hours):
    '''(int) -> int
    Return the number of minutes there are in
    num_hours hours.
    '''
    minutes = num_hours * 60
    return minutes

def convert_to_seconds(num_hours):
    '''(int) -> int
    Return the number of seconds there are in 
    num_hours hours.
    '''
    minutes = convert_to_minutes(num_hours)
    seconds = minutes * 60
    return seconds


min = convert_to_minutes(1)
print(min)

seconds = convert_to_seconds(1)
print(seconds)",Code,Human
2743,"import random
min = 1
max = 6

roll_again = ""yes""

while roll_again == ""yes"" or roll_again == ""y"":
    print(""Rolling the dices..."")
    print(""The values are...."")
    print(random.randint(min, max))
    print(random.randint(min, max))

    roll_again = input(""Roll the dices again?"")",Code,Human
2744,"n=int(input(""Enter number: ""))
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)",Code,Human
2745,"s1=50
s2=77
s3=87

print('Avg score is',(s1+s2+s3)/3)",Code,Human
2746,"lower=int(input(""Enter the lower limit for the range:""))
upper=int(input(""Enter the upper limit for the range:""))
for i in range(lower,upper+1):
    if(i%2!=0):
        print(i)",Code,Human
2747,"for i in range(0,25):
    if(i%2!=0 and i%3!=0):
        print(i)",Code,Human
2748,,Code,Human
2749,"str1 = 'Good'
str2 ='Morning!'",Code,Human
2750,"print('str1 + str2 = ', str1 + str2)",Code,Human
2751,"print('str1 * 3 =', str1 * 3)",Code,Human
2752,"def string_opertaion(st,conversion):
  if(conversion=='lower'):
    return(st.lower())
  elif(conversion=='upper'):
    return(st.upper())
  else:
    return(st.capitalize())

string_opertaion('AwesOME',None)",Code,Human
2753,"string=""Good Night""
print(""\nSlicing characters between "" +
    ""3rd and last character: "") 
print(string[3:-1])",Code,Human
2754,"String='welcome'

new_str = """" 
  
for i in range(len(String)): 
    if i != 2: 
        new_str = new_str + String[i] 

print(new_str)",Code,Human
2755,"string = 'This is beautiful picture'

string.replace('beautiful','good')",Code,Human
2756,"string = 'Today is bad day'
string[::-1]",Code,Human
2757,"def list_op(l1,l2,op):
  if(op=='append'):
    return(l1.append(l2))
  else:
    return(l1.extend(l2))
  
a = ['Hey', 'you', 'there!']
b = [1,2,3]
op='e'

list_op(a,b,op)

print(a)

#!/usr/bin/env python",Code,Human
2758,,Code,Human
2759,,Code,Human
2760,"mylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']

def get_unique_elements(list):
    unique = [x for i, x in enumerate(mylist) if i == mylist.index(x)]
    return unique

get_unique_elements(mylist)",Code,Human
2761,,Code,Human
2762,"def max_check(x):
    max_val = x[0] 
    for check in x: 
        if check > max_val: 
            max_val = check 
    return max_val

print(f'{max_check([2,4,5,7,98])}')",Code,Human
2763,,Code,Human
2764,"def min_check(x):
    min_val = x[0] 
    for check in x: 
        if check < min_val: 
            min_val = check 
    return min_val

print(f'{min_check([2,4,5,7,98])}')",Code,Human
2765,,Code,Human
2766,"list_ = [40,0,1,29,3]
rev_list = list_[::-1]
print(f'reversed list: {rev_list}')",Code,Human
2767,,Code,Human
2768,"data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []

while data_list:
    minimum = data_list[0]",Code,Human
2769,"for x in data_list: 
        if x < minimum:
            minimum = x
    new_list.append(minimum)
    data_list.remove(minimum)    

print(f'assending_order_list: {new_list}')",Code,Human
2770,,Code,Human
2771,"data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []

while data_list:
    minimum = data_list[0]",Code,Human
2772,"for x in data_list: 
        if x > minimum:
            minimum = x
    new_list.append(minimum)
    data_list.remove(minimum)    

print(f'decending_order_list: {new_list}')",Code,Human
2773,,Code,Human
2774,def Sort_Tuple(tup):,Code,Human
2775,"lst = len(tup)  
    for i in range(0, lst):  
          
        for j in range(0, lst-i-1):  
            if (tup[j][1] > tup[j + 1][1]):  
                temp = tup[j]  
                tup[j]= tup[j + 1]  
                tup[j + 1]= temp  
    return tup",Code,Human
2776,"tup =[('for', 24), ('is', 10), ('to', 28),  
      ('goal', 1), ('portal', 20), ('a', 15)]  
        
Sort_Tuple(tup)",Code,Human
2777,,Code,Human
2778,"letters = ['a','b','c','d','e','f','g','h','i','j']
i = 3
while i < len(letters):
    letters.insert(i, 'x')
    i += 4

letters",Code,Human
2779,,Code,Human
2780,"total = 0
print(f'sum: {sum([total + x for x in [1, 2, 3, 4, 5]])}')",Code,Human
2781,,Code,Human
2782,"a = [1, 2, 3, 4, 5]
b = [9, 8, 7, 6, 5]
[i for i, j in zip(a, b) if i == j]",Code,Human
2783,,Code,Human
2784,"a = [1, 2, 3, 4, 5]
b = [9, 8, 7, 6, 5]
[i for i, j in zip(a, b) if i != j]",Code,Human
2785,,Code,Human
2786,"L1 = ['a','b','c','d']
L2 = [1,2,3,4]
d = dict(zip(L1,L2))
print(f'dictionary:{d}')",Code,Human
2787,,Code,Human
2788,"d = {'Food':'Fish&Chips','2012':'Olympics','Capital':'London'}
list_key_value = [ [k,v] for k, v in d.items() ]
print(f'lsit_key_value:{list_key_value}')",Code,Human
2789,,Code,Human
2790,"x = {""a"":2,""b"":2,""c"":3,""d"":4}
y = {""b"":2,""c"":3, ""d"":4}
shared_items = {k: x[k] for k in x if k in y and x[k] == y[k]}
length = len(shared_items)
print(f'count:{length}')",Code,Human
2791,,Code,Human
2792,"import random 

min_value = 10
max_value = 20

def square(x):
    return x*x

def get_square_of_random_number(min_value,max_value):
    return square(random.randint(min_value,max_value))

get_square_of_random_number(min_value,max_value)",Code,Human
2793,,Code,Human
2794,"def findDigitsCharsSymbols(inputString):
    charCount = 0
    digitCount = 0
    symbolCount = 0
    for char in inputString:
        if char.islower() or char.isupper():
              charCount+=1
        elif char.isnumeric():
              digitCount+=1
        else:
            symbolCount+=1
      
    print(""Chars = "", charCount, ""Digits = "", digitCount, ""Symbol = "", symbolCount)
      
inputString = ""P@#yn26at^&i5ve""
print(""total counts of chars, digits,and symbols \n"")

findDigitsCharsSymbols(inputString)",Code,Human
2795,,Code,Human
2796,"def count_word_occurrences(inputstring,substring):
    inputstring = inputstring
    tempString = inputString.lower()
    count = tempString.count(substring.lower())
    return print(f'Given substring count is :{count}')  
      
inputString = ""Welcome to USA. usa awesome, isn't it?""
substring = ""USA""
count_word_occurrences(inputString,substring)",Code,Human
2797,,Code,Human
2798,"import re

inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
    totalMarks+=mark

percentage = totalMarks/len(markList)  
print(f'Total Marks is:{totalMarks},Percentage is:{percentage}')",Code,Human
2799,,Code,Human
2800,"def appendMiddle(s1, s2):
    middleIndex = int(len(s1) /2)
    print(""Original Strings are"", s1, s2)
    middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]
    print(""After appending new string in middle"", middleThree)

appendMiddle(""bananna"", ""monkey"")",Code,Human
2801,,Code,Human
2802,"str1 = ""Emma is a data scientist who knows Python. Emma works at google.""
print(f""Original String is: {str1}"")

index = str1.rfind(""Emma"")
print(f""Last occurrence of Emma starts at {index}"")",Code,Human
2803,,Code,Human
2804,"str_list = [""Emma"", ""Jon"", """", ""Kelly"", None, ""Eric"", """"]

print(str_list)",Code,Human
2805,"new_str_list = list(filter(None, str_list))

print(""After removing empty strings"")
print(new_str_list)",Code,Human
2806,,Code,Human
2807,"from string import punctuation

str1 = '/*Jon is @developer & musician!!'
print(f""The original string is :{str1}"")",Code,Human
2808,"replace_char = '#'

for char in punctuation:
    str1 = str1.replace(char, replace_char)

print(f""The strings after replacement : {str1}"")",Code,Human
2809,,Code,Human
2810,"mylis = ['this is test', 'another test']
print(f'{[item.upper() for item in mylis]}')",Code,Human
2811,,Code,Human
2812,"from functools import reduce
input_list = [x for x in range(10)]
reduce((lambda x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%3==0])",Code,Human
2813,,Code,Human
2814,"vowels = ('a', 'e', 'i', 'o', 'u')
input_string = ""awesome""
' '.join([x for x in input_string.lower() if x not in vowels])",Code,Human
2815,"str = ""piyushjain""

def longest_non_repeat(str):   
    i=0
    max_length = 1

    for i,c in enumerate(str):       
        start_at = i
        sub_str=[]         
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
        if len(sub_str) > max_length:
            max_length = len(sub_str)
        print(sub_str)
    return max_length

longest_non_repeat(str)",Code,Human
2816,"input_array = [2, 7, 11, 15]
target = 26
result = []

for i, num in enumerate(input_array):
    for j in range(i+1, len(input_array)):
        print(i,j)",Code,Human
2817,"input_array = [0,1,2,4,5,7]
start=0
result = []
while start < len(input_array):
    end = start 
    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):
        end = end + 1
    if end!=start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
    else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
    start = end+1

print(result)",Code,Human
2818,"org = [1,2,3,4,5,6,7]
result = org[:]
steps = 3

for idx,num in enumerate(org):
    if idx+steps < len(org):
        result[idx+steps] = org[idx]
    else:
        result[idx+steps-len(org)] = org[idx]

print(result)",Code,Human
2819,"first_array = [1,2,3,4,5,6,7]
second_array = [3,7,2,1,4,6]

def finder(first_array, second_array):
    return(sum(first_array) - sum(second_array))

missing_number = finder(first_array, second_array)

print(missing_number)",Code,Human
2820,"org_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]
i = 0
while i < len(org_intervals)-1:
    if org_intervals[i+1][0] < org_intervals[i][1]:
        org_intervals[i][1]=org_intervals[i+1][1]
        del org_intervals[i+1]
        i = i - 1
    i = i + 1
print(org_intervals)",Code,Human
2821,"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]

length = len(sampleList)
chunkSize  = int(length/3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
  indexes = slice(start, end, 1)
  listChunk = sampleList[indexes]
  mylist = [i for i in listChunk]
  print(""After reversing it "", mylist)
  start = end
  if(i != 2):
    end +=chunkSize
  else:
    end += length - chunkSize",Code,Human
2822,"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')",Code,Human
2823,,Code,Human
2824,"X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
2825,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
2826,"result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]",Code,Human
2827,for i in range(len(X)):,Code,Human
2828,for j in range(len(Y[0])):,Code,Human
2829,"for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")",Code,Human
2830,"num1 = 12
num2 = 10

ratio = num1 % num2
print(f'remainder:{ratio}')",Code,Human
2831,"number = 1367891
revs_number = 0  
while (number > 0):
  remainder = number % 10
  revs_number = (revs_number * 10) + remainder
  number = number // 10
print(""The reverse number is : {}"".format(revs_number))",Code,Human
2832,"def sumDigits(no):  
    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   
n = 1234511
print(sumDigits(n))",Code,Human
2833,"my_list = [4,3,2,9,10,44,1]
print(""mid value is "",my_list[int(len(my_list)/2)])",Code,Human
2834,"my_list = [4,3,2,9,10,44,1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")",Code,Human
2835,"my_list = [4,3,2,9,10,44,1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")",Code,Human
2836,"my_list1 = [4,3,2,9,10,44,1]
my_list2 = [5,6,2,8,15,14,12]
print(f""Sum of two list:,{my_list1+my_list2}"")",Code,Human
2837,"my_list1 = [4,3,2,9,10,44,1,9,12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")",Code,Human
2838,"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)",Code,Human
2839,"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)",Code,Human
2840,"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)",Code,Human
2841,"list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)",Code,Human
2842,"word = ""Hello World""
letter=word[0]
print(f""First Charecter in String:{letter}"")",Code,Human
2843,"word = ""Hello World""
letter=word[-1]
print(f""First Charecter in String:{letter}"")",Code,Human
2844,"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")",Code,Human
2845,"thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")",Code,Human
2846,"set1 = {""a"", ""b"" , ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")",Code,Human
2847,"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}

x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")",Code,Human
2848,"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}

x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")",Code,Human
2849,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")",Code,Human
2850,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}

print(f""Length of Dictionary:{len(thisdict)}"")",Code,Human
2851,"print(bool(""Hello""))
print(bool(15))",Code,Human
2852,"word = ""Hello World""
print(f""Length of string: {len(word)}"")",Code,Human
2853,"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")",Code,Human
2854,"word = ""Hello World""
ksplit = word.split(' ') 
print(f""Splited Strings: {ksplit}"")",Code,Human
2855,"ten = ""."" * 10
print(f""Ten dots: {ten}"")",Code,Human
2856,"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")

#removes leading characters
word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")

#removes trailing characters
word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")",Code,Human
2857,"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")",Code,Human
2858,"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")",Code,Human
2859,"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")",Code,Human
2860,"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")",Code,Human
2861,"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")",Code,Human
2862,"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")",Code,Human
2863,"n = 100
result = []
a, b = 0 , 1
while b < n:
  result. append( b)
  a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")",Code,Human
2864,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isdigit()):
    digitCount += 1
print('Number of digits: ',digitCount)",Code,Human
2865,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isalpha()):
    digitCount += 1
print('Number of alphanumeric: ',digitCount)",Code,Human
2866,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.upper()):
    digitCount += 1
print('Number total Upper Case: ',digitCount)",Code,Human
2867,"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.lower()):
    digitCount += 1
print('Number total lower Case: ',digitCount)",Code,Human
2868,"list1 = [1, 5, 3, 4]

for i in range(len(list1)-1):
  for j in range(i+1,len(list1)):
    if(list1[i] > list1[j]):
      temp = list1[i]
      list1[i] = list1[j]
      list1[j] = temp
print(""Bubble Sorted list: "",list1)",Code,Human
2869,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a*b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")",Code,Human
2870,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a+b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")",Code,Human
2871,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [list1[i]*list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")",Code,Human
2872,"s = [1,2,3,4]
print(f""last element from the stack:{s.pop()}"")",Code,Human
2873,"q = [1,2,3,4]
q.insert(0,5)
print(f""Revised List:{q}"")",Code,Human
2874,"v1 = [1,2,3]
v2 = [1,2,3]
s1 = [0,0,0]

for i in range(len(v1)):
  s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")",Code,Human
2875,"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""Final List:{prices}"")",Code,Human
2876,"import json
person_dict = {'name': 'Bob',
'age': 12,
'children': None
}
person_json = json.dumps(person_dict)
print(person_json)",Code,Human
2877,"import json
person_dict = {""name"": ""Bob"",
""languages"": [""English"", ""Fench""],
""married"": True,
""age"": 32
}
with open('person.txt', 'w') as json_file:
  json.dump(person_dict, json_file)",Code,Human
2878,"import json
person_string = '{""name"": ""Bob"", ""languages"": ""English"", ""numbers"": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent = 4, sort_keys=True))",Code,Human
2879,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""Piyush Jain"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""piyushjain220@gmail.com""
}""""""

print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
    print(""Key exist in JSON data"")
    print(student[""name""], ""marks is: "", student[""percentage""])
else:
    print(""Key doesn't exist in JSON data"")",Code,Human
2880,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""Piyush Jain"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""piyushjain220@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
     print(""value is present for given JSON key"")
     print(student.get('email'))
else:
    print(""value is not present for given JSON key"")",Code,Human
2881,"import json
sampleJson = {""id"" : 1, ""name"" : ""value2"", ""age"" : 29}

with open(""sampleJson.json"", ""w"") as write_file:
    json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")",Code,Human
2882,"aList = [1, 2, 3, 4, 5, 6, 7]
aList =  [x * x for x in aList]
print(aList)",Code,Human
2883,"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)",Code,Human
2884,"list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
   
resList = removeValue(list1, 20)
print(resList)",Code,Human
2885,"import random

print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
    print(random.randrange(100, 999, 5), end=', ')",Code,Human
2886,"import random

name = 'pynative'
char = random.choice(name)
print(""random char is "", char)",Code,Human
2887,"import random
import string

def randomString(stringLength):
    """"""Generate a random string of 5 charcters""""""
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(stringLength))

print (""Random String is "", randomString(5) )",Code,Human
2888,"import random
import time

def getRandomDate(startDate, endDate ):
    print(""Printing random date between"", startDate, "" and "", endDate)
    randomGenerator = random.random()
    dateFormat = '%m/%d/%Y'

    startTime = time.mktime(time.strptime(startDate, dateFormat))
    endTime = time.mktime(time.strptime(endDate, dateFormat))

    randomTime = startTime + randomGenerator * (endTime - startTime)
    randomDate = time.strftime(dateFormat, time.localtime(randomTime))
    return randomDate

print (""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))",Code,Human
2889,"def appendMiddle(s1, s2):
  middleIndex = int(len(s1) /2)
  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]
  print(""After appending new string in middle"", middleThree)
  
appendMiddle(""Ault"", ""Kelly"")",Code,Human
2890,"str1 = ""PyNaTive""
lower = []
upper = []
for char in str1:
    if char.islower():
        lower.append(char)
    else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)",Code,Human
2891,"import re

inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
  totalMarks+=mark

percentage = totalMarks/len(markList)  
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)",Code,Human
2892,"str1 = ""Apple""
countDict = dict()
for char in str1:
  count = str1.count(char)
  countDict[char]=count
print(countDict)",Code,Human
2893,"str1 = ""PYnative""
print(""Original String is:"", str1)

str1 = str1[::-1]
print(""Reversed String is:"", str1)",Code,Human
2894,"import string

str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)",Code,Human
2895,"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)",Code,Human
2896,"from string import punctuation

str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
    str1 = str1.replace(char, replace_char)

print(""The strings after replacement : "", str1)",Code,Human
2897,"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
  if(item in countDict):
    countDict[item] += 1
  else:
    countDict[item] = 1
  
print(""Printing count of each item  "",countDict)",Code,Human
2898,"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)",Code,Human
2899,"firstSet  = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}

intersection = firstSet.intersection(secondSet)
for item in intersection:
  firstSet.remove(item)
print(""First Set after removing common element "", firstSet)",Code,Human
2900,"speed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,
          'july':54, 'Aug':44, 'Sept':54} 

speedList = []
for item in speed.values():
  if item not in speedList:
    speedList.append(item)
print(""unique list"", speedList)",Code,Human
2901,"print('%o,' % (8))",Code,Human
2902,"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)",Code,Human
2903,"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)",Code,Human
2904,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))",Code,Human
2905,"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)",Code,Human
2906,"from datetime import datetime

date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
    delta = date_1 - date_2
else:
    delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")",Code,Human
2907,"def calculateSum(num):
    if num:
        return num + calculateSum(num-1)
    else:
        return 0
res = calculateSum(10)
print(res)",Code,Human
2908,"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)",Code,Human
2909,"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))",Code,Human
2910,"number = 7536
while (number > 0):
    digit = number % 10
    number = number // 10
    print(digit, end="" "")",Code,Human
2911,"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
resList = removeValue(list1, num1)
print(resList)",Code,Human
2912,"import random
list = [2,5,8,9,12]
random.shuffle(list)
print (""Printing shuffled list "", list)",Code,Human
2913,"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array,""\n"")",Code,Human
2914,"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)",Code,Human
2915,"import random
num1 =5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))",Code,Human
2916,"import random
randomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)
print(randomList)",Code,Human
2917,"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)",Code,Human
2918,"import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print(""size of list = "",sys.getsizeof(list1))",Code,Human
2919,"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"", listOne.count(listOne[0]) == len(listOne))",Code,Human
2920,"currentEmployee = {1: 'Scott', 2: ""Eric"", 3:""Kelly""}
formerEmployee  = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)",Code,Human
2921,"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)",Code,Human
2922,"test_str = ""geeksforgeeks""
res = """" 
for idx in range(len(test_str)): 
    if not idx % 2 : 
       res = res + test_str[idx].upper() 
    else: 
       res = res + test_str[idx].lower() 
print(res)",Code,Human
2923,"def isPalindrome(s):
    return s == s[::-1]",Code,Human
2924,"def symmetry(a): 
      
    n = len(a) 
    flag = 0
      
    if n%2: 
        mid = n//2 +1
    else: 
        mid = n//2
          
    start1 = 0
    start2 = mid 
      
    while(start1 < mid and start2 < n): 
          
        if (a[start1]== a[start2]): 
            start1 = start1 + 1
            start2 = start2 + 1
        else: 
            flag = 1
            break
       
    return flag",Code,Human
2925,"def rev_sentence(sentence):  
  
    words = sentence.split(' ')  
  
    reverse_sentence = ' '.join(reversed(words))  
  
    return reverse_sentence",Code,Human
2926,"string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1): 
    print(""NO"") 
else: 
    print(""YES"")",Code,Human
2927,"str1 = ""great way to learn!""
print(len(str1))",Code,Human
2928,"test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()} 
print(""The words frequency: "" + str(res))",Code,Human
2929,"str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:  
    if len(word)%2==0: 
        print(word)",Code,Human
2930,"str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou""))>=5: 
  print('accepted') 
else: 
  print(""not accepted"")",Code,Human
2931,"str1=""ababccd12@""
str2=""bb123cca1@""

matched_chars = set(str1) & set(str2) 
print(""No. of matching characters are : "" + str(len(matched_chars)) )",Code,Human
2932,"str1 = ""what a great day!""
print("""".join(set(str1)))",Code,Human
2933,"str1=""watch the match""
all_freq = {} 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)
print(""Minimum of all characters is: "" + str(res))",Code,Human
2934,"str1 = ""watch the match""
all_freq = {} 
for i in str1: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = max(all_freq, key = all_freq.get)
print(""Maximum of all characters is: "" + str(res))",Code,Human
2935,"str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5

res_str = [] 
      
text = str1.split("" "") 
      
for x in text: 

    if len(x) < str_len: 
        res_str.append(x) 

print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))",Code,Human
2936,"str1 = ""part of speech""
delimiter = ""-""

list_str = str1.split("" "")

new_str = delimiter.join(list_str)

print(""Delimited String is: "" + new_str)",Code,Human
2937,"str1=""01110011 a""

set1 = set(str1)

if set1 == {'0','1'} or set1 == {'0'} or set1 == {'1'}:
    print(""string is binary"")
else:
    print(""string is not binary"")",Code,Human
2938,"def remove_char(string, i):

    str1 = string[ : i]  

    str2 = string[i + 1: ] 
      
    return str1 + str2",Code,Human
2939,"import re 
  
def find_urls(string): 
   
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url]",Code,Human
2940,"def UncommonWords(str1, str2): 
  
    count = {} 
      
    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1
      
    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] == 1]",Code,Human
2941,"def commonWords(str1, str2): 
  
    count = {} 
      
    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1
      
    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1
  
    return [word for word in count if count[word] > 1]",Code,Human
2942,"str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""

repl_dict = {'IISC':'It', 'Classes': 'They'}

str_list = str1.split(' ') 

res = set() 

for idx, ele in enumerate(str_list): 
    if ele in repl_dict: 
        print(str(idx) + '  '+ele)
        if ele in res: 
            str_list[idx] = repl_dict[ele] 
        else: 
            res.add(ele)

res = ' '.join(str_list)

print(""Replaced String: "" + str(res))",Code,Human
2943,"str1 = 'CoffeeDay is best for coffee and having long conversations'
  
word_list = [""best"", 'long'] 
  
repl_word = 'good'
  
res = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) 

print(""String after multiple replace : "" + str(res))",Code,Human
2944,"def rotate_left(input,d):  
  
    Lfirst = input[0 : d]  
    Lsecond = input[d :]  
    return (Lsecond + Lfirst)",Code,Human
2945,"def rotate_right(input,d):  
  
    Rfirst = input[0 : len(input)-d]  
    Rsecond = input[len(input)-d : ]  
    return (Rsecond + Rfirst)",Code,Human
2946,"str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""

replaced_str = str1.replace(substr1, substr2)

print(""String after replace :"" + str(replaced_str))",Code,Human
2947,"str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'
  
res = '' 
dig = '' 

for ele in str1: 
    if ele.isdigit(): 
        dig += ele 
    else: 
        res += ele 
  
res += dig 

print(""Strings after digits at end : "" + str(res))",Code,Human
2948,"str1 = 'week after week the numbers are increasing'
  
res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']

for idx in range(1, len(str1) - 1): 

    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): 
        res += 1
  
if str1[0] not in vow_list and str1[1] in vow_list: 
    res += 1
  
if str1[-1] not in vow_list and str1[-2] in vow_list: 
    res += 1

print(""Characters around vowels count : "" + str(res))",Code,Human
2949,"def count_space(str1): 

    count = 0
      
    for i in range(0, len(str1)): 

        if str1[i] == "" "": 
            count += 1
          
    return count",Code,Human
2950,"str1 = ""whatisthis""
  
split_string = list(''.join(str1)) 
  
print(split_string)",Code,Human
2951,"str1 = 'GoodisalwaysGoood'
  
N = 3
  
K = 2
  
res = [] 

for idx in range(0, len(str1) - N + 1): 

    if (len(set(str1[idx: idx + N])) == K): 
        res.append(str1[idx: idx + N]) 
  
print(""Extracted Strings : "" + str(res))",Code,Human
2952,"import re 
  
str1 = 'count001'

res = re.sub(r'[0-9]+$', 
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",  
             str1) 
      
print(""Incremented numeric String : "" + str(res))",Code,Human
2953,"str1 = ""python1234""
  
total_digits = 0
total_letters = 0
  
for s in str1: 
  
    if s.isnumeric(): 
        total_digits += 1
    else: 
        total_letters += 1
  
print(""Total letters found : "", total_letters) 
print(""Total digits found : "", total_digits)",Code,Human
2954,"def check_lower(str1):
    
    for char in str1: 
        k = char.islower()   
        if k == True: 
            return True 
    if(k != 1): 
        return False",Code,Human
2955,"def check_upper(str1):
    
    for char in str1: 
        k = char.isupper()   
        if k == True: 
            return True
    if(k != 1): 
        return False",Code,Human
2956,"str1 = 'It is a glorious day'

res = len(str1.split()) 
  
print(""The number of words in string are : "" + str(res))",Code,Human
2957,"str1 = 'It is a glorious day'

res = len(str1) 

print(""The number of characters in string are : "", str(res))",Code,Human
2958,"def list_to_dict(list1, list2):
  return dict(zip(list1, list2))",Code,Human
2959,"def sort_dict_list(dict_list, sort_key):
  dict_list.sort(key=lambda item: item.get(sort_key))",Code,Human
2960,"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key=''
for key in dict_1:
  if len(key)>len(max_key):
    max_key=key
print(max_key)",Code,Human
2961,"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
  new_key = key[0].upper() + key[1:-1] + key[-1].upper()
  input_dict[new_key] = input_dict[key]
  if key != new_key:
    del input_dict[key]",Code,Human
2962,"key_val_map = {""key1"": ""length1"", ""key2"": ""len2"", ""Hello"": ""hi"", ""bingo"": ""print bingo""}
for key, val in key_val_map.items():
  if len(val) > len(key):
    print(""Bingo!"")
  else:
    print(""no bingo"")",Code,Human
2963,"def invert_dict(input_dict):
  my_inverted_dict = {value: key for key, value in input_dict.items()}
  return my_inverted_dict",Code,Human
2964,"def invert_dict_non_unique(my_dict):
  my_inverted_dict = dict()
  for key, value in my_dict.items():
      my_inverted_dict.setdefault(value, list()).append(key)
  return my_inverted_dict",Code,Human
2965,"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}",Code,Human
2966,"def mean_key_val_diff(input_dict):
  sum_diff = 0
  for key, val in input_dict.items():
    sum_diff += abs(len(val) - len(key))
  return sum_diff/len(input_dict)",Code,Human
2967,"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""}, 
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"":""bar2""}]
unique_keys = []
for d in list_of_dicts:
  for key in d:
    if key not in unique_keys:
      unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")",Code,Human
2968,"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, 
             {'tsai': 1, 'for': 10, 'geeks': 9}, 
             {'love': 4, 'tsai': [7, 3, 22, 1]}]   
N = 2
key = ""tsai""  
for sub in test_list: 
    if isinstance(sub[key], list): 
        sub[key] = sub[key][N]",Code,Human
2969,"test_list = [{'END' : [5, 6, 5]}, {'is' : [10, 2, 3]}, {'best' : [4, 3, 1]}] 
res =[{} for idx in range(len(test_list))] 
idx = 0
for sub in test_list: 
	for key, val in sub.items(): 
		for ele in val: 
			res[idx][key] = ele 
			idx += 1
		idx = 0
print(""Records after conversion : "" + str(res))",Code,Human
2970,"ini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, 
            {'c':[7, 8, 9], 'd':[10, 11, 12]}] 
temp_dict = {} 
result = [] 
for ini_dict in ini_list: 
    for key in ini_dict.keys(): 
         if key in temp_dict: 
             temp_dict[key] += ini_dict[key] 
         else: 
             temp_dict[key] = ini_dict[key]   
for key in temp_dict.keys(): 
     result.append(tuple([key] + temp_dict[key])) 
print(""Resultant list of tuples: {}"".format(result))",Code,Human
2971,"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)] 
res = {} 
for i, j in test_list: 
     res.setdefault(j, []).append(i) 
print(""The dictionary converted from tuple list : "" + str(res))",Code,Human
2972,"test_dict = {'END Program' : (5, 6, 1), 'is' : (8, 3, 2), 'best' : (1, 4, 9)}
prod_list=[]
for x in zip(*test_dict.values()):
  res = 1 
  for ele in x: 
      res *= ele
  prod_list.append(res)
res = tuple(prod_list) 
print(""The product from each index is : "" + str(res))",Code,Human
2973,"test_dict = {'tsai' : {'rate' : 5, 'remark' : 'good'}, 'cs' : {'rate' : 3}} 
print(""The Pretty Print dictionary is : "") 
for sub in test_dict: 
    print(f""\n{sub}"") 
    for sub_nest in test_dict[sub]: 
        print(sub_nest, ':', test_dict[sub][sub_nest])",Code,Human
2974,"test_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, 
             'Akshat' : {'roll' : 54, 'marks' : 12},  
             'Akash' : { 'roll' : 12, 'marks' : 15}} 
sort_key = 'marks'
res = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) 
print(""The sorted dictionary by marks is : "" + str(res))",Code,Human
2975,"def lists_to_dict(test_list1, test_list2, test_list3):
  res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] 
  return res",Code,Human
2976,"test_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} 
K = 3
res = {key : val for key, val in test_dict.items() 
                   if type(val) != int or val > K} 
print(""Values greater than K : "", res.keys())",Code,Human
2977,"def dict_to_tuple(input_dict):
  out_tuple = [(a, b) for a,b in input_dict.items()]
  return out_tuple",Code,Human
2978,"def flatten_dict(dd, separator ='_', prefix =''): 
    flattened =  { prefix + separator + k if prefix else k : v 
             for kk, vv in dd.items() 
             for k, v in flatten_dict(vv, separator, kk).items() 
             } if isinstance(dd, dict) else { prefix : dd } 
    return flattened",Code,Human
2979,"test_dict1 = {""tsai"" : 20, ""is"" : 36, ""best"" : 100} 
test_dict2 = {""tsai2"" : 26, ""is2"" : 19, ""best2"" : 70} 
keys1 = list(test_dict1.keys()) 
vals2 = list(test_dict2.values()) 
res = dict() 
for idx in range(len(keys1)): 
	res[keys1[idx]] = vals2[idx] 
print(""Mapped dictionary : "" + str(res))",Code,Human
2980,"test_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} 
test_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} 
prio_dict = {1 : test_dict2, 2: test_dict1} 
res = prio_dict[2].copy() 
for key, val in prio_dict[1].items(): 
    res[key] = val 
print(""The dictionary after combination : "" + str(res))",Code,Human
2981,"dict1 = {'a': 12, 'for': 25, 'c': 9} 
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300} 
for key in dict2: 
    if key in dict1: 
        dict2[key] = dict2[key] + dict1[key] 
    else: 
        pass",Code,Human
2982,"test_dict = {'Geeks' : 2, 'for' : 1, 'CS' : 3} 
res = list(sum(sorted(test_dict.items(), key = lambda x:x[1]), ())) 
print(""List after conversion from dictionary : "", res)",Code,Human
2983,"test_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, 
             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, 
             {'tsai' : [7, 5], 'best' : [5, 7]}] 
res = dict() 
for inner_dict in test_list: 
    for inner_list in inner_dict: 
        if inner_list in res: 
            res[inner_list] += (inner_dict[inner_list]) 
        else: 
            res[inner_list] = inner_dict[inner_list]  
print(""The concatenated dictionary : "" + str(res))",Code,Human
2984,"test_dict = {6 : 2, 8: 9, 3: 9, 10: 8}  
N = 4
res = []   
for key, val in sorted(test_dict.items(), key = lambda x: x[0], reverse = True)[:N]: 
    res.append(key) 
print(""Top N keys are: "" + str(res))",Code,Human
2985,"test_list = [{""Gfg"" : 3, ""b"" : 7},  
             {""is"" : 5, 'a' : 10},  
             {""Best"" : 9, 'c' : 11}]  
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]   
print(""The extracted value : "" + str(res))",Code,Human
2986,"import time 
import datetime 
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1,""%d/%m/%Y"") 
timestamp = datetime.datetime.timestamp(element) 
print(timestamp)",Code,Human
2987,"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2] 
res = 1
for ele in test_list: 
    try: 
        res *= int(ele) 
    except : 
        pass
print(""Product of integers in list : "" + str(res))",Code,Human
2988,"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)",Code,Human
2989,"def extend_list(list1, list2):
    list1 = [1, 2]
    list2 = [3, 4]
    return list1.extend(list2)",Code,Human
2990,"def add_two_lists(list1, list2):
   list1 = [1, 2, 3]
   list2 = [4, 5, 6]
   sum_list = []

   for (item1, item2) in zip(list1, list2):
      sum_list.append(item1+item2)
   return sum_list",Code,Human
2991,"list1 = ['p','r','o','b','e']

print(list1[-1])",Code,Human
2992,"list1 = [11, -21, 0, 45, 66, -93] 
  
for num in list1: 
      
    if num >= 0: 
       print(num, end = "" "")",Code,Human
2993,"def multiplyList(myList) :
    result = 1
    for x in myList:
         result = result * x 
    return result",Code,Human
2994,"list1 = [10, 20, 1, 45, 99] 
  
print(""Smallest element is:"", min(list1))",Code,Human
2995,"list1 = [11, 5, 17, 18, 23, 50]  
  
for ele in list1: 
    if ele % 2 == 0: 
        list1.remove(ele) 
  
print(""New list after removing all even numbers: "", list1)",Code,Human
2996,"list1 = [11, 5, 17, 18, 23, 50]  
  
del list1[1:5] 
  
print(*list1)",Code,Human
2997,"list1 = [11, 5, 17, 18, 23, 50]  
  
unwanted_num = {11, 18} 
  
list1 = [ele for ele in list1 if ele not in unwanted_num] 
  
print(""New list after removing unwanted numbers: "", list1)",Code,Human
2998,"test_list = ['gfg', '   ', ' ', 'is', '            ', 'best'] 
  
print(""The original list is : "" + str(test_list)) 
  
res = [ele for ele in test_list if ele.strip()] 
      
print(""List after filtering non-empty strings : "" + str(res))",Code,Human
2999,"def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]",Code,Human
3000,"l = [1, 2.0, 'hello','have', 'a', 'good', 'day'] 
  
s = 'hello'  
  
if s in l: 
    print(f'{s} is present in the list') 
else: 
    print(f'{s} is not present in the list')",Code,Human
3001,"test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] 
  
indices_list = [idx for idx in range( 
    len(test_list)) if test_list[idx] % 2 == 0] 
  

res = indices_list[-1] - indices_list[0] 
  
print(""Even elements distance : "" + str(res))",Code,Human
3002,"def emptylist():
   return list()",Code,Human
3003,"list1 = [5] * 10

print(list1)",Code,Human
3004,"def Reverse(lst): 
    return [ele for ele in reversed(lst)] 
      
lst = [10, 11, 12, 13, 14, 15] 
print(Reverse(lst))",Code,Human
3005,"list1 = [10, 21, 4, 45, 66, 93, 11]  
   
odd_nos = list(filter(lambda x: (x % 2 != 0), list1)) 
  
print(""Odd numbers in the list: "", odd_nos)",Code,Human
3006,"list1 = [11, -21, 0, 45, 66, -93] 
  
for num in list1: 
      
    if num < 0: 
       print(num, end = "" "")",Code,Human
3007,"def countX(lst, x): 
    count = 0
    for ele in lst: 
        if (ele == x): 
            count = count + 1
    return count 
  
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8] 
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))",Code,Human
3008,"def swapList(newList): 
    size = len(newList)",Code,Human
3009,"temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp 
      
    return newList 
      
newList = [12, 35, 9, 56, 24] 
  
print(swapList(newList))",Code,Human
3010,"test_list = [2323, 82, 129388, 234, 95] 
  
print(""The original list is : "" + str(test_list)) 
  
res = dict() 
for ele in test_list: 
  
    mid_idx = len(str(ele)) // 2
    key = int(str(ele)[:mid_idx]) 
    val = int(str(ele)[mid_idx:]) 
  
    res[key] = val 
  
print(""Constructed Dictionary : "" + str(res))",Code,Human
3011,"test_list = [56, 72, 875, 9, 173]  
   
K = 7
  
res = [ele for ele in test_list if str(K) in str(ele)] 
  
print(""Elements with digit K : "" + str(res))",Code,Human
3012,"input_list = [1, 2, 2, 5, 8, 4, 4, 8] 
  
l1 = [] 
  
count = 0
  
for item in input_list: 
    if item not in l1: 
        count += 1
        l1.append(item) 

print(""No of unique items are:"", count)",Code,Human
3013,"L = [4, 5, 1, 2, 9, 7, 10, 8] 
  
count = 0
  
for i in L: 
    count += i 

avg = count/len(L) 
  
print(""sum = "", count) 
print(""average = "", avg)",Code,Human
3014,"test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] 
K = 1
res = [ele for ele in test_list if len(ele) != K] 
  
print(""Filtered list : "" + str(res))",Code,Human
3015,"list1 = [1, 2, 5, 6] 
 
res = [(val, pow(val, 3)) for val in list1] 
  
print(res)",Code,Human
3016,"test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]
  
res = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] 

print(""The list tuple combination : "" + str(res))",Code,Human
3017,"test_list = [(3, 4), (6, 5), (7, 8)] 
  
res = [(sub[1], sub[0]) for sub in test_list] 
          
print(""The swapped tuple list is : "" + str(res))",Code,Human
3018,"def Sort_Tuple(tup):  
      
    lst = len(tup)  
    for i in range(0, lst):  
          
        for j in range(0, lst-i-1):  
            if (tup[j][1] > tup[j + 1][1]):  
                temp = tup[j]  
                tup[j]= tup[j + 1]  
                tup[j + 1]= temp  
    return tup",Code,Human
3019,"test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 
  
res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] 
  
print(""The filtered tuple : "" + str(res))",Code,Human
3020,"test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] 
  

print(""The original list is : "" + str(test_list)) 
  

res = [sub for sub in test_list if all(ele >= 0 for ele in sub)] 
  

print(""Positive elements Tuples : "" + str(res))",Code,Human
3021,"test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] 
print(""The original list is : "" + str(test_list)) 
  
res = [] 
for sub in test_list:                                            
    if res and res[-1][0] == sub[0]:               
        res[-1].extend(sub[1:])                         
    else: 
        res.append([ele for ele in sub])      
res = list(map(tuple, res)) 
  
print(""The extracted elements : "" + str(res))",Code,Human
3022,"test_list1 = [ [1, 2], [3, 4], [5, 6] ] 
test_list2 = [ [3, 4], [5, 7], [1, 2] ] 
  
res_list = [] 
for i in test_list1: 
    if i not in test_list2: 
        res_list.append(i) 
for i in test_list2: 
    if i not in test_list1: 
        res_list.append(i) 
          
print (""The uncommon of two lists is : "" + str(res_list))",Code,Human
3023,"def convert24(str1): 
      
    if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
        return ""00"" + str1[2:-2] 
          
    elif str1[-2:] == ""AM"": 
        return str1[:-2] 
      
    elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
        return str1[:-2] 
          
    else: 

        return str(int(str1[:2]) + 12) + str1[2:8]",Code,Human
3024,"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')",Code,Human
3025,"def divide_first_number_by_second(num1, num2):
    return (num1 // num2), (num1 % num2)",Code,Human
3026,"def largest_and_smallest(list_of_nums):
    if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
    else:
        return",Code,Human
3027,"def read_and_print_file(filepath):
    with open(filepath, ""r"") as infile:
        print( infile.read() )",Code,Human
3028,"n = 62
for num in range(n):
    print(num)",Code,Human
3029,"def sort_ascending(list_to_be_sorted):
    return sorted(list_to_be_sorted)",Code,Human
3030,"def sort_descending(list_to_be_sorted):
    return sorted(list_to_be_sorted, reverse=True)",Code,Human
3031,"def sum_first_n(n):
    return ( n * (n+1) ) // 2",Code,Human
3032,"def sum_first_n_recursive(n):
    if n == 0:
        return 0
    return sum_first_n_recursive(n-1) + n",Code,Human
3033,"def filter_with_key_value(list_of_dicts, key, value):
    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )",Code,Human
3034,"def reverse(seq):
    SeqType = type(seq)
    emptySeq = SeqType()
    if seq == emptySeq:
        return emptySeq
    restrev = reverse(seq[1:])
    first = seq[0:1]
    result = restrev + first
    return result",Code,Human
3035,"def square(x):
    return x**2",Code,Human
3036,"def selection_sort(list_to_be_sorted):
    sorted_list = list_to_be_sorted[:]
    for i in range(len(sorted_list)):
        new_min = sorted_list[i]
        new_min_old_place = i
        for j in range(i+1, len(sorted_list)):
            if new_min > sorted_list[j]:
                new_min = sorted_list[j]
                new_min_old_place = j
        old_val = sorted_list[i]
        sorted_list[i] = new_min
        sorted_list[new_min_old_place] = old_val
    return sorted_list",Code,Human
3037,"a = input(""User Input"")
print(a)",Code,Human
3038,"def shift_and_scale(list_of_nums, mean, std):
    return [ (x-mean) / std for x in list_of_nums ]",Code,Human
3039,"def zip_(list_of_seq):
    return list(zip(*list_of_seq))",Code,Human
3040,"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
    guess2 = input(""Is it <= 2? enter y/n \n"")
    if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
    else:
        print(""Yay! found the number, its 3"")
else:
    guess2 = input(""Is it 4? enter y/n \n"")
    if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
    else:
        print(""Yay! found the number, its 5"")",Code,Human
3041,"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)",Code,Human
3042,"def reverse_string(str_to_be_reversed):
    return str_to_be_reversed[::-1]",Code,Human
3043,"print(""Hello World"")",Code,Human
3044,"a = 10
b = 15
a, b = b, a",Code,Human
3045,"a = {""a"":1, ""b"":2, ""c"":3, ""d"":4}
for k, v in a.items():
    print(k, v)",Code,Human
3046,"def print_ascii(char):
    print(ord(char))",Code,Human
3047,"def hcf(num1, num2):
    smaller = num1 if num1 < num2 else num2
    for i in range(1, smaller+1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
    return hcf",Code,Human
3048,"def lcm(num1, num2):
    bigger = num1 if num1 > num2 else num2
    while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
    return bigger",Code,Human
3049,"def recursive_sum(n):
    if n <= 1:
        return n
    else:
        return n + recursive_sum(n-1)",Code,Human
3050,"def delete_last_element(list_to_be_processed):
    deleted_element = list_to_be_processed.pop()
    return list_to_be_processed, deleted_element",Code,Human
3051,"def square_list_elements(list_to_be_squared):
    return list( map(lambda x: x**2, list_to_be_squared) )",Code,Human
3052,"def find_integer_square_roots(num):
    found = False
    for k in range(1, (num//2)+1):
        if ((k**2)==num):
            found = True
            break
    if not found:
        return ""Error - the square root is not an integer""
    return -k, k",Code,Human
3053,"input_num = 27
while input_num:
    print(input_num)
    input_num -= 1",Code,Human
3054,"def divide(num1, num2):
    if num2 == 0:
        return
    else:
        return num1 / num2",Code,Human
3055,"seq = ""abcde""
for k in seq:
    if k == ""f"":
        break
else:
    print(""f Not Found!"")",Code,Human
3056,"def sort_and_merge(l1, l2):
    new_list = []
    i = 0
    j = 0
    l1_len = len(l1)
    l2_len = len(l2)
    while (i <= l1_len-1) and (j <= l2_len-1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i +=1
        else:
            new_list.append(l2[j])
            j +=1
    if i <= (l1_len-1):
        new_list += l1[i:]
    if j <= (l2_len-1):
        new_list += l2[j:]
    return new_list

def recursive_merge_sort(list_to_be_sorted):
    final_list = []
    first = 0
    last = len(list_to_be_sorted)
    if last <= 1:
        final_list.extend( list_to_be_sorted )
    else:
        mid = last // 2
        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )
        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )
        final_list.extend( sort_and_merge( l1, l2 ) )
    return final_list",Code,Human
3057,"def cal_mean(num_list:list)->float:
    if num_list:
        return sum(num_list)/len(num_list)
    else:
        return None",Code,Human
3058,"def cal_median(num_list:list)->float:
    if num_list:
        if len(num_list)%2 != 0:
            return sorted(num_list)[int(len(num_list)/2) - 1]
        else:
            return (sorted(num_list)[int(len(num_list)/2) - 1] + sorted(num_list)[int(len(num_list)/2)])/2
    else:
        return None",Code,Human
3059,"def cal_triangle_area(a:float,b:float,c:float)->float:
    if a or b or c:
        s = (a+b+c)/2
        if s>a and s>b and s>c:
            area = (s*(s-a)*(s-b)*(s-c))**(1/2)
            return round(area,2)
        else:
            return None
    return None",Code,Human
3060,"def cal_eq_triangle_area(a:float)->float:
    if a:
        return (3**(1/2))*(a**2)/4
    else:
        return None",Code,Human
3061,"def cal_rt_triangle_area(base:float,height:float)->float:
    if base and height:
        return (base*height)/2
    else:
        return None",Code,Human
3062,"def cal_dist_from_orign(x:float,y:float)->float:
    return (x**2+y**2)**(1/2)",Code,Human
3063,"def cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:
    return ((x1-x2)**2+(y1-y2)**2)**(1/2)",Code,Human
3064,"def root_type(a:float,b:float,c:float):
    if b**2-4*a*c >= 0:
        return 'real'
    else:
        return 'imaginary'",Code,Human
3065,"def sum_of_roots(a:float,c:float):
    if a:
        return c/a
    else:
        return None",Code,Human
3066,"def prod_of_roots(a:float,b:float):
    if a:
        return -b/a
    else:
        return None",Code,Human
3067,"def roots_of_qad_eq(a:float,b:float,c:float):
    d = b**2-4*a*c
    if d >= 0:
        return (-b+(d)**(1/2))/2*a,(-b-(d)**(1/2))/2*a
    else:
        return None",Code,Human
3068,"def find_profit_or_loss(cp,sp):
    if cp > sp:
        return 'loss', cp-sp
    elif cp < sp:
        return 'profit', sp-cp
    else:
        return 'no profit or loss', 0",Code,Human
3069,"def cal_area_rect(length, breadth):
    return length*breadth",Code,Human
3070,"def cal_area_square(side):
    return side**2",Code,Human
3071,"def cal_area_rhombus(q1,q2):
    return (q1*q2)/2",Code,Human
3072,"def cal_area_trapezium(a,b,h):
    return h*(a+b)/2",Code,Human
3073,"def cal_area_circle(r):
    pi = 3.14
    return pi*r**2",Code,Human
3074,"def cal_circumference(r):
    pi = 3.14
    return 2*pi*r",Code,Human
3075,"def cal_perimeter_rect(length, bredth):
    return 2*(length+bredth)",Code,Human
3076,"def cal_perimeter_triangle(s1,s2,s3):
    return s1+s2+s3",Code,Human
3077,"def cal_perimeter_square(side):
    return 4*side",Code,Human
3078,"def cal_perimeter_eq_triangle(a):
    return 3*a",Code,Human
3079,"def cal_perimeter_iso_triangle(s1,s2):
    return 2*s1+s2",Code,Human
3080,"def cal_area_ellipse(minor, major):
    pi = 3.14
    return pi*(minor*major)",Code,Human
3081,"def cal_cylinder_lat_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius*height",Code,Human
3082,"def cal_cone_curved_surf_area(slant_height,radius):
    pi=3.14
    return pi*radius*slant_height",Code,Human
3083,"def cal_surface_area_cube(a):
    return 6*(a**2)",Code,Human
3084,"def cal_surface_area_cuboid(l,b,h):
    return 2*(l*b+b*h+h*l)",Code,Human
3085,"def cal_area_sphere(radius):
    pi = 3.14
    return 4*pi*(radius**2)",Code,Human
3086,"def cal_area_hemisphere(radius):
    pi = 3.14
    return 2*pi*(radius**2)",Code,Human
3087,"def cal_cylinder_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius**2*+2*pi*radius*height",Code,Human
3088,"def cal_cone_lateral_surf_area(height,radius):
    pi=3.14
    return pi*radius*(((height**2)+(radius**2))**(1/2))",Code,Human
3089,"def cal_cylinder_volume(height, radius):
    pi=3.14
    return pi*(radius**2)*height",Code,Human
3090,"def cal_cone_volume(height,radius):
    pi=3.14
    return pi*(radius**2)*height/3",Code,Human
3091,"def cal_hemisphere_volume(radius:float)->float:
    pi=3.14
    return (2/3)*pi*(radius**3)",Code,Human
3092,"def cal_sphere_volume(radius:float)->float:
    pi=3.14
    return (4/3)*pi*(radius**3)",Code,Human
3093,"def cal_cuboid_volume(length:float, breadth:float, height:float)->float:
    return length*breadth*height",Code,Human
3094,"def cal_cube_volume(side:float)->float:
    return side**3",Code,Human
3095,"def cal_speed(distance:float,time:float)->float:
    return distance/time",Code,Human
3096,"def cal_distance(time:float,speed:float)->float:
    return time*speed",Code,Human
3097,"def cal_time(distance:float,speed:float)->float:
    return distance/speed",Code,Human
3098,"def cal_torque(force:float,theta:float,r:float)->float:
    import math
    return force*r*math.sin(theta)",Code,Human
3099,"def cal_angular_velocity(angular_dist:float,time:float)->float:
    return angular_dist/time",Code,Human
3100,"def cal_focal_length_of_lense(u:float,v:float)->float:
    return (u*v)/(u+v)",Code,Human
3101,"def cal_gforce(mass1:float,mass2:float, distance:float)->float:
    g = 6.674*(10)**(-11)
    return (g*mass1*mass2)/(distance**2)",Code,Human
3102,"def cal_current(resistance:float, voltage:float)->float:
    return voltage/resistance",Code,Human
3103,"def cal_total_cap_in_parallel(cap_list:list)->float:
    return sum(cap_list)",Code,Human
3104,"def cal_total_res_in_parallel(res_list:list)->float:
    return sum([1/r for r in res_list])",Code,Human
3105,"def cal_total_res_in_series(res_list:list)->float:
    return sum(res_list)",Code,Human
3106,"def cal_mi_ring(mass:float,radius:float)->float:
    return mass*(radius**2)",Code,Human
3107,"def cal_mi_sphere(mass:float,radius:float)->float:
    return (7/5)*mass*(radius**2)",Code,Human
3108,"def find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:
    r = 8.3145",Code,Human
3109,return (n*r*temp)/volume,Code,Human
3110,"def find_volume_of_ideal_gas(pressure:float, temp:float,n:float)->float:
    r = 8.3145",Code,Human
3111,return (n*r*temp)/pressure,Code,Human
3112,"def find_temp_of_ideal_gas(pressure:float, volume:float,n:float)->float:
    r = 8.3145",Code,Human
3113,return (pressure*volume)/n*r,Code,Human
3114,"def cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity + accelration*time",Code,Human
3115,"def cal_displacement(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity*time + .5*accelration*(time)**2",Code,Human
3116,"def cal_half_life(initail_quatity:float, time_elapsed:float, half_life:float)->float:
    return initail_quatity*((1/2)**(time_elapsed/half_life))",Code,Human
3117,"def cal_sp_after_discount(sp:float,discount:float)->float:
    return sp*(1 - discount/100)",Code,Human
3118,"def get_si(p:float, r:float, t:float)->float:
    return (p*r*t)/100",Code,Human
3119,"def get_ci(p:float, r:float, t:float, n:float)->float:
    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)",Code,Human
3120,"def cal_energy_by_mass(mass:float)->float:
    c = 300000
    return mass * (c**2)",Code,Human
3121,"def cal_ke(mass:float,velocity:float)->float:
    return (mass*(velocity)**2)/2",Code,Human
3122,"def cal_pe(mass:float,height:float)->float:
    g = 9.8
    return (mass*g*height)",Code,Human
3123,"def cal_electrostatic_force(q1,q2,d):
    k = 9*(10**9)
    return (k*q1*q2)/(d**2)",Code,Human
3124,"def cal_density(mass,volume):
    return (mass/volume)",Code,Human
3125,"def temp_converter(temp,temp_given_in = 'f'):",Code,Human
3126,if temp_given_in.lower() == 'f':,Code,Human
3127,"return (temp - 32) * (5/9)
    else:",Code,Human
3128,return (temp * 9/5) + 32,Code,Human
3129,"def merge1():
    test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
    test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
    print(""The original list 1 is : "" + str(test_list1))
    print(""The original list 2 is : "" + str(test_list2))
    for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

    print(""The Merged Dictionary list : "" + str(test_list1))",Code,Human
3130,"def vertical_concatenation():
    test_list = [[""this"",""is""], [""program"", ""for""], [""vertical"",""concatenation""]]
    print(""The original list : "" + str(test_list))
    res = []
    N = 0
    while N != len(test_list):
        temp = ''
        for idx in test_list:
            try: temp = temp + idx[N]
            except IndexError: pass
        res.append(temp)
        N = N + 1
    res = [ele for ele in res if ele]
    print(""List after column Concatenation : "" + str(res))
vertical_concatenation()",Code,Human
3131,"def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]],k=2):

    print(""The original list is : "" + str(test_list))
    K =k
    res = list(zip(*test_list))[K]
    print(""The Kth column of matrix is : "" + str(res))",Code,Human
3132,"def printSubArrays(arr, start, end):
    if end == len(arr):
        return
    elif start > end:
        return printSubArrays(arr, 0, end + 1)
    else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)

arr = [1, 2, 3]
printSubArrays(arr, 0, 0)",Code,Human
3133,"total = 0
def sum_nestedlist(l):
    global total
    for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]

sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)

#Write a function to find power of number using recursion
def power(N, P):
    if (P == 0 or P == 1):
        return N
    else:
        return (N * power(N, P - 1))

print(power(5, 2))",Code,Human
3134,"def f_substring():
    test_list = ['program ', 'to', 'filter', 'for', 'substring']
    print(""The original list is : "" + str(test_list))
    sub_str = 'geeks'
    i, j = 0, 5
    res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
    print(""Filtered list : "" + str(res))",Code,Human
3135,"def r_punc():
    test_str = ""end, is best : for ! Nlp ;""
    print(""The original string is : "" + test_str)
    punc = r'!()-[]{};:\, <>./?@#$%^&*_~'
    for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
    print(""The string after punctuation filter : "" + test_str)",Code,Human
3136,"def gnomeSort(arr, n):
    index = 0
    while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
    return arr
arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
    print(i)",Code,Human
3137,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
    holes = [0] * size
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
    print(a[i], end="" "")



#Write a function to implement stooge sort
def stoogesort(arr, l, h):
    if l >= h:
        return
    if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
    if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))

arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
    print(arr[i], end = '')

#Write a function to find the  difference between two times
def difference(h1, m1, h2, m2):

    t1 = h1 * 60 + m1
    t2 = h2 * 60 + m2
    if (t1 == t2):
        print(""Both are same times"")
        return
    else:
        diff = t2 - t1
    h = (int(diff / 60)) % 24
    m = diff % 60
    print(h, "":"", m)
difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)


#Write a function to convert time from 12 hour to 24 hour format
def convert24(str1):
    if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
    elif str1[-2:] == ""AM"":
        return str1[:-2]

    elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
    else:
        return str(int(str1[:2]) + 12) + str1[2:8]
print(convert24(""08:05:45 PM""))


#Write a function to find time for a given angle.
def calcAngle(hh, mm):
    hour_angle = 0.5 * (hh * 60 + mm)
    minute_angle = 6 * mm
    angle = abs(hour_angle - minute_angle)
    angle = min(360 - angle, angle)
    return angle


#Write a function to print all time when angle between hour hand and minute
def printTime(theta):
    for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
    print(""Input angle not valid."")
    return
theta = 90.0
printTime(theta)",Code,Human
3138,"import os
import nltk
import string
from collections import Counter
from itertools import permutations, combinations, combinations_with_replacement

letters = string.ascii_lowercase",Code,Human
3139,"def pyramid_pattern(symbol='*', count=4):
    for i in range(1, count + 1):
        print(' ' * (count - i) + symbol * i, end='')
        print(symbol * (i - 1) + ' ' * (count - i))",Code,Human
3140,"def check_word_count(word, file):
    if not os.path.isfile(file):
        raise FileNotFoundError
    if not isinstance(word, str):
        raise TypeError

    with open(file, 'r') as f:
        lines = f.readlines()
        words = [l.strip().split(' ') for l in lines]
        words = [word for sublist in words for word in sublist]
        c = Counter(words)
    return c.get(word, 0)",Code,Human
3141,"def get_permutations(data_list, l=2):
    return list(permutations(data_list, r=l))",Code,Human
3142,"def get_ordered_permutations(word, k):
    [print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]",Code,Human
3143,"def get_ordered_combinations(string, k):
    [print(''.join(x)) for i in range(1, int(k) + 1) for x in combinations(sorted(string), i)]",Code,Human
3144,"def get_ordered_combinations_with_replacement(string, k):
    [print(''.join(x)) for x in combinations_with_replacement(sorted(string), int(k))]",Code,Human
3145,"def caesar_cipher(text, shift=1):
    alphabet = string.ascii_lowercase
    shifted_alphabet = alphabet[shift:] + alphabet[:shift]
    table = str.maketrans(alphabet, shifted_alphabet)
    return text.translate(table)",Code,Human
3146,"def swap_case(s):
    return ''.join(x for x in (i.lower() if i.isupper() else i.upper() for i in s))",Code,Human
3147,"def symmetric_diff_sets():
    M, m = input(), set(list(map(int, input().split())))
    N, n = input(), set(list(map(int, input().split())))
    s = sorted(list(m.difference(n)) + list(n.difference(m)))
    for i in s:
        print(i)",Code,Human
3148,"def check_subset():
    for _ in range(int(input())):
        x, a, z, b = input(), set(input().split()), input(), set(input().split())
    print(a.issubset(b))",Code,Human
3149,"from html.parser import HTMLParser


class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(""->"", attr[0], "">"", attr[1])


parser = MyHTMLParser()

for i in range(int(input())):
    parser.feed(input())",Code,Human
3150,"def ner_checker(texts):
    all_set = set()

    def nltk_ner_check(texts):
        for i, text in texts:
            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):
                if isinstance(entity, nltk.tree.Tree):
                    etext = "" "".join([word for word, tag in entity.leaves()])",Code,Human
3151,"all_set.add(etext)

    nltk_ner_check(texts=texts)
    return all_set


#write a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.
def compress(text):
    from itertools import groupby
    for k, g in groupby(text):
        print(""({}, {})"".format(len(list(g)), k), end="" "")",Code,Human
3152,"def repeated_string(s, n):
    return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')",Code,Human
3153,"def find_substr():
    import re
    v = ""aeiou""
    c = ""qwrtypsdfghjklzxcvbnm""
    m = re.findall(r""(?<=[%s])([%s]{2,})[%s]"" % (c, v, c), input(), flags=re.I)
    print('\n'.join(m or ['-1']))",Code,Human
3154,"def min_max():
    nums = [int(x) for x in input().strip().split(' ')]
    print(sum(nums) - max(nums), sum(nums) - min(nums))",Code,Human
3155,"def divisible_sum_pairs(arr, k):
    count = 0
    n = len(arr)
    for i in range(n - 1):
        j = i + 1
        while j < n:
            if ((arr[i] + arr[j]) % k) == 0:
                count += 1
            j += 1
    return count


import math",Code,Human
3156,"class CircleArea:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius * self.radius


r = 2
obj = CircleArea(r)
print(""Area of circle:"", obj.area())",Code,Human
3157,"def check_words():
    fname = input(""file name: "")
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print(""Number of words = "", num_words)",Code,Human
3158,"def check_lines():
    fname = input(""file name: "")
    num_lines = 0
    with open(fname, 'r') as f:
        for line in f:
            num_lines += 1
    print(""Number of lines = "", num_lines)",Code,Human
3159,"def count_blank_space():
    fname = input(""file name:"")
    count = 0
    with open(fname, 'r') as f:
        for line in f:
            count += line.count(' ')
    return count",Code,Human
3160,"def anagram(s1, s2):
    if sorted(s1) == sorted(s2):
        return True
    else:
        return False",Code,Human
3161,"def remove_duplicates(data):
    c = Counter(data)
    s = set(data)
    for item in s:
        count = c.get(item)
        while count > 1:
            data.pop(item)
            count -= 1
    return data",Code,Human
3162,"def most_common(text):
    c = Counter(text)
    return c.most_common(1)",Code,Human
3163,"def bit_mul(n, shift):
    return n << shift",Code,Human
3164,"def bit_div(n, shift):
    return n >> shift",Code,Human
3165,"from collections import deque

class Queue():
    '''
    Thread-safe, memory-efficient, maximally-sized queue supporting queueing and
    dequeueing in worst-case O(1) time.
    '''


    def __init__(self, max_size = 10):
        '''
        Initialize this queue to the empty queue.

        Parameters
        ----------
        max_size : int
            Maximum number of items contained in this queue. Defaults to 10.
        '''

        self._queue = deque(maxlen=max_size)


    def enqueue(self, item):
        '''
        Queues the passed item (i.e., pushes this item onto the tail of this
        queue).

        If this queue is already full, the item at the head of this queue
        is silently removed from this queue *before* the passed item is
        queued.
        '''

        self._queue.append(item)


    def dequeue(self):
        '''
        Dequeues (i.e., removes) the item at the head of this queue *and*
        returns this item.

        Raises
        ----------
        IndexError
            If this queue is empty.
        '''

        return self._queue.pop()",Code,Human
3166,"def dot_product(a, b):
    return sum(e[0] * e[1] for e in zip(a, b))",Code,Human
3167,"def strip_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))",Code,Human
3168,"from functools import reduce


def biggest_char(string):
    if not isinstance(string, str):
        raise TypeError
    return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)",Code,Human
3169,"def count_digits():
    n = int(input(""Enter number:""))
    count = 0
    while n > 0:
        count = count + 1
        n = n // 10
    return count",Code,Human
3170,"def count_vowels(text):
    v = set('aeiou')
    for i in v:
        print(f'\n {i} occurs {text.count(i)} times')",Code,Human
3171,"def check_ip():
    import re
    import urllib.request as ur
    url = ""http://checkip.dyndns.org""
    with ur.urlopen(url) as u:
        s = str(u.read())
        ip = re.findall(r""\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"", s)
        print(""IP Address: "", ip[0])
        return ip[0]",Code,Human
3172,"def weird():
    import random

    def getlength(script):
        return sum((i['length'] for i in script))

    def truncate(target_length, script):
        if getlength(script) > target_length:
            script = sorted(script, key=lambda k: (k['priority'], -k['length']))[:-1]
            return truncate(target_length, script)
        return sorted(script, key=lambda k: k['index'])

    def as_text(script):
        return ""\n"".join([i['text'] for i in script])

    priorities_and_sentences = [
        (1, ""...now... sitting comfortably in the chair""),
        (2, ""...with your feet still flat on the ground""),
        (3, ""...back straight and head up right""),
        (2, ""...make these adjustments now if you need to""),
        (3, ""... pause..............................""),
        (1, ""...your eyes ...still ...comfortably closed""),
        (2, ""...nice and relaxed...comfortable and relaxed...""),
        (3, ""... pause.......................................""),
        (1, ""...now...I want you to notice...how heavy your head is starting to feel...""),
        (1, ""how heavy your head feels...""),
        (3, ""... pause.......................................""),
        (2, ""really noticing the weight... of your head...""),
        (3,
         ""and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable""),
    ]

    scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in
                  enumerate(priorities_and_sentences)]

    print(as_text(truncate(500, scriptlist)))
    print(as_text(truncate(300, scriptlist)))
    print(as_text(truncate(200, scriptlist)))",Code,Human
3173,"def dice():
    import random
    min = 1
    max = 6
    roll_again = 'y'

    while roll_again == ""yes"" or roll_again == ""y"":
        print(""Rolling the dice..."")
        print(random.randint(min, max))
        roll_again = input(""Roll the dices again?"")


from cryptography.fernet import Fernet",Code,Human
3174,"class Secure:
    def __init__(self):
        """"""
           Generates a key and save it into a file
        """"""
        key = Fernet.generate_key()
        with open(""secret.key"", ""wb"") as key_file:
            key_file.write(key)

    @staticmethod
    def load_key():
        """"""
        Load the previously generated key
        """"""
        return open(""secret.key"", ""rb"").read()

    def encrypt_message(self, message):
        """"""
        Encrypts a message
        """"""
        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print(""\nMessage has been encrypted: "", encrypted_message)
        return encrypted_message

    def decrypt_message(self, encrypted_message):
        """"""
        Decrypts an encrypted message
        """"""
        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print(""\nDecrypted message:"", decrypted_message.decode())


s = Secure()
encrypted = s.encrypt_message(""My deepest secret!"")
s.decrypt_message(encrypted)",Code,Human
3175,"def get_sha256(text):
    import hashlib
    return hashlib.sha256(text).hexdigest()",Code,Human
3176,"def check_sha256_hash(hashed, data):
    import hashlib
    return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False",Code,Human
3177,"def get_html(url=""http://www.python.org""):
    import urllib.request

    fp = urllib.request.urlopen(url)
    mybytes = fp.read()
    mystr = mybytes.decode(""utf8"")
    fp.close()
    print(mystr)",Code,Human
3178,"def get_btc_price(interval=5):
    import requests
    import json
    from time import sleep

    def getBitcoinPrice():
        URL = ""https://www.bitstamp.net/api/ticker/""
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)[""last""])
            return priceFloat
        except requests.ConnectionError:
            print(""Error querying Bitstamp API"")

    while True:
        print(""Bitstamp last price: US $ "" + str(getBitcoinPrice()) + ""/BTC"")
        sleep(interval)",Code,Human
3179,"def get_stock_prices(tickerSymbol='TSLA'):
    import yfinance as yf",Code,Human
3180,tickerData = yf.Ticker(tickerSymbol),Code,Human
3181,"tickerDf = tickerData.history(period='1d', start='2015-1-1', end='2020-12-20')",Code,Human
3182,print(tickerDf),Code,Human
3183,"def get_artists():
    import requests
    url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'
    response = requests.get(url)
    data = response.json()
    for artist_dict in data['feed']['entry']:
        artist_name = artist_dict['im:artist']['label']
        print(artist_name)",Code,Human
3184,"def get_words(corpus, new_doc, top=2):
    import numpy as np
    from sklearn.feature_extraction.text import TfidfVectorizer

    tfidf = TfidfVectorizer(stop_words='english')
    if not corpus:
        corpus = [
            'I would like to check this document',
            'How about one more document',
            'Aim is to capture the key words from the corpus',
            'frequency of words in a document is called term frequency'
        ]

    X = tfidf.fit_transform(corpus)
    feature_names = np.array(tfidf.get_feature_names())

    if not new_doc:
        new_doc = ['can key words in this new document be identified?',
                   'idf is the inverse document frequency calculated for each of the words']
    responses = tfidf.transform(new_doc)

    def get_top_tf_idf_words(response, top_n=top):
        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]
        return feature_names[response.indices[sorted_nzs]]

    print([get_top_tf_idf_words(response, 2) for response in responses])",Code,Human
3185,"import os


def get_word(data):
    if not (isinstance(data, str) or os.path.isfile(data)):
        raise TypeError(""Text must be string or a File object."")
    from wordcloud import WordCloud, STOPWORDS
    import matplotlib.pyplot as plt
    stopwords = set(STOPWORDS)
    if os.path.isfile(data):
        with open(data, 'r') as f:
            data = f.read()

    data = ' '.join(data.lower().split(' '))
    wordcloud = WordCloud(width=400, height=400,
                          background_color='white',
                          stopwords=stopwords,
                          min_font_size=15).generate(data)",Code,Human
3186,"plt.figure(figsize=(8, 8), facecolor=None)
    plt.imshow(wordcloud)
    plt.axis(""off"")
    plt.tight_layout(pad=0)

    plt.show()",Code,Human
3187,,Code,Human
3188,"def sort_list_with_key():
    animals = [
        {'type': 'lion', 'name': 'Mr. T', 'age': 7},
        {'type': 'tiger', 'name': 'scarface', 'age': 3},
        {'type': 'puma', 'name': 'Joe', 'age': 4}]
    print(sorted(animals, key=lambda animal: -animal['age']))",Code,Human
3189,"def infinite_sequence():
    n = 0
    while True:
        yield n
        n += 1


import uuid",Code,Human
3190,"def get_uuid():
    return uuid.uuid4()


import secrets",Code,Human
3191,"def get_cryptographically_secure_data(n=101):
    return secrets.token_bytes(n), secrets.token_hex(n)",Code,Human
3192,"def byte_to_utf8(data):
    return data.decode(""utf-8"")
print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))


def hanoi(disks, source, auxiliary, target):
    if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return
 
    hanoi(disks - 1, source, target, auxiliary)
    print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
    hanoi(disks - 1, auxiliary, source, target)",Code,Human
3193,"class Stack:
    def __init__(self):
        self.q = Queue()
 
    def is_empty(self):
        return self.q.is_empty()
 
    def push(self, data):
        self.q.enqueue(data)
 
    def pop(self):
        for _ in range(self.q.get_size() - 1):
            dequeued = self.q.dequeue()
            self.q.enqueue(dequeued)
        return self.q.dequeue()
 
 
class Queue:
    def __init__(self):
        self.items = []
        self.size = 0
 
    def is_empty(self):
        return self.items == []
 
    def enqueue(self, data):
        self.size += 1
        self.items.append(data)
 
    def dequeue(self):
        self.size -= 1
        return self.items.pop(0)
 
    def get_size(self):
        return self.size
 
 
s = Stack()
 
print('Menu')
print('push <value>')
print('pop')
print('quit')
 
while True:
    do = input('What would you like to do? ').split()
 
    operation = do[0].strip().lower()
    if operation == 'push':
        s.push(int(do[1]))
    elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
    elif operation == 'quit':
        break",Code,Human
3194,"class Dequeue:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def append(self, data):
        self.items.append(data)
 
    def append_left(self, data):
        self.items.insert(0, data)
 
    def pop(self):
        return self.items.pop()
 
    def pop_left(self):
        return self.items.pop(0)
 
 
q = Dequeue()
print('Menu')
print('append <value>')
print('appendleft <value>')
print('pop')
print('popleft')
print('quit')
 
while True:
    do = input('What would you like to do? ').split()
 
    operation = do[0].strip().lower()
    if operation == 'append':
        q.append(int(do[1]))
    elif operation == 'appendleft':
        q.append_left(int(do[1]))
    elif operation == 'pop':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from right: ', q.pop())
    elif operation == 'popleft':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from left: ', q.pop_left())
    elif operation == 'quit':
        break",Code,Human
3195,"class Stack:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def push(self, data):
        self.items.append(data)
 
    def pop(self):
        return self.items.pop()
 
 
s = Stack()
text = ""ABA""
 
for character in text:
    s.push(character)
 
reversed_text = ''
while not s.is_empty():
    reversed_text = reversed_text + s.pop()
 
if text == reversed_text:
    print('The string is a palindrome.')
else:
    print('The string is not a palindrome.')",Code,Human
3196,"class Stack:
    def __init__(self):
        self.items = []
 
    def is_empty(self):
        return self.items == []
 
    def push(self, data):
        self.items.append(data)
 
    def pop(self):
        return self.items.pop()
 
 
s = Stack()
exp = ""(x+y""
 
for c in exp:
    if c == '(':
        s.push(1)
    elif c == ')':
        if s.is_empty():
            is_balanced = False
            break
        s.pop()
else:
    if s.is_empty():
        is_balanced = True
    else:
        is_balanced = False
 
if is_balanced:
    print('Expression is correctly parenthesized.')
else:
    print('Expression is not correctly parenthesized.')",Code,Human
3197,"def linear_search(alist, key):
    """"""Return index of key in alist. Return -1 if key not present.""""""
    for i in range(len(alist)):
        if alist[i] == key:
            return i
    return -1
 
 
alist = [2, 3, 5, 6, 4, 5]

key = 6
 
index = linear_search(alist, key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')",Code,Human
3198,"def binary_search(alist, key):
    """"""Search key in alist[start... end - 1].""""""
    start = 0
    end = len(alist)
    while start < end:
        mid = (start + end)//2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
    return -1
 
 
alist = [2, 3, 5, 6, 4, 5]

key = 6
 
index = binary_search(alist, key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')",Code,Human
3199,"def binary_search_rec(alist, start, end, key):
    """"""Search key in alist[start... end - 1].""""""
    if not start < end:
        return -1
 
    mid = (start + end)//2
    if alist[mid] < key:
        return binary_search_rec(alist, mid + 1, end, key)
    elif alist[mid] > key:
        return binary_search_rec(alist, start, mid, key)
    else:
        return mid
 
 
alist = [2, 3, 5, 6, 4, 5]

key = 6
 
index = binary_search_rec(alist, 0, len(alist), key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')",Code,Human
3200,"def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return
 
 
alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3201,"def selection_sort(alist):
    for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]
 
 
alist = [2, 3, 5, 6, 4, 5]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3202,"def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
 
 
alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3203,"def merge_sort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        mid = (start + end)//2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)
 
def merge_list(alist, start, mid, end):
    left = alist[start:mid]
    right = alist[mid:end]
    k = start
    i = 0
    j = 0
    while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
    if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
    else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1
 
 
alist = [2, 3, 5, 6, 4, 5]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)",Code,Human
3204,"def quicksort(alist, start, end):
    '''Sorts the list from indexes start to end - 1 inclusive.'''
    if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)
 
 
def partition(alist, start, end):
    pivot = alist[start]
    i = start + 1
    j = end - 1
 
    while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1
 
        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j
 
 
alist = [2, 3, 5, 6, 4, 5]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)",Code,Human
3205,"def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)
 
def parent(i):
    return (i - 1)//2
 
def left(i):
    return 2*i + 1
 
def right(i):
    return 2*i + 2
 
def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1
 
def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)
 
 
alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3206,"def counting_sort(alist, largest):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1
 
    c[0] = c[0] - 1 
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]
 
    result = [None]*len(alist)
 
    for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1
 
    return result
 
 
alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)",Code,Human
3207,"def radix_sort(alist, base=10):
    if alist == []:
        return
 
    def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index]//(base**digit)) % base)
        return key
    largest = max(alist)
    exp = 0
    while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
    return alist
 
def counting_sort(alist, largest, key):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1
 
    c[0] = c[0] - 1
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]
 
    result = [None]*len(alist)
    for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1
 
    return result
 
alist = [2, 3, 5, 6, 4, 5]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)",Code,Human
3208,"def bucket_sort(alist):
    largest = max(alist)
    length = len(alist)
    size = largest/length
 
    buckets = [[] for _ in range(length)]
    for i in range(length):
        j = int(alist[i]/size)
        if j != length:
            buckets[j].append(alist[i])
        else:
            buckets[length - 1].append(alist[i])
 
    for i in range(length):
        insertion_sort(buckets[i])
 
    result = []
    for i in range(length):
        result = result + buckets[i]
 
    return result
 
def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
 
 
alist = [2, 3, 5, 6, 4, 5]
sorted_list = bucket_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)",Code,Human
3209,"def gnome_sort(alist):
    for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1
 
 
alist = [2, 3, 5, 6, 4, 5]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3210,"def cocktail_shaker_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]
 
    upper = len(alist) - 1
    lower = 0
 
    no_swap = False
    while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1
 
        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1
 
 
alist = [2, 3, 5, 6, 4, 5]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3211,"def comb_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]
 
    gap = len(alist)
    shrink = 1.3
 
    no_swap = False
    while not no_swap:
        gap = int(gap/shrink)
 
        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False
 
        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1
 
 
alist = [2, 3, 5, 6, 4, 5]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3212,"def gaps(size):
    length = size.bit_length()
    for k in range(length - 1, 0, -1):
        yield 2**k - 1
 
 
def shell_sort(alist):
    def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp
 
    for g in gaps(len(alist)):
        insertion_sort_with_gap(g)
 
 
alist = [2, 3, 5, 6, 4, 5]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)",Code,Human
3213,"class rectangle():
    def __init__(self,breadth,length):
        self.breadth=breadth
        self.length=length
    def area(self):
        return self.breadth*self.length
a=6
b=4
obj=rectangle(a,b)
print(""Area of rectangle:"",obj.area())",Code,Human
3214,"class CircleArea():
    def __init__(self,radius):
        self.radius=radius
    def area(self):
        return 3.14 * self.radius * self.radius
a=6
obj=CircleArea(a)
print(""Area of rectangle:"",obj.area())",Code,Human
3215,"class CirclePerimeter():
    def __init__(self,radius):
        self.radius=radius
    def perimeter(self):
        return 2 * 3.14 * self.radius
a=6
obj=CirclePerimeter(a)
print(""Perimeter of rectangle:"",obj.perimeter())",Code,Human
3216,"class sub:  
    def f1(self, s1):  
        return self.f2([], sorted(s1))  
 
    def f2(self, curr, s1):  
        if s1:  
            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])  
        return [curr]  
a=[2, 3, 5, 6, 4, 5]

print(""Subsets: "")
print(sub().f1(a))",Code,Human
3217,"a=str(input(""Enter file name .txt extension:""))
file2=open(a,'r')
line=file2.readline()
while(line!=""""):
    print(line)
    line=file2.readline()
file2.close()",Code,Human
3218,"fname = input(""Enter file name: "")
 
num_words = 0
 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)",Code,Human
3219,"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)",Code,Human
3220,"fname = input(""Enter file name: "")
word='the'
k = 0
 
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        for i in words:
            if(i==word):
                k=k+1
print(f""Frequency of Occurrences of the word {a} is:"")
print(k)",Code,Human
3221,"def copy(from_file, to_file):
    with open(from_file) as f:
        with open(to_file, ""w"") as f1:
            for line in f:
                f1.write(line)",Code,Human
3222,"def count_letter(fname, l):
    k = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter==l):
                        k=k+1
    return k",Code,Human
3223,"def print_number(fname):
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)",Code,Human
3224,"def count_blank_space(fname):
    k = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isspace):
                        k=k+1
    return k",Code,Human
3225,"def capitalize(fname):
    with open(fname, 'r') as f:
        for line in f:
            l=line.title()
            print(l)",Code,Human
3226,"def reverse_content(filename):
    for line in reversed(list(open(filename))):
        print(line.rstrip())",Code,Human
3227,"a=[[1,[[2]],[[[3]]]],[[4],5]]
flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]
print(flatten(a))",Code,Human
3228,"def lcm(a,b):
    lcm.multiple=lcm.multiple+b
    if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple
    else:
        lcm(a, b)
    return lcm.multiple
lcm.multiple=0
a=4
b=7
if(a>b):
    LCM=lcm(b,a)
else:
    LCM=lcm(a,b)

print(LCM)",Code,Human
3229,"def gcd(a,b):
    if(b==0):
        return a
    else:
        return gcd(b,a%b)",Code,Human
3230,"def check(n, div = None):
    if div is None:
        div = n - 1
    while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div-1)
    else:
        print(""Number is prime"")
        return 'True'",Code,Human
3231,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))",Code,Human
3232,"def sum1(lst):
    total = 0
    for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
    return total",Code,Human
3233,"def count_vowels(s):
    count = 0
    vowels = set(""aeiou"")
    for letter in s:
        if letter in vowels:
            count += 1
    return count",Code,Human
3234,"s1='python'
s2='schoolofai'
a=list(set(s1)&set(s2))
print(""The common letters are:"")
for i in a:
    print(i)",Code,Human
3235,"s1='python'
s2='schoolofai'
a=list(set(s1)-set(s2))
print(""The letters are:"")
for i in a:
    print(i)",Code,Human
3236,"def concat_dic(d1, d2):
    return d1.update(d2)",Code,Human
3237,"def mul_dict(d):
    tot=1
    for i in d:    
        tot=tot*d[i]
    return tot",Code,Human
3238,"def remove_item_dict(d, key):
    if key in d: 
        del d[key]
    else:
        print(""Key not found!"")
        exit(0)",Code,Human
3239,"def map_dict(keys, values):
    return dict(zip(keys,values))",Code,Human
3240,"def remove(string, n):  
      first = string[:n]   
      last = string[n+1:]  
      return first + last",Code,Human
3241,"def anagram_check(s1, s2):
    if(sorted(s1)==sorted(s2)):
        return True
    else:
        return False",Code,Human
3242,"def change(string):
      return string[-1:] + string[1:-1] + string[:1]",Code,Human
3243,"def modify(string):  
    final = """"   
    for i in range(len(string)):  
        if i % 2 == 0:  
            final = final + string[i]  
    return final",Code,Human
3244,"string1='python'
string2='theschoolofai'
count1=0
count2=0
for i in string1:
      count1=count1+1
for j in string2:
      count2=count2+1
if(count1<count2):
      print(""Larger string is:"")
      print(string2)
elif(count1==count2):
      print(""Both strings are equal."")
else:
      print(""Larger string is:"")
      print(string1)",Code,Human
3245,"string='This is an Assignment'
count=0
for i in string:
      if(i.islower()):
            count=count+1
print(""The number of lowercase characters is:"")
print(count)",Code,Human
3246,"a=[2, 3, 8, 9, 2, 4, 6]
even=[]
odd=[]
for j in a:
    if(j%2==0):
        even.append(j)
    else:
        odd.append(j)
print(""The even list"",even)
print(""The odd list"",odd)",Code,Human
3247,"a=[['A',34],['B',21],['C',26]]
for i in range(0,len(a)):
    for j in range(0,len(a)-i-1):
        if(a[j][1]>a[j+1][1]):
            temp=a[j]
            a[j]=a[j+1]
            a[j+1]=temp",Code,Human
3248,"a=[2, 3, 8, 9, 2, 4, 6]
for i in range(0,len(a)):
    for j in range(0,len(a)-i-1):
        if(a[j]>a[j+1]):
            temp=a[j]
            a[j]=a[j+1]
            a[j+1]=temp",Code,Human
3249,"def main(alist, blist):
    def intersection(a, b):
        return list(set(a) & set(b))
    return intersection(alist, blist)",Code,Human
3250,"l_range=2
u_range=5
a=[(x,x**2) for x in range(l_range,u_range+1)]",Code,Human
3251,"l=6
u=9
a=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]
print(a)",Code,Human
3252,"a=[2, 3, 8, 9, 2, 4, 6]
n = len(a)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print(""New list is:"")
print(a)",Code,Human
3253,"a=[2, 3, 8, 9, 2, 4, 6]
b = set()
unique = []
for x in a:
    if x not in b:
        unique.append(x)
        b.add(x)
print(""Non-duplicate items:"")
print(unique)",Code,Human
3254,"a=['the', 'tsai', 'python']
max1=len(a[0])
temp=a[0]
for i in a:
    if(len(i)>max1):
       max1=len(i)
       temp=i
print(""The word with the longest length is:"")
print(temp)",Code,Human
3255,"a=['the', 'tsai', 'python' ,'a' ,'the', 'a']
c=[]
count=0
b='a'
n=3
for i in a:
    if(i==b):
        count=count+1
        if(count!=n):
            c.append(i)
    else:
        c.append(i)
if(count==0):
    print(""Item not found "")
else: 
    print(""The number of repetitions is: "",count)
    print(""Updated list is: "",c)
    print(""The distinct elements are: "",set(a))",Code,Human
3256,"def find_odd_occurring(alist):
    """"""Return the element that occurs odd number of times in alist.
 
    alist is a list in which all elements except one element occurs an even
    number of times.
    """"""
    ans = 0
 
    for element in alist:
        ans ^= element
 
    return ans",Code,Human
3257,"date=""20/04/2021""
dd,mm,yy=date.split('/')
dd=int(dd)
mm=int(mm)
yy=int(yy)
if(mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12):
    max1=31
elif(mm==4 or mm==6 or mm==9 or mm==11):
    max1=30
elif(yy%4==0 and yy%100!=0 or yy%400==0):
    max1=29
else:
    max1=28
if(mm<1 or mm>12):
    print(""Date is invalid."")
elif(dd<1 or dd>max1):
    print(""Date is invalid."")
elif(dd==max1 and mm!=12):
    dd=1
    mm=mm+1
    print(""The incremented date is: "",dd,mm,yy)
elif(dd==31 and mm==12):
    dd=1
    mm=1
    yy=yy+1
    print(""The incremented date is: "",dd,mm,yy)
else:
    dd=dd+1
    print(""The incremented date is: "",dd,mm,yy)",Code,Human
3258,"def leapyear_check(year):
    if(year%4==0 and year%100!=0 or year%400==0):
        return True
    else:
        return False",Code,Human
3259,"n=24
print(""Factors are:"")
i=1
while(i<=n):
    k=0
    if(n%i==0):
        j=1
        while(j<=i):
            if(i%j==0):
                k=k+1
            j=j+1
        if(k==2):
            print(i)
    i=i+1",Code,Human
3260,"n=60
print(""The divisors of the number are:"")
for i in range(1,n+1):
    if(n%i==0):
        print(i)",Code,Human
3261,"def amstrong_check(n):
    a=list(map(int,str(n)))
    b=list(map(lambda x:x**3,a))
    if(sum(b)==n):
        return True
    else:
        return False",Code,Human
3262,"n=10
a=[]
for i in range(n):
    a.append([])
    a[i].append(1)
    for j in range(1,i):
        a[i].append(a[i-1][j-1]+a[i-1][j])
    if(n!=0):
        a[i].append(1)
for i in range(n):
    print(""   ""*(n-i),end="" "",sep="" "")
    for j in range(0,i+1):
        print('{0:6}'.format(a[i][j]),end="" "",sep="" "")
    print()",Code,Human
3263,"def perfect_no_check(n):
    sum1 = 0
    for i in range(1, n):
        if(n % i == 0):
            sum1 = sum1 + i
    if (sum1 == n):
        return True
    else:
        return False",Code,Human
3264,"def strong_no_check(num):
    sum1=0
    temp=num
    while(num):
        i=1
        f=1
        r=num%10
        while(i<=r):
            f=f*i
            i=i+1
        sum1=sum1+f
        num=num//10
    if(sum1==temp):
        return True
    else:
        return False",Code,Human
3265,"def amicable_no_check(x, y):
    sum1=0
    sum2=0
    for i in range(1,x):
        if x%i==0:
            sum1+=i
    for j in range(1,y):
        if y%j==0:
            sum2+=j
    if(sum1==y and sum2==x):
        return True
    else:
        return False",Code,Human
3266,"def prime_no_check(a):
    k=0
    for i in range(2,a//2+1):
        if(a%i==0):
            k=k+1
    if(k<=0):
        return True
    else:
        return False",Code,Human
3267,"n=7
sum1 = 0
while(n > 0):
    sum1=sum1+n
    n=n-1
print(""The sum of first n natural numbers is"",sum1)",Code,Human
3268,"limit=10
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1",Code,Human
3269,"a=[2, 3, 8, 9, 2, 4, 6]
k=0
num=int(input(""Enter the number to be counted:""))
for j in a:
    if(j==num):
        k=k+1
print(""Number of times"",num,""appears is"",k)",Code,Human
3270,"def collatz(n):
    while n > 1:
        print(n, end=' ')
        if (n % 2):",Code,Human
3271,"n = 3*n + 1
        else:",Code,Human
3272,"n = n//2
    print(1, end='')",Code,Human
3273,"def count_set_bits(n):
    count = 0
    while n:
        n &= n - 1
        count += 1
    return count",Code,Human
3274,"def get_gray_codes(n):
    """"""Return n-bit Gray code in a list.""""""
    if n == 0:
        return ['']
    first_half = get_gray_codes(n - 1)
    second_half = first_half.copy()
 
    first_half = ['0' + code for code in first_half]
    second_half = ['1' + code for code in reversed(second_half)]
 
    return first_half + second_half",Code,Human
3275,"def gray_to_binary(n):
    """"""Convert Gray codeword to binary and return it.""""""
    n = int(n, 2)
 
    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask

    return bin(n)[2:]",Code,Human
3276,"def binary_to_gray(n):
    """"""Convert Binary to Gray codeword and return it.""""""
    n = int(n, 2)
    n ^= (n >> 1)

    return bin(n)[2:]",Code,Human
3277,"n=1023
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)",Code,Human
3278,"a=2
b=9
c=5
d=[]
d.append(a)
d.append(b)
d.append(c)
for i in range(0,3):
    for j in range(0,3):
        for k in range(0,3):
            if(i!=j&j!=k&k!=i):
                print(d[i],d[j],d[k])",Code,Human
3279,"def print_identity_matrix(n):
    for i in range(0,n):
        for j in range(0,n):
            if(i==j):
                print(""1"",sep="" "",end="" "")
            else:
                print(""0"",sep="" "",end="" "")
        print()",Code,Human
3280,"class Food(object):
    def __init__(self, name, price):
        self.name = name
        self.price = price
    
    def getprice(self):
        return self.price
    
    def __str__(self):
        return self.name + ' : ' + str(self.getprice())
    
def buildmenu(names, costs):
    menu = []
    for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
    return menu

names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']

costs = [250, 150, 180, 70, 65, 55, 120, 350]

Foods = buildmenu(names, costs)

n = 1
for el in Foods:
    print(n,'. ', el)
    n = n + 1",Code,Human
3281,"def fib():
    cache = {1:1, 2:1}

    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
    return calc_fib",Code,Human
3282,"class Fib:
    def __init__(self):
        self.cache = {1:1, 2:1}

    def fib(self, n):
        if n not in self.cache:
            print(f'Calculating fib({n})')
            self.cache[n] = self.fib(n-1) + self.fib(n-2)
        return self.cache[n]",Code,Human
3283,"def fact():
    cache = {0:1, 1:1}

    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
    return calc_fib",Code,Human
3284,"class Fact:
    def __init__(self):
        self.cache = {0:1, 1:1}

    def fact(self, n):
        if n not in self.cache:
            self.cache[n] = self.fact(n-1) * n
        return self.cache[n]",Code,Human
3285,"def dot_product(a, b):
    return sum( e[0]*e[1] for e in zip(a, b))",Code,Human
3286,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine",Code,Human
3287,"def cosine(x,n):
    cosx = 1
    sign = -1
    for i in range(2, n, 2):
        pi=22/7
        y=x*(pi/180)
        cosx = cosx + (sign*(y**i))/math.factorial(i)
        sign = -sign
    return cosx",Code,Human
3288,"def vowel_stripping(string):
    '''This function takes a string as an input strips out vowels and returns stripted out string'''
    return """".join([x for x in string if x not in('a','e','i','o','u')])",Code,Human
3289,"def char_shift(string, shift_count):
    '''This function takes a string as an input and shifts each character by 5 and returns shifted string'''
    return """".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])",Code,Human
3290,"from functools import reduce
def biggest_char(string):
    '''This function takes an input as a string and returns the biggest output character in the string'''
    biggest_chr = lambda x, y: x if ord(x) > ord(y) else y
    return reduce(biggest_chr, string)",Code,Human
3291,"def interior_angle(no_of_sides):
    return (no_of_sides - 2) * 180 / no_of_sides",Code,Human
3292,"import math
def side_length(no_of_sides, circumradius):
    return 2 * circumradius * math.sin(math.pi / no_of_sides)",Code,Human
3293,"import math
def area(no_of_sides, circumradius):
    side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)
    apothem = circumradius * math.cos(math.pi / no_of_sides)
    return no_of_sides / 2 * side_length * apothem",Code,Human
3294,"def print_alternate_numbers(list1):
	print(list1[::2])",Code,Human
3295,"def convert_to_string_list(list_of_string_list):
	res = [''.join(str(b) for b in eval(a)) for a in list_of_string_list] 
	return res",Code,Human
3296,"given_list - = [6, 0, 4, 1] 
given_list.clear()",Code,Human
3297,"given_list - = [6, 0, 4, 1] 
sorted_list = sorted(given_list)
print(f'sorted list is {sorted_list}')",Code,Human
3298,"given_list = [8, 6, 0, 4, 1, 6, 7, 8, 9, 10, 4, 5] 
if len(given_list) % 2 == 0:
	res_list = []
	for i in range(len(given_list)-2):
		res_list.append(given_list[i] + given_list[i + 2])
	print(f'Resultant list is {res_list}')",Code,Human
3299,"lower = 900
upper = 1000
print(""Prime numbers between"", lower, ""and"", upper, ""are:"")
for num in range(lower, upper + 1):
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)",Code,Human
3300,"num = 7
factorial = 1
if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(""The factorial of"",num,""is"",factorial)",Code,Human
3301,"year = 2000
if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(f""{year} is a leap year"")
       else:
           print(f""{year} is not a leap year"")
   else:
       print(f""{year} is a leap year"")
else:
   print(f""{year} is not a leap year"")",Code,Human
3302,"num = 102
if (num % 2) == 0:
   print(f""{num} is Even"")
else:
   print(f""{num} is Odd"")",Code,Human
3303,"def compute_lcm(x, y):
   if x > y:
       greater = x
   else:
       greater = y
   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1
   return lcm",Code,Human
3304,"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))",Code,Human
3305,"num = 10
if num < 0:
   print(""Enter a positive number"")
else:
   sum = 0",Code,Human
3306,"while(num > 0):
       sum += num
       num -= 1
   print(""The sum is"", sum)",Code,Human
3307,"x = 5
y = 10
temp = x
x = y
y = temp
print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))",Code,Human
3308,"kilometers = 10000
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",Code,Human
3309,"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))",Code,Human
3310,"num = 8 
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f'%(num ,num_sqrt))",Code,Human
3311,"def  countSetBits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count",Code,Human
3312,"def isPalindrome(s):
    return s == s[::-1]",Code,Human
3313,"s = ""i like this program very much""
words = s.split(' ')
string =[]
for word in words:
    string.insert(0, word)
 
print(""Reversed String:"")
print("" "".join(string))",Code,Human
3314,"def Merge(dict1, dict2):
    return(dict2.update(dict1))",Code,Human
3315,"test_list = [12, 67, 98, 34] 
res = [] 
for ele in test_list: 
    sum = 0
    for digit in str(ele): 
        sum += int(digit) 
    res.append(sum) 
print (""List Integer Summation : "" + str(res))",Code,Human
3316,"def countList(lst): 
    count = 0
    for el in lst: 
        if type(el)== type([]): 
            count+= 1          
    return count",Code,Human
3317,"arr = [10, 324, 45, 90, 9808] 
print(f'the largest element in the array is {max(arr)}')",Code,Human
3318,"def swapList(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp 
    return newList",Code,Human
3319,"def multiplyList(myList) :
    result = 1
    for x in myList:
         result = result * x 
    return result",Code,Human
3320,"test_list1 = [1, 3, 4, 6, 8] 
test_list2 = [4, 5, 6, 2, 10] 
res_list = [] 
for i in range(0, len(test_list1)): 
    res_list.append(test_list1[i] * test_list2[i])	
print (""Resultant list is : "" + str(res_list)) 	




#write a Python program to print positive numbers in a list
list1 = [11, -21, 0, 45, 66, -93] 
for num in list1: 
    if num >= 0: 
       print(num, end = "" "")",Code,Human
3321,"list1 = [11, -21, 0, 45, 66, -93] 
for num in list1: 
    if num < 0: 
       print(num, end = "" "")",Code,Human
3322,"def countX(lst, x): 
    return lst.count(x)",Code,Human
3323,"def removedigits(ini_string):
	res = ''.join([i for i in ini_string if not i.isdigit()]) 
    return res",Code,Human
3324,"test_string = ""India is my country""
res = len(test_string.split()) 
print (f""The number of words in string are : {res}"")",Code,Human
3325,"def checkString(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n",Code,Human
3326,"def checkTriangle(x1, y1, x2, y2, x3, y3): 
    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) 
    if a == 0: 
        return False 
    else: 
        return True",Code,Human
3327,"def checkValidity(a, b, c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True",Code,Human
3328,"test_list = [""all"", ""love"", ""and"", ""get"", ""educated"", ""by"", ""gfg""] 
print(""The original list is : "" + str(test_list)) 
res = [] 
vow = ""aeiou""
for sub in test_list: 
    flag = False
    for ele in vow: 
        if sub.startswith(ele): 
            flag = True 
            break
    if flag: 
        res.append(sub)  
print(""The extracted words : "" + str(res))",Code,Human
3329,"def findoddlenthwords(test_str):
	res = [] 
	for ele in test_str.split(): 
		if len(ele) % 2 : 
			res.append(ele) 
	return res",Code,Human
3330,"def findevenlenthwords(test_str):
	res = [] 
	for ele in test_str.split(): 
		if len(ele) % 2 == 0: 
			res.append(ele)  
	return res",Code,Human
3331,"test_string = ""India is my country""
res = list(map(len, test_string.split())) 
print (""The list of words lengths is : "" + str(res))",Code,Human
3332,"num = 15
if num > 0:
   print(f""Positive number"")
elif num == 0:
   print(f""Zero"")
else:
   print(f""Negative number"")",Code,Human
3333,"num = 12
for i in range(1, 11):
   print(num, 'x', i, '=', num*i)",Code,Human
3334,"def convertToBinary(n):
   if n > 1:
       convertToBinary(n//2)
   print(n % 2,end = '')",Code,Human
3335,"vowels = 'aeiou'
ip_str = 'India is my country'
ip_str = ip_str.casefold()
count = {}.fromkeys(vowels,0)
for char in ip_str:
   if char in count:
       count[char] += 1
print(count)",Code,Human
3336,"my_str = 'aIbohPhoBiA'
my_str = my_str.casefold()
rev_str = reversed(my_str)
if list(my_str) == list(rev_str):
   print(""The string is a palindrome."")
else:
   print(""The string is not a palindrome."")",Code,Human
3337,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char
print(no_punct)",Code,Human
3338,"num = [1, -6, 4, 2, -1, 2, 0, -2, 0 ]
len_list = len(num)
trips = []
for i in range(len_list):
    if i+3 > len_list:
        break
    triplets = num[i:i+3]
    if len(set(triplets))==3:
        if sum(triplets) == 0:
            trips.append(triplets)
print(trips)",Code,Human
3339,"num = [10,20,30,40,50,60,70,80,90]
len_list = len(num)
position = 3 - 1
idx = 0
while len_list > 0:
    idx = (idx+position) % len_list
    print(num.pop(idx))
    len_list-=1",Code,Human
3340,"def simple_interest(p,t,r): 
    si = (p * t * r)/100
    return si",Code,Human
3341,"def compound_interest(principle, rate, time):  
    Amount = principle * (pow((1 + rate / 100), time)) 
    CI = Amount - principle 
    return CI",Code,Human
3342,"def findArea(r): 
    PI = 3.142
    return PI * (r*r)",Code,Human
3343,"def areaRectangle(a, b): 
    return (a * b)",Code,Human
3344,"def perimeterRectangle(a, b): 
    return (2 * (a + b))",Code,Human
3345,"def convertstringtobinary(text):
	for chr in text:
		bin = ''
		asciiVal = int(ord(chr))
		while asciiVal > 0:
			if asciiVal % 2 == 0:
				bin = bin + '0'
			else:
				bin = bin + '1'
			asciiVal = int(asciiVal/2)
		return(bin + "" : "" + bin[::-1])",Code,Human
3346,"n = 12345
q = 0
while(n>0):
 r=n%10
 q=q+r
 n=n//10
print(""Sum of digits is: ""+str(q))",Code,Human
3347,"def sortwords(my_str):
	words = my_str.split()
	words.sort()
	return ' '.join(words)",Code,Human
3348,"def replacetext(string):
    string = string.replace("" "", ""-"")
    return string",Code,Human
3349,"list = [11,22,33,44,55,66,77,88,99]
n = 10
finalList = []
for i in range(0, N):
    finalList.append(list[(i+d)%N])
print(finalList)",Code,Human
3350,"num1 = '00001'
num2 = '10001'
sum = bin(int(num1,2) + int(num2,2))
print(sum)",Code,Human
3351,"a= [11,22,33,44,55,66,77,88,99]
avg=sum(a)/len(a)
print(""Average of elements in the list"",round(avg,2))",Code,Human
3352,"n = 7
sum1 = 0
for i in range(1, n):
    if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
    print(""The number is a Perfect number!"")
else:
    print(""The number is not a Perfect number!"")",Code,Human
3353,"def binary_to_gray(n):
    n = int(n, 2)
    n ^= (n >> 1)
    return bin(n)[2:]",Code,Human
3354,"def gray_to_binary(n):
    n = int(n, 2)",Code,Human
3355,"mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask
    return bin(n)[2:]",Code,Human
3356,"def replacestring(txt):
	return txt.replace('A','$')",Code,Human
3357,"a = 15
b = 4
quotient=a//b
remainder=a%b
print(""Quotient is:"",quotient)
print(""Remainder is:"",remainder)",Code,Human
3358,"a = 15
b = 9
c = 7
s=(a+b+c)/2
area=(s*(s-a)*(s-b)*(s-c)) ** 0.5
print(""Area of the triangle is: "",round(area,2))",Code,Human
3359,"def findpythagoreantriplets(limit):
	c=0
	m=2
	while(c<limit):
		for n in range(1,m+1):
			a=m*m-n*n
			b=2*m*n
			c=m*m+n*n
			if(c>limit):
				break
			if(a==0 or b==0 or c==0):
				break
			print(a,b,c)
		m=m+1",Code,Human
3360,"n = 20
print(""The divisors of the number are:"")
for i in range(1,n+1):
    if(n%i==0):
        print(i)",Code,Human
3361,"cm = 50
inches=0.394*cm
print(""The dimension in inches "",round(inches,2))",Code,Human
3362,"cm = 50
feet=0.0328*cm
print(""The dimension in feet "",round(feet,2))",Code,Human
3363,"l1 = [11,22,33,44]
l2 = [55,66,77,88]
union = list(set().union(l1,l2)) 
print('The Union of two lists is:',union)",Code,Human
3364,"def checksubstring(string,sub_string):
	if(string.find(sub_str)==-1):
      return False
	else:
		return True",Code,Human
3365,"d={'A':10,'B':10,'C':239}
tot=1
for i in d:    
    tot=tot*d[i]
print(tot)",Code,Human
3366,"s1=""Trump was the American President""
s2=""Who is the American President now?""
a=list(set(s1)&set(s2))
print(""The common letters are:"")
for i in a:
    print(i)",Code,Human
3367,"def is_power_of_two(n):
    if n <= 0:
        return False
    else:
        return n & (n - 1) == 0",Code,Human
3368,"a = [2,3,2,3,4,4,5,5,6,6,6]
k=0
num=6
for j in a:
    if(j==num):
        k=k+1
print(""Number of times"",num,""appears is"",k)",Code,Human
3369,"def clear_rightmost_set_bit(n):
    return n & (n - 1)",Code,Human
3370,"def hcf(x, y):  
   if x > y:  
       smaller = y  
   else:  
       smaller = x  
   for i in range(1,smaller + 1):  
       if((x % i == 0) and (y % i == 0)):  
           hcf = i  
   return hcf",Code,Human
3371,"X = [[1,2,3],  
    [4,5,6],  
    [7,8,9]]  

Y = [[10,11,12],  
    [13,14,15],  
    [16,17,18]]  
	
	
result = [[0,0,0],  
               [0,0,0],  
              [0,0,0]] 

for i in range(len(X)):  
   for j in range(len(X[0])):  
       result[i][j] = X[i][j] + Y[i][j]  
for r in result:  
   print(r)",Code,Human
3372,"X = [[1,2,3],  
       [4,5,6],  
       [7,8,9]]  
  
Y = [[10,11,12],  
      [13,14,15],  
      [16,17,18]]  
	  
result = [[0,0,0],  
               [0,0,0],  
              [0,0,0]]   
for i in range(len(X)):  
   for j in range(len(Y[0])):  
       for k in range(len(Y)):  
           result[i][j] += X[i][k] * Y[k][j]  
for r in result:  
   print(r)",Code,Human
3373,"X = [[1,2],  
      [4,5],  
     [7,8]]  
  
Result = [[0,0,0],  
             [0,0,0]]  
   
for i in range(len(X)):  
   for j in range(len(X[0])):  
       result[j][i] = X[i][j]  
  
for r in result:  
   print(r)",Code,Human
3374,"def intersection(a, b):
    return list(set(a) & set(b))",Code,Human
3375,"def sortlistwithlen(list):
	list.sort(key=len)
	return list",Code,Human
3376,"n = 3
for i in range(0,n):
    for j in range(0,n):
        if(i==j):
            print(""1"",sep="" "",end="" "")
        else:
            print(""0"",sep="" "",end="" "")",Code,Human
3377,"lower = 1
upper = 100
for i in range (lower,upper+1):
    if(i%7==0 and i%5==0):
        print(i)",Code,Human
3378,"def findlongest(list):
	max1=len(list[0])
	temp=list[0]
	for i in list:
		if(len(i)>max1):
		   max1=len(i)
		   temp=i
	return temp",Code,Human
3379,"def check_if_anagram(s1,s2):
	if(sorted(s1)==sorted(s2)):
		  return True
	else:
		  return False",Code,Human
3380,"string= ""United States of America""
count=0
for i in string:
      count=count+1
print(""Length of the string is:"")
print(count)",Code,Human
3381,"class rectangle():
    def __init__(self,breadth,length):
        self.breadth=breadth
        self.length=length
    def area(self):
        return self.breadth*self.length
a=15
b=10
obj=rectangle(a,b)
print(""Area of rectangle:"",obj.area())",Code,Human
3382,"a= [11,22,33,44,55,66,77,88,99]
a.sort()
print(""Second largest element is:"",a[n-2])",Code,Human
3383,"string=""SriNAtH""
count=0
for i in string:
      if(i.islower()):
            count=count+1
print(""The number of lowercase characters is:"")
print(count)",Code,Human
3384,"d={'A':100,'B':540,'C':239}
print(""Total sum of values in the dictionary:"")
print(sum(d.values()))",Code,Human
3385,"def countword(test_string):
	l=[]
	l=test_string.split()
	wordfreq=[l.count(p) for p in l]
	return(dict(zip(l,wordfreq)))",Code,Human
3386,"a=str(input(""Enter the name of the file with .txt extension:""))
file2=open(a,'r')
line=file2.readline()
while(line!=""""):
    print(line)
    line=file2.readline()
file2.close()",Code,Human
3387,"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
    for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)",Code,Human
3388,"fname = input(""Enter file name: "")
num_words = 0
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)",Code,Human
3389,"fname = input(""Enter file name: "")
with open(fname, 'r') as f:
    for line in f:
        l=line.title()
        print(l)",Code,Human
3390,"filename=input(""Enter file name: "")
for line in reversed(list(open(filename))):
    print(line.rstrip())",Code,Human
3391,"def deletekey(dict,key)
	if key in dict: 
		del dict[key]
	return dict",Code,Human
3392,"def deleteelement(list, item):
	list.remove(item)
	return list",Code,Human
3393,"def check(string) :  
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return True 
    else : 
        return False",Code,Human
3394,"def findRotations(str): 
    tmp = str + str
    n = len(str)   
    for i in range(1, n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n",Code,Human
3395,"def NumOfDivisor(n): 
    if n < 1: 
        return
    root_n = n**0.5
    if root_n**2 == n: 
        print(""Odd"") 
    else: 
        print(""Even"")",Code,Human
3396,"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)",Code,Human
3397,"def concat_two_numbers(num1, num2):
    combined_num = str(num1) + str(num2)
    return int(combined_num)",Code,Human
3398,"n = 8
d = dict()
for i in range(1,n+1):
    d[i] = i*i*i
print(d)",Code,Human
3399,"values=input()
l=values.split("","")
t=tuple(l)
print(l)
print(t)",Code,Human
3400,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False",Code,Human
3401,"def no_notes(a):
  Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]
  x = 0
  for i in range(9):
    q = Q[i]
    x += int(a / q)
    a = int(a % q)
  if a > 0:
    x = -1
  return x",Code,Human
3402,"def factendzero(n):
  x = n // 5
  y = x 
  while x > 0:
    x /= 5
    y += int(x)
  return y",Code,Human
3403,"def binary_search(l, num_find):
    '''
    This function is used to search any number.
    Whether the given number is present in the
    list or not. If the number is present in list
    the list it will return TRUE and FALSE otherwise.
    '''
    start = 0
    end = len(l) - 1
    mid = (start + end) // 2
    found = False
    position = -1
    while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2
    return (found, position)",Code,Human
3404,"import re
regex = '\.[0]*'
def remove_leading_zeros(ip):
    modified_ip = re.sub(regex, '.', ip)
    return modified_ip",Code,Human
3405,"def int_to_bin(a):
  return bin(a)",Code,Human
3406,"def int_to_oct(a):
  return oct(a)",Code,Human
3407,"def int_to_hex(a):
  return hex(a)",Code,Human
3408,"num = int(input(""Input a value: ""))
print(num)",Code,Human
3409,"num = float(input(""Input a value: ""))
print(num)",Code,Human
3410,"a = 10
b = 20
c = 30
if 10 in {a, b, c}:
  print(""True"")
else:
  print(""False"")",Code,Human
3411,"class Number:
	def __init__(self, num):
		self.num = num

	def inputNum(self):
		self.num = int(input(""Enter an integer number: ""))

	def printNum(self):
		print(self.num)",Code,Human
3412,"def simple_interest(p,r,t):
    si = (p*r*t)/100
    return si",Code,Human
3413,"def compound_interest(p,r,t):
    ci = p * (pow((1 + r / 100), t)) 
    return ci",Code,Human
3414,"def vote_eligibility(age):
	if age>=18:
	    status=""Eligible""
	else:
	    status=""Not Eligible""
	return status",Code,Human
3415,"def bmi_calculator(height, weight):
	bmi = weight/(height**2)
	return bmi",Code,Human
3416,"def perfect_number_checker(num):
    i = 2
    sum = 1
    while(i <= num//2 ) :
        if (num % i == 0) :
            sum += i
        i += 1
    if sum == num :
        return f'{num} is a perfect number'

    else :
        return f'{num} is not a perfect number'",Code,Human
3417,"def odd_max_checker(list1):
	maxnum = 0
	for num in list1:
	    if num%2 != 0:
	        if num > maxnum:
	            maxnum = num
	return maxnum",Code,Human
3418,"def even_max_checker(list1):
	maxnum = 0
	for num in list1:
	    if num%2 == 0:
	        if num > maxnum:
	            maxnum = num
	return maxnum",Code,Human
3419,"def quadratic_root(A,B,C):
	import math
	d=((B**2)-4*A*C)

	if d>=0:
	    s=(-B+(d)**0.5)/(2*A)
	    p=(-B-(d)**0.5)/(2*A)
	    print(math.floor(s),math.floor(p))
	else:
	    print('The roots are imaginary')",Code,Human
3420,"import calendar
year=2020
print(calendar.calendar(year))",Code,Human
3421,"def date_validator(d,m,y):
	import datetime 
	try:
		s=datetime.date(y,m,d)
		print(""Date is valid."")
	except ValueError: 
		print(""Date is invalid."")",Code,Human
3422,"def nth_sq_and_cube(N):
	R = N**6
	return R",Code,Human
3423,"def power_checker(a,b):
	import math
	s=math.log(a,b)
	p=round(s)
	if (b**p)==a:
	    return f'{a} is the power of {b}.'
	else:
	    return f'{a} is NOT the power of {b}.'",Code,Human
3424,"def binary_palindrome(n):
	s=int(bin(n)[2:])
	r=str(s)[::-1]
	if int(r)==s:
	    return ""The binary representation of the number is a palindrome.""
	else:
	    return ""The binary representation of the number is NOT a palindrome.""",Code,Human
3425,"import keyword
print(""Python keywords are..."")
print(keyword.kwlist)",Code,Human
3426,"def array_intersection(A,B):
	inter=list(set(A)&set(B))
	return inter",Code,Human
3427,"def array_union(A,B):
	union=list(set(A)|set(B))
	return union",Code,Human
3428,"import numpy as np
A = np.array([[1,2,3],[2,3,5],[3,6,8],[323,623,823]])
print(""Shape of the matrix A: "", A.shape)",Code,Human
3429,"import numpy as np
A = np.array([[4,5,8], [7,1,4], [5,5,5], [2,3,6]])
print(""Rank of the matrix A: "", np.linalg.matrix_rank(A))",Code,Human
3430,"import numpy as np
A = np.array([[4,5,8], [5,5,5], [2,3,6]])
print(""Trace of the matrix A: "", np.trace(A))",Code,Human
3431,"import numpy as np
a = np.array([78, 84, 87, 91, 76])
b = np.array([92, 83, 91, 79, 89])
dist = np.linalg.norm(a-b)
print('Differnce in performance between A and B : ', dist)",Code,Human
3432,"def formattedNumber(n):
  return (""{:,}"".format(n))",Code,Human
3433,"str1='TestStringInCamelCase'
no_of_ucase, no_of_lcase = 0,0
for c in str1:
    if c>='A' and c<='Z':
        no_of_ucase += 1
    if c>='a' and c<='z':
        no_of_lcase += 1

print(no_of_lcase)
print(no_of_ucase)",Code,Human
3434,"str1='TestStringwith123456789'
no_of_letters, no_of_digits = 0,0
for c in str1:
  no_of_letters += c.isalpha()
  no_of_digits += c.isnumeric()

print(no_of_letters)
print(no_of_digits)",Code,Human
3435,"def text_searcher(text, word):
    count = 0
    for w in text.split():
        if w == word:
            count = count + 1
    return count",Code,Human
3436,"def capitalize(text):
  return text.title()",Code,Human
3437,"def newlist(lst):
  return list(filter(None, lst))",Code,Human
3438,"def sum_of_digits(num):
  if num == 0:
    return 0
  else:
    return num % 10 + sum_of_digits(int(num / 10))",Code,Human
3439,"def check_equal(a):
  return a[1:] == a[:-1]",Code,Human
3440,"mat1 = np.array([[10,20,30],[40,50,60],[70,80,90]])
print(np.sqrt(mat1))",Code,Human
3441,"def reverse(n):
    s=str(n) 
    p=s[::-1]
    return p",Code,Human
3442,"import pandas as pd
import numpy as np
mylist = list('abcedfghijklmnopqrstuvwxyz')
myarr = np.arange(26)
mydict = dict(zip(mylist, myarr))
ser = pd.Series(mydict)
df = ser.to_frame().reset_index()
print(df.head())",Code,Human
3443,"import pandas as pd
import numpy as np
np.random.RandomState(100)
ser = pd.Series(np.random.randint(1, 5, [12]))
ser[~ser.isin(ser.value_counts().index[:2])] = 'Other'
print(ser)",Code,Human
3444,"import pandas as pd
import numpy as np
ser = pd.Series(np.random.random(20))
deciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], 
        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])
print(deciled)",Code,Human
3445,"import pandas as pd
import numpy as np
ser = pd.Series(np.random.randint(1,10,10), pd.date_range('2000-01-01', periods=10, freq='W-SAT'))
print(ser)",Code,Human
3446,"import pandas as pd
import numpy as np
ser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').ffill())",Code,Human
3447,"import pandas as pd
import numpy as np
ser = pd.Series([1,10,3, np.nan], index=pd.to_datetime(['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').bfill())",Code,Human
3448,"import pandas as pd
import numpy as np
df = pd.DataFrame(np.arange(25).reshape(5,-1), columns=list('abcde'))
df_onehot = pd.concat([pd.get_dummies(df['a']), df[list('bcde')]], axis=1)
print(df_onehot)",Code,Human
3449,"import pandas as pd
import numpy as np
ser = pd.Series(np.arange(20) + np.random.normal(1, 10, 20))
autocorrelations = [ser.autocorr(i).round(2) for i in range(11)]
print(autocorrelations[1:])",Code,Human
3450,"import pandas as pd
import numpy as np
ser = pd.Series(np.random.randint(1, 10, 7))
print(np.argwhere(ser.values % 3 == 0))",Code,Human
3451,"def printEveIndexChar(str):
  for i in range(0, len(str)-1, 2):
    print(""index["",i,""]"", str[i] )",Code,Human
3452,"def removeChars(str, n):
  return str[n:]",Code,Human
3453,"def isFirst_And_Last_Same(numberList):
    firstElement = numberList[0]
    lastElement = numberList[-1]
    if (firstElement == lastElement):
        return True
    else:
        return False",Code,Human
3454,"def findDivisible(numberList):
    for num in numberList:
        if (num % 5 == 0):
            print(num)",Code,Human
3455,"def mergeList(list1, list2):
    thirdList = []
    for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
    for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
    return thirdList",Code,Human
3456,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))",Code,Human
3457,"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)",Code,Human
3458,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))",Code,Human
3459,"from datetime import datetime
given_date = datetime(2020, 2, 25)
string_date = given_date.strftime(""%Y-%m-%d %H:%M:%S"")
print(string_date)",Code,Human
3460,"keys = {'Ten', 'Twenty', 'Thirty'}
values = {10, 20, 30}
sampleDict = dict(zip(keys, values))
print(sampleDict)",Code,Human
3461,"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))",Code,Human
3462,"def typeIdentifier(object):
  return f'object type : {type(object)}'",Code,Human
3463,"class IOString(object):
    def __init__(self):
        self.s = """"

    def getString(self):
        self.s = input()
    
    def printString(self):
        print(self.s.upper())

strObj = IOString()
strObj.getString()
strObj.printString()",Code,Human
3464,"import os, psutil
print(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)",Code,Human
3465,"def charToASCII(chr):
  return f'ASCII value of {chr} is: {ord(chr)}'",Code,Human
3466,"def revStr(inp):
  inp = inp[::-1]
  return inp",Code,Human
3467,"def totalBits(n):
	return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'",Code,Human
3468,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine",Code,Human
3469,"def check(n):
    if (n < 2):
        return (n % 2 == 0)
    return (check(n - 2))
n=int(input(""Enter number:""))
if(check(n)==True):
      print(""Number is even!"")
else:
      print(""Number is odd!"")",Code,Human
3470,"a,b = b,a",Code,Human
3471,"items=[x for x in input().split(',')]
items.sort()
print(','.join(items))",Code,Human
3472,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))
base=int(input(""Enter base: ""))
exp=int(input(""Enter exponential value: ""))
print(""Result:"",power(base,exp))",Code,Human
3473,"def multTimes(str, m, n):
    front_len = m
    if front_len > len(str):
        front_len = len(str)
    front = str[:front_len]
    result = ''
    for i in range(n):
        result = result + front
    return result
print (multTimes('Hello', 3, 7))",Code,Human
3474,"from re import sub
def camelCase(string):
  string = sub(r""(_|-)+"", "" "", string).title().replace("" "", """")
  return string[0].lower() + string[1:]",Code,Human
3475,"def removeEmptyList(li):
  res = [ele for ele in li if ele != []] 
  return res",Code,Human
3476,"Tuple = (10,20)
def sizeOfTuple(tup):
  return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes'",Code,Human
3477,"values = []
for i in range(1000, 9999):
  s = str(i)
  if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
      values.append(s)",Code,Human
3478,"def homoList(li):
  res = True
  for i in li: 
      if not isinstance(i, type(li[0])): 
          res = False 
          break
  return res",Code,Human
3479,"def removeDataType(li,dType):
    res = []
    for i in li:
        if not isinstance(i, dType):
            res.append(i)
    return res",Code,Human
3480,"def firstOccurence(arr, i,j):
  res = 0
  for k in arr:         
      if k == j: 
          break
      if k == i: 
          res += 1
  return res",Code,Human
3481,"file_path = ""path/here""
import os.path
os.path.exists(file_path)",Code,Human
3482,"x={'key1':'val1','key2':'val2'}
y={'key3':'val3','key4':'val4'}
z = {**x, **y}",Code,Human
3483,,Code,Human
3484,"import json
data = {""key1"" : ""value1"", ""key2"" : ""value2""}
jsonData = json.dumps(data)
print(jsonData)",Code,Human
3485,"def ngcd(x, y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i
        i+=1
    return gcd
def num_comm_div(x, y):
  n = ngcd(x, y)
  result = 0
  z = int(n**0.5)
  i = 1
  while( i <= z ):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",Code,Human
3486,"import json
def validateJSON(jsonData):
    try:
        json.loads(jsonData)
    except ValueError as err:
        return False
    return True",Code,Human
3487,"def remove_nums(int_list):
  position = 3 - 1 
  idx = 0
  len_list = (len(int_list))
  while len_list>0:
    idx = (position+idx)%len_list
    print(int_list.pop(idx))
    len_list -= 1",Code,Human
3488,"string_words = '''This assignment is of 900 marks. Each example if 9 marks.
If your example is similar to someone else, then you score less.
The formula we will use is 9/(repeated example). That means if 9 people write same example,
then you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''
word_list = string_words.split()
word_freq = [word_list.count(n) for n in word_list]
print(""Pairs (Words and Frequencies:\n {}"".format(str(list(zip(word_list, word_freq)))))",Code,Human
3489,"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)",Code,Human
3490,"def permute(nums):
  result_perms = [[]]
  for n in nums:
    new_perms = []
    for perm in result_perms:
      for i in range(len(perm)+1):
        new_perms.append(perm[:i] + [n] + perm[i:])
        result_perms = new_perms
  return result_perms",Code,Human
3491,"def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a",Code,Human
3492,"x=10
y=20
z=30
if y < x and x < z:
    print(x)
elif z < x and x < y:
    print(x)
elif z < y and y < x:
    print(y)
elif x < y and y < z:
    print(y)
elif y < z and z < x:
    print(z)    
elif x < z and z < y:
    print(z)",Code,Human
3493,"def carry_number(x, y):
  ctr = 0
  if(x == 0 and y == 0):
    return 0
  z = 0  
  for i in reversed(range(10)):
      z = x%10 + y%10 + z
      if z > 9:
        z = 1
      else:
        z = 0
      ctr += z
      x //= 10
      y //= 10
  if ctr == 0:
    return ""No carry operation.""
  elif ctr == 1:
    return ctr
  else:
    return ctr",Code,Human
3494,"a,b = 312, 410
print(len(str(a*b)))",Code,Human
3495,"def area(d1, a): 
    d2 = (4*(a**2) - d1**2)**0.5
    area = 0.5 * d1 * d2 
    return(area)",Code,Human
3496,"def setBitNumber(n): 
    if (n == 0): 
        return 0
    msb = 0 
    n = int(n / 2) 
    while (n > 0): 
        n = int(n / 2) 
        msb += 1
    return (1 << msb)",Code,Human
3497,"def volumeTriangular(a, b, h): 
    return (0.1666) * a * b * h",Code,Human
3498,"def volumeSquare(b, h): 
    return (0.33) * b * b * h",Code,Human
3499,"def volumePentagonal(a, b, h): 
    return (0.83) * a * b * h",Code,Human
3500,"def volumeHexagonal(a, b, h): 
    return a * b * h",Code,Human
3501,"l = []
if not l:
print(""List is empty"")",Code,Human
3502,"a = [10,20,30,20,10,50,60,40,80,50,40]
dup_items = set()
uniq_items = []
for x in a:
if x not in dup_items:
uniq_items.append(x)
dup_items.add(x)
print(dup_items)",Code,Human
3503,"def common_data(list1, list2):
result = False
for x in list1:
for y in list2:
if x == y:
result = True
return result
print(common_data([1,2,3,4,5], [5,6,7,8,9]))",Code,Human
3504,"list1 = [1, 2, 3, 4]
list2 = [1, 2]
print(list(set(list1) - set(list2)))",Code,Human
3505,"def second_smallest(numbers):
a1, a2 = float('inf'), float('inf')
for x in numbers:
if x <= a1:
a1, a2 = x, a1
elif x < a2:
a2 = x
return a2
print(second_smallest([1, 2, -8, -2, 0]))",Code,Human
3506,"def second_largest(numbers):
count = 0
n1 = n2 = float('-inf')
for x in numbers:
count += 1
if x > n2:
if x >= n1:
n1, n2 = x, n1
else:
n2 = x
return n2 if count >= 2 else None

print(second_largest([1, 2, -8, -2, 0]))",Code,Human
3507,"import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print(""Original List : "",my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "",ctr)",Code,Human
3508,"L = [11, 33, 50]
x = int("""".join(map(str, L)))
print(""Single Integer: "",x)",Code,Human
3509,"my_list = [{},{},{}]
my_list1 = [{1,2},{},{}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))",Code,Human
3510,"def char_frequency(str1):
dict = {}
for n in str1:
keys = dict.keys()
if n in keys:
dict[n] += 1
else:
dict[n] = 1
return dict
print(char_frequency('google.com'))

#Write a python program to replace the first character occurence in the later part of the string
def change_char(str1):
char = str1[0]
length = len(str1)
str1 = str1.replace(char, '$')
str1 = char + str1[1:]

return str1

print(change_char('restart'))",Code,Human
3511,"def find_longest_word(words_list):
word_len = []
for n in words_list:
word_len.append((len(n), n))
word_len.sort()
return word_len[-1][1]

print(find_longest_word([""PHP"", ""python"", ""zekelabs""]))",Code,Human
3512,"def find_longest_word(words_list):
word_len = []
for n in words_list:
word_len.append((len(n), n))
word_len.sort()
return word_len[-1][1]

print(find_longest_word([""PHP"", ""python"", ""zekelabs""]))",Code,Human
3513,"def to_uppercase(str1):
num_upper = 0
for letter in str1[:4]:
if letter.upper() == letter:
num_upper += 1
if num_upper >= 2:
return str1.upper()
return str1

print(to_uppercase('PyThon'))",Code,Human
3514,"def vowel(text):
vowels = ""aeiuoAEIOU""
print(len([letter for letter in text if letter in vowels]))
print([letter for letter in text if letter in vowels])
vowel('zekelabs')",Code,Human
3515,"n=int(input(""Input a number: ""))
d = dict()

for x in range(1,n+1):
d[x]=x*x

print(d)",Code,Human
3516,"num_list = [1, 2, 3, 4]
new_dict = current = {}
for name in num_list:
current[name] = {}
current = current[name]
print(new_dict)",Code,Human
3517,"num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)",Code,Human
3518,"x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
print('%s: %s is present in both x and y' % (key, value))",Code,Human
3519,"num = [10,20,30,(10,20),40]
ctr = 0
for n in num:
if isinstance(n, tuple):
break
ctr += 1
print(ctr)",Code,Human
3520,"tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')
str = ''.join(tup)
print(str)",Code,Human
3521,"tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7
count = tuplex.count(4)
print(count)",Code,Human
3522,"tuplex = ((2, ""w""),(3, ""r""))
print(dict((y, x) for x, y in tuplex))",Code,Human
3523,"price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print( sorted(price, key=lambda x: float(x[1]), reverse=True))",Code,Human
3524,"color_set = set()
color_set.add(""Red"")
color_set.update([""Blue"", ""Green""])
print(color_set)",Code,Human
3525,"setx = set([""apple"", ""mango""])
sety = set([""mango"", ""orange""])
setc = setx ^ sety
print(setc)",Code,Human
3526,"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)",Code,Human
3527,"count_odd = 0
count_even = 0
for x in numbers:
if not x % 2:
count_even+=1
else:
count_odd+=1
print(""Number of even numbers :"",count_even)
print(""Number of odd numbers :"",count_odd)",Code,Human
3528,"for x in range(6):
if (x == 3 or x==6):
continue
print(x,end=' ')
print(""\n"")",Code,Human
3529,"x,y=0,1
while y<50:
print(y)
x,y = y,x+y",Code,Human
3530,"row_num = int(input(""Input number of rows: ""))
col_num = int(input(""Input number of columns: ""))
multi_list = [[0 for col in range(col_num)] for row in range(row_num)]

for row in range(row_num):
for col in range(col_num):
multi_list[row][col]= row*col

print(multi_list)",Code,Human
3531,"items = []
for i in range(100, 401):
s = str(i)
if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):
items.append(s)
print( "","".join(items",Code,Human
3532,"n = int(input(""Input a number: ""))
for i in range(1,11):
print(n,'x',i,'=',n*i)",Code,Human
3533,"def max_of_two( x, y ):
if x > y:
return x
return y
def max_of_three( x, y, z ):
return max_of_two( x, max_of_two( y, z ) )

print(max_of_three(3, 6, -5))",Code,Human
3534,"def sum(numbers):
total = 0
for x in numbers:
total += x
return total
print(sum((8, 2, 3, 0, 7)))",Code,Human
3535,"def multiply(numbers):
total = 1
for x in numbers:
total *= x
return total
print(multiply((8, 2, 3, -1, 7)))",Code,Human
3536,"def string_test(s):
d={""UPPER_CASE"":0, ""LOWER_CASE"":0}
for c in s:
if c.isupper():
d[""UPPER_CASE""]+=1
elif c.islower():
d[""LOWER_CASE""]+=1
else:
pass
print (""Original String : "", s)
print (""No. of Upper case characters : "", d[""UPPER_CASE""])
print (""No. of Lower case Characters : "", d[""LOWER_CASE""])

string_test('The quick Brow Fox')",Code,Human
3537,"def unique_list(l):
x = []
for a in l:
if a not in x:
x.append(a)
return x

print(unique_list([1,2,3,3,3,3,4,5]))",Code,Human
3538,"def is_even_num(l):
enum = []
for n in l:
if n % 2 == 0:
enum.append(n)
return enum
print(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))",Code,Human
3539,"def isPalindrome(string):
left_pos = 0
right_pos = len(string) - 1

while right_pos >= left_pos:
if not string[left_pos] == string[right_pos]:
return False
left_pos += 1
right_pos -= 1
return True
print(isPalindrome('aza'))",Code,Human
3540,"def test(a):
def add(b):
nonlocal a
a += 1
return a+b
return add
func= test(4)
print(func(4))",Code,Human
3541,"def abc():
x = 1
y = 2
str1= ""w3resource""

print(abc.__code__.co_nlocals)",Code,Human
3542,"num = int (input (""Enter Integer Number: ""))
if num == 0:
print (""Zero Entered"")
elif num > 0:
print (""Positive Number Entered"")
elif num < 0:
print (""Negative Number Entered"")",Code,Human
3543,"nominator = int (input (""Enter Nominator: ""))
denominator = int (input (""Enter Denominator: ""))
if nominator % denominator == 0:
print(""{} is completely Divisible by {}"".format(nominator, denominator))
else:
print (""{} is not completely Divisible by {}"".format(nominator, denominator))",Code,Human
3544,"letter = input (""Enter a Single Character: "")
if letter == ""A"" or letter == ""a"" or letter == ""E"" or letter == ""e"" or letter == ""I"" or letter == ""i"" or letter == ""o"" or letter ==""O"" or letter == ""U"" or letter == ""u"":
print (""{} is Vowel"".format(letter))
else:
print (""{} is co nsonent (Not Vowel)"".format(letter))",Code,Human
3545,"n = int (input (""Enter Value of n: ""))
sum = 0
x = 0
while x != n+1: #because we need to include n in sum
sum += x
x+=1
print(""Sum of n positive Integer till {} is {}"".format(n,sum))",Code,Human
3546,"Digits = input(""Enter a number: "")
sum = int(Digits[0])
number = Digits[0]
for i in Digits[1::]:
sum+= int(i)
number +="" + {}"".format(i)
print(""Sum of {} is {}"".format(number,sum))",Code,Human
3547,"Decimal = input(""Enter Number: "")
num = int(Decimal)
Binary =""""
while num>=1:
i = num%2
num = num//2
Binary +=str(i)
print (""Binary Equivalent of {} is {}"".format(Decimal,Binary[::-1]))",Code,Human
3548,"Text = input (""Enter Text: "")
letter, number, spaces , special = 0,0,0,0
for i in Text:
if i.isalpha():
letter+=1
elif i.isspace():
spaces +=1
elif i.isnumeric():
number +=1
else:
special+=1
print("" Alphabets = {} \n Numbers = {} \n Space = {} \n Special Chracter = {}"".format(letter,number,spaces,special))",Code,Human
3549,"class Shape():
def __init__(self,length = 0):
self.length = length
def Area(self):
print(""Area of Shape is 0"")
class Square (Shape):
def __init__(self,length = 0):
self.length = length
def Area(self):
self.area = self.length*self.length
print(""Area of a Square is: {}"".format(self.area))
s1 = Square(2)
s1.Area()",Code,Human
3550,"try:
print(""Division = {}"".format(5/0))
except ZeroDivisionError:
print (""5 cannot be divided by O"")",Code,Human
3551,"Text = input (""Enter Text: "")
Digits = """"
for i in Text:
if i.isnumeric():
Digits +=i+"" ""
print(""Digits used in given strings are: {}"".format(Digits))",Code,Human
3552,"num = int (input (""Enter Number: ""))
sum = 0
for i in range(num+1):
sum += float(i/(i+1))
print (""Sum: {:.2f}"".format(sum))",Code,Human
3553,"def f(n):
if n == 0 :
return 0
else:
return f(n-1)+100
n = int(input(""Enter Number: ""))
print(""f(n-1)+100 = "", f(n))",Code,Human
3554,"def PasswordMatchCriteria(pas):
upper,lower,special,num = 0,0,0,0
for x in pas:
if (len(pas) >= 6) and (len(pas) <=12):
if x.isupper():
upper+=1
elif x.islower():
lower+=1
elif x.isnumeric():
num +=1
elif x.isspace():
j = 0
else:
special += 1
if (upper > 0) and (lower > 0) and (special > 0) and (num > 0):
return True
else:
False
passwords = input(""Enter Passwords which are seperated by \"",\"": "")
password = passwords.split("","")
for i in password:
if PasswordMatchCriteria(i):
print(i)",Code,Human
3555,"def Generator(n):
for i in range(n+1):
if i%7 == 0:
yield i
n = int(input(""Enter Number: ""))
for i in Generator(n):
print(i,end = "" "")",Code,Human
3556,"def rec(n):
if n == 0:
return n
return rec(n-1) + n
n = int(input())
sum = rec(n)
print(sum)",Code,Human
3557,"word = input()
dct = {}
for i in word:
dct[i] = dct.get(i,0) + 1

dct = sorted(dct.items(),key=lambda x: (-x[1],x[0]))
for i in dct:
print(i[0],i[1]",Code,Human
3558,square2 = lambda num: num * num,Code,Human
3559,"people = [""Darcy"", ""Christina"", ""Diana""]
peeps = list(map(lambda name: name.upper(), people))
print(peeps)",Code,Human
3560,"names = ['austin', 'penny', 'anthony', 'rihana', 'billy', 'angel']
a_names = list(filter(lambda name: name[0] == 'a', names))
print(a_names)",Code,Human
3561,"midterms = [80, 91, 78]
finals = [98, 89, 53]
students = ['dan', 'ang', 'kate']
final_grades = dict(zip(students,map(lambda pair: max(pair),zip(midterms, finals))))",Code,Human
3562,"def sum_all(*args):
total = 0
for num in args:
total += num
return total",Code,Human
3563,"def fav_colors(**kwargs):
''' kwargs comes as a dictionary '''
print(kwargs)
for person, color in kwargs.items():
print(f""{person}'s favorite color is {color}"")

fav_colors(sriju=""red"", faizu=""yellow"", kabir=""black"")",Code,Human
3564,"def printWords(s):
s = s.split(' ')

for word in s:
if len(word)%2==0:
print(word)

s = ""This is a python language""
printWords(s)",Code,Human
3565,"ef fact(x):
if x == 0:
return 1
return x * fact(x - 1)

x=int(raw_input())
print (fact(x))",Code,Human
3566,"alues = []
for i in range(1000, 3001):
s = str(i)
if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
values.append(s)
print ("","".join(values))",Code,Human
3567,"s = raw_input()
d={""DIGITS"":0, ""LETTERS"":0}
for c in s:
if c.isdigit():
d[""DIGITS""]+=1
elif c.isalpha():
d[""LETTERS""]+=1
else:
pass
print (""LETTERS"", d[""LETTERS""])
print (""DIGITS"", d[""DIGITS""])",Code,Human
3568,"values = raw_input()
numbers = [x for x in values.split("","") if int(x)%2!=0]
print ("","".join(numbers))",Code,Human
3569,"def putNumbers(n):
i = 0
while i<n:
j=i
i=i+1
if j%7==0:
yield j

for i in reverse(100):
print (i)",Code,Human
3570,"def printDict():
d=dict()
d[1]=1
d[2]=2**2
d[3]=3**2
print (d)
printDict()",Code,Human
3571,"class American(object):
@staticmethod
def printNationality():
print (""America"")

anAmerican = American()
anAmerican.printNationality()
American.printNationality()",Code,Human
3572,"class Shape(object):
def __init__(self):
pass

def area(self):
return 0

class Square(Shape):
def __init__(self, l):
Shape.__init__(self)
self.length = l

def area(self):
return self.length*self.length

aSquare= Square(3)
print (aSquare.area())",Code,Human
3573,"def throws():
return 5/0

try:
throws()
except ZeroDivisionError:
print (""division by zero!"")
except Exception, err:
print ('Caught an exception')
finally:
print ('In finally block for cleanup')",Code,Human
3574,"import math
def bin_search(li, element):
bottom = 0
top = len(li)-1
index = -1
while top>=bottom and index==-1:
mid = int(math.floor((top+bottom)/2.0))
if li[mid]==element:
index = mid
elif li[mid]>element:
top = mid-1
else:
bottom = mid+1

return index

li=[2,5,7,9,11,17,222]
print bin_search(li,11)
print bin_search(li,12)",Code,Human
3575,"li = [12,24,35,70,88,120,155]
li = [x for (i,x) in enumerate(li) if i%2!=0]
print(li)",Code,Human
3576,"for i in range(len(A)):
min_idx = i
for j in range(i+1, len(A)):
if A[min_idx] > A[j]:
min_idx = j

A[i], A[min_idx] = A[min_idx], A[i]",Code,Human
3577,"def bubbleSort(arr):
n = len(arr)

for i in range(n-1):
for j in range(0, n-i-1):
if arr[j] > arr[j+1] :
arr[j], arr[j+1] = arr[j+1], arr[j]

arr = [64, 34, 25, 12, 22, 11, 90]
bubbleSort(arr)",Code,Human
3578,"n=int(input(""Enter any number: ""))
a=list(map(int,str(n)))
b=list(map(lambda x:x**3,a))
if(sum(b)==n):
print(""The number is an armstrong number. "")
else:
print(""The number isn't an arsmtrong number. "")",Code,Human
3579,"n = int(input(""Enter any number: ""))
sum1 = 0
for i in range(1, n):
if(n % i == 0):
sum1 = sum1 + i
if (sum1 == n):
print(""The number is a Perfect number!"")
else:
print(""The number is not a Perfect number!"")",Code,Human
3580,"sum1=0
num=int(input(""Enter a number:""))
temp=num
while(num):
i=1
f=1
r=num%10
while(i<=r):
f=f*i
i=i+1
sum1=sum1+f
num=num//10
if(sum1==temp):
print(""The number is a strong number"")
else:
print(""The number is not a strong number"")",Code,Human
3581,"a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
if(a>b):
min1=a
else:
min1=b
while(1):
if(min1%a==0 and min1%b==0):
print(""LCM is:"",min1)
break
min1=min1+1",Code,Human
3582,"def is_power_of_two(n):
""""""Return True if n is a power of two.""""""
if n <= 0:
return False
else:
return n & (n - 1) == 0


n = int(input('Enter a number: '))

if is_power_of_two(n):
print('{} is a power of two.'.format(n))
else:
print('{} is not a power of two.'.format(n))

#Write a python program to find length of list using recursion
def length(lst):
if not lst:
return 0
return 1 + length(lst[1::2]) + length(lst[2::2])
a=[1,2,3]
print(""Length of the string is: "")
print(a)",Code,Human
3583,"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)",Code,Human
3584,"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)",Code,Human
3585,"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')",Code,Human
3586,"length = 10
width = 5
print(f'Area: {length * width}')",Code,Human
3587,"side = 5
print(f'Area: {side * side}')",Code,Human
3588,"number_dict = {
1: 'one',
2: 'two',
3: 'three',
4: 'four',
5: 'five'
}",Code,Human
3589,"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]",Code,Human
3590,"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]

###",Code,Human
3591,,Code,Human
3592,"def make_all_positive(nums):
return [num if num > 0 else -num for num in nums]",Code,Human
3593,"def make_all_negative(nums):
return [num if num < 0 else -num for num in nums]",Code,Human
3594,"def get_punctuations(sentence):
punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
used_punctuation = set()
for char in sentence:
if char in punctuations:
used_punctuation.add(char)
return used_punctuation",Code,Human
3595,"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))",Code,Human
3596,"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))",Code,Human
3597,"myset = {1, 2, 4, 7}
mylist = list(myset)",Code,Human
3598,"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}",Code,Human
3599,"def is_prod_even(num1, num2):
sum = num1 + num2
return not sum % 2",Code,Human
3600,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])",Code,Human
3601,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])",Code,Human
3602,"num1 = 1.5
num2 = 6.3
difference = num1 - num2
print(f'Difference: {difference}')",Code,Human
3603,"import random
print(random.sample(range(10, 20), 5))",Code,Human
3604,"i = 10
del i",Code,Human
3605,a = b = c = 1,Code,Human
3606,"(x, y) = (1, 2)
print(f'Before swapping: x: {x}, y: {y}')
(y, x) = (x, y)
print(f'After swapping: x: {x}, y: {y}')",Code,Human
3607,"a = 60
b = 13
a_and_b = a&b
print(a_and_b)",Code,Human
3608,"a = 60
b = 13
a_or_b = a|b
print(a_or_b)",Code,Human
3609,"a = 60
b = 13
a_xor_b = a^b
print(a_xor_b)",Code,Human
3610,"a = 60
ones_complement_a = ~a
print(ones_complement_a)",Code,Human
3611,"a = 60
binary_left_shift = a<<2
print(binary_left_shift)",Code,Human
3612,"a = 60
binary_right_shift = a>>2
print(binary_right_shift)",Code,Human
3613,"def item_exists(lst, item):
    if item in lst:
        return True
    else:
        return False",Code,Human
3614,"def get_type(var):
    return(type(var))",Code,Human
3615,"def check_instance(derived_class, base_class):
    return(isinstance(derived_class, base_class))",Code,Human
3616,"def get_userinput():
    while(1):
        do_continue = raw_input('Do you want to continue(y/n)?')
        if do_continue == 'y' or do_continue == 'n':
            return do_continue",Code,Human
3617,str1 = r'hello\n',Code,Human
3618,"def get_prime_numbers(range1, range2):
    for num in range(range1,range2):
        for i in range(2,num):
            if num%i == 0:
                j=num/i
                break
        else:
            print(num, 'is a prime number')",Code,Human
3619,"def get_max_integer():
    import sys
    return sys.maxsize",Code,Human
3620,"def get_absolute_value(i):
    return(abs(i))",Code,Human
3621,"def get_exponential_value(i):
    import math
    return(math.exp(i))",Code,Human
3622,"def get_natural_log_value(i):
    import math
    return(math.log(i))",Code,Human
3623,"def get_natural_log_value(i):
    import math
    return(math.log10(i))",Code,Human
3624,"def get_sqrt(i):
    import math
    return(math.sqrt(i))",Code,Human
3625,"lst = [23, 10, 55, 43]
lst.sort()
max = lst[-1]",Code,Human
3626,"lst = [23, 10, 55, 43]
lst.sort()
min = lst[0]",Code,Human
3627,"import random
print(random.uniform(0, 1))",Code,Human
3628,"str1 = 'hello'
str2 = ' world!'
print(str1 + str2)",Code,Human
3629,"str1 = 'a'
print(ord(str1))",Code,Human
3630,"import datetime
print(datetime.datetime.now())",Code,Human
3631,"str1 = 'hello'
print(str1.capitalize())",Code,Human
3632,"a = [1, 2, 3]
b = a[:]",Code,Human
3633,"a = [1, 2, 3]
print(a[::-1])",Code,Human
3634,"basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
print(sorted(basket))",Code,Human
3635,"def union_set(set1, set2):
    return set1|set2",Code,Human
3636,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))",Code,Human
3637,"path = '/home'
import os
print(os.listdir(path))",Code,Human
3638,"path = 'test'
import os
os.mkdir(path)",Code,Human
3639,"X = [[1,2,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[9,8,7],
    [6,5,4],
    [3,2,1]]

result = [[X[i][j] + Y[i][j]  for j in range
(len(X[0]))] for i in range(len(X))]

for r in result:
    print(r)",Code,Human
3640,"def isPalindrome(s):
    return s == s[::-1]",Code,Human
3641,"test_str = ""this is test string""
all_freq = {}
for i in test_str:
    if i in all_freq:
        all_freq[i] += 1
    else:
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)
print(res)",Code,Human
3642,"lst = range(5)
print(sum(lst))",Code,Human
3643,"def merge_dict(dict1, dict2):
    return(dict2.update(dict1))

dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
merge_dict(dict1, dict2)
print(dict2)",Code,Human
3644,"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))",Code,Human
3645,"def is_even(num):
    return((num % 2) == 0)",Code,Human
3646,"def is_odd(num):
    return((num % 2) != 0)",Code,Human
3647,"def is_leap_year(year):
    if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                return True 
            else:
                return False
        else:
            return True 
    else:
        return False",Code,Human
3648,"num1 = float(input(""Enter first number: ""))
num2 = float(input(""Enter second number: ""))
num3 = float(input(""Enter third number: ""))

if (num1 >= num2) and (num1 >= num3):
   largest = num1
elif (num2 >= num1) and (num2 >= num3):
   largest = num2
else:
   largest = num3

print(""The largest number is"", largest)",Code,Human
3649,"num = int(input(""Enter a number: ""))

factorial = 1

if num < 0:
   print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
   print(""The factorial of 0 is 1"")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print(""The factorial of"",num,""is"",factorial)",Code,Human
3650,"nterms = int(input(""How many terms? ""))

n1, n2 = 0, 1
count = 0

if nterms <= 0:
   print(""Please enter a positive integer"")
elif nterms == 1:
   print(""Fibonacci sequence upto"",nterms,"":"")
   print(n1)
else:
   print(""Fibonacci sequence:"")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       n1 = n2
       n2 = nth
       count += 1",Code,Human
3651,"X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]

for i in range(len(X)):
   for j in range(len(X[0])):
       result[j][i] = X[i][j]

for r in result:
   print(r)",Code,Human
3652,"kilometers = float(input(""Enter value in kilometers: ""))

conv_fac = 0.621371

miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' %(kilometers,miles))",Code,Human
3653,"num = float(input(""Enter a number: ""))
if num > 0:
   print(""Positive number"")
elif num == 0:
   print(""Zero"")
else:
   print(""Negative number"")",Code,Human
3654,"num = int(input(""Enter a number: ""))

if num > 1:
   for i in range(2,num):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           print(i,""times"",num//i,""is"",num)
           break
   else:
       print(num,""is a prime number"")
else:
   print(num,""is not a prime number"")",Code,Human
3655,"def compute_hcf(x, y):
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
    return hcf",Code,Human
3656,"def compute_lcm(x, y):
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))",Code,Human
3657,"def print_factors(x):
   print(""The factors of"",x,""are:"")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)",Code,Human
3658,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = input(""Enter a string: "")

no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char

print(no_punct)",Code,Human
3659,"vowels = 'aeiou'

ip_str = 'Hello, have you tried our tutorial section yet?'

ip_str = ip_str.casefold()

count = {}.fromkeys(vowels,0)

for char in ip_str:
   if char in count:
       count[char] += 1

print(count)",Code,Human
3660,"import datetime
print(datetime.date(2015, 6, 16).isocalendar()[1])

from datetime import date, timedelta

def all_sundays(year):
       dt = date(year, 1, 1)
       dt += timedelta(days = 6 - dt.weekday())
       while dt.year == year:
          yield dt
          dt += timedelta(days = 7)

for s in all_sundays(2020):
    print(s)",Code,Human
3661,"import calendar
year = 2020
month = 12 
print(calendar.monthrange(year, month)[1])",Code,Human
3662,"from datetime import datetime
date_object = datetime.strptime('Jul 1 2014 2:43PM', '%b %d %Y %I:%M%p')
print(date_object)",Code,Human
3663,"from datetime import date, timedelta
dt = date.today() - timedelta(5)
print('Current Date :',date.today())
print('5 days before Current Date :',dt)",Code,Human
3664,"import datetime
today = datetime.datetime.now()
day_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1
print(day_of_year)",Code,Human
3665,"string = ""India is my country.""
string_list = string.split(' ')
print(string_list)",Code,Human
3666,"num1 = 1.5
num2 = 6.3
product = num1 * num2
print(f'product: {product}')",Code,Human
3667,"#import datetime
import datetime

 #asking name
name = input('Type your name:')

 #asking age
age = input('Type your age:')

 #get the current year
now = datetime.datetime.now()

 #get difference between age x 100 years
diff = 100 - int(age)

 #show exactly year that user will turn 100 years old

print('Hi '+name+"" you will complete 100 years in "",(now.year+diff))",Code,Human
3668,"number = int(input(""Number: ""))

if number%2 == 0 and number%4 != 0:
print(""Your number is even..."")
elif number%4 == 0:
print(""Your number is a multiple of 4"")
else:
print(""Your number is odd..."")",Code,Human
3669,"def triangle_check(l1,l2,l3):
    if (l1>l2+l3) or (l2>l1+l3) or (l3>l1+l2):
        print('No, the lengths wont form a triangle')
    elif (l1==l2+l3) or (l2==l1+l3) or (l3==l1+l2):
        print('yes, it can form a degenerated triangle')
    else:
        print('Yes, a triangle can be formed out of it')
length1 = int(input('enter side 1\n'))
length2 = int(input('enter side 2\n'))
length3 = int(input('enter side 3\n'))
triangle_check(length1,length2,length3)",Code,Human
3670,"x = input(""Enter a string! "")
d=l=0
for c in x:
    if c.isdigit():
        d = d + 1
    elif c.isalpha():
        l = l + 1
    else:
        pass
print(""Letters: "", l)
print(""Digits: "", d)",Code,Human
3671,"x = (1, 2, 3, 4, 5, 6, 7, 8, 9)
odd = even = 0
for i in x:
    if i % 2 == 0:
        even = even + 1
    else:
        odd = odd + 1
        
print(""Even Numbers are: "", even)
print(""Odd Numbers are: "", odd)",Code,Human
3672,"nl = []
for x in range(1500, 2700):
    if (x%7==0) and (x%5==0):
        nl.append(str(x))
print(""\n"".join(nl))",Code,Human
3673,"import random
import math

x = math.floor((random.random() * 10) + 1)
guess=0
while guess != x:
    guess = int(input(""Guess a number: ""))
    if(guess == x):
        print(""you got It!"")
        print(""Number is "", x)
        break
    elif(guess>x):
        print(""You Guesses too high!"")
    else:
        print(""You guessed too low!"")",Code,Human
3674,,Code,Human
3675,,Code,Human
3676,,Code,Human
3677,,Code,Human
3678,"print(""Input lengths of the triangle sides: "")
x = int(input(""x: ""))
y = int(input(""y: ""))
z = int(input(""z: ""))
if x == y == z:
 print(""Equilateral triangle"")
elif x != y != z:
 print(""Scalene triangle"")
else:
 print(""isosceles triangle"")",Code,Human
3679,"l = input(""Input a letter of the alphabet: "")
if l in ('a', 'e', 'i', 'o', 'u'):
    print(""%s is a vowel."" % l)
elif l == 'y':
    print(""Sometimes letter y stand for vowel, sometimes stand for consonant."")
else:
    print(""%s is a consonant."" % l)",Code,Human
3680,,Code,Human
3681,,Code,Human
3682,"s = ['a','b','c','d']
x = """".join(s)
print(x)",Code,Human
3683,"def is_Sublist(l, s):
    sub_set = False
    if s == []:
        sub_set = True
    elif s == l:
        sub_set = True
    elif len(s) > len(l):
        sub_set = False
 
    else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i+n] == s[n]):
                    n += 1
                
                if n == len(s):
                    sub_set = True
 
    return sub_set
 
a = [2,4,3,5,7]
b = [4,3]
c = [3,7]
print(is_Sublist(a, b))
print(is_Sublist(a, c))",Code,Human
3684,,Code,Human
3685,,Code,Human
3686,,Code,Human
3687,,Code,Human
3688,,Code,Human
3689,"color1 = ""Red"", ""Green"", ""Orange"", ""White""
color2 = ""Black"", ""Green"", ""White"", ""Pink""
print(set(color1) & set(color2))",Code,Human
3690,"import random 

n = random() * 900 + 100 
n = int(n) 
print(n) 

a = n // 100 
b = (n // 10) % 10 
c = n % 10 

print(a + b + c)

#Write a Python program to find the area and perimeter of a right-angled triangle and print the perimeter and area.

import math 

AB = input(""Length of the first leg: "") 
AC = input(""Length of the second leg: "") 
AB = float(AB) 
AC = float(AC) 

BC = math.sqrt(AB  2 + AC  2) S = (AB * AC) / 2

P = AB + AC + BC 
print(""Area of the triangle: %.2f"" % S)
print(""Perimeter of the triangle: %.2f"" % P)",Code,Human
3691,"a = int(input())
b = int(input())

while a != 0 and b != 0:
    if a > b:
        a %= b
    else:
        b %= a

gcd = a + b
print(gcd)",Code,Human
3692,"s = input()
l = len(s)

i = 0
while i < l:
    num = ''
    symbol = s[i]
    while symbol.isdigit():
        num += symbol
        i += 1
        if i < l:
            symbol = s[i]
        else:
            break
    if num != '':
        print(num)
    i += 1",Code,Human
3693,,Code,Human
3694,"first = input(""The first: "")
last = input(""The last: "")

while first <= last:
    print(first, end='')
    first = chr(ord(first) + 1)
print()",Code,Human
3695,"def max2(x):
    if x[0] > x[1]:
        m1,m2 = (x[0],x[1])
    else:
        m1,m2 = (x[1],x[0])

    for i in range(2, len(x)):
        if x[i] > m1:
            m2 = m1
            m1 = x[i]
        elif x[i] > m2:
            m2 = x[i]
    return m1,m2",Code,Human
3696,,Code,Human
3697,,Code,Human
3698,,Code,Human
3699,,Code,Human
3700,"import collections
my_list = [10,10,10,10,20,20,20,20,40,40,50,50,30]
print(""Original List : "",my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "",ctr)",Code,Human
3701,,Code,Human
3702,,Code,Human
3703,"import itertools
print(list(itertools.permutations([1,2,3])))",Code,Human
3704,,Code,Human
3705,,Code,Human
3706,"a = [10,20,30,20,10,50,60,40,80,50,40]
dup_items = set()
uniq_items = []
for x in a:
    if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)
print(uniq_items)",Code,Human
3707,,Code,Human
3708,,Code,Human
3709,,Code,Human
3710,,Code,Human
3711,"def second_smallest(numbers):
    a1, a2 = float('inf'), float('inf')
    for x in numbers:
        if x <= a1:
            a1, a2 = x, a1
        elif x < a2:
            a2 = x
    return a2
print(second_smallest([1, 2, -8, -2, 0]))",Code,Human
3712,"string = input()

length = len(string)

lower = upper = 0

for i in string:
    if i.islower():
        lower += 1
    elif i.isupper():
        upper += 1

per_lower = lower / length * 100
per_upper = upper / length * 100
print(""Lower: %.2f%%"" % per_lower)
print(""Upper: %.2f%%"" % per_upper)",Code,Human
3713,"from random import random

a = []
for i in range(7):
    n = int(random() * 20) - 10
    a.append(n)

print(a)

neg = []
pos = []
for i in a:
    if i < 0:
        neg.append(i)
    elif i > 0:
        pos.append(i)

print(neg)
print(pos)",Code,Human
3714,"s = input()
print(s.swapcase())",Code,Human
3715,"from random import randint

N = 7
a = []

for i in range(N):
    a.append(randint(1, 20))
print(a)

for i in range(N-1):
    for j in range(N-i-1):
        if a[j] > a[j+1]:
            b = a[j]
            a[j] = a[j+1]
            a[j+1] = b

print(a)",Code,Human
3716,"x = int(input(""Enter any no. "")) 

def perfect_number(n): 
    sum = 0 
    for x in range(1, n): 
        if n % x == 0: 
            sum += x 
    return sum == n

print(perfect_number(x))",Code,Human
3717,"string = ""python java c c++ javascript pascal php""

print(string)

words = string.split()

id_longest = 0

for i in range(1, len(words)):
    if len(words[id_longest]) < len(words[i]):
        id_longest = i

print(words[id_longest])",Code,Human
3718,"d =  {'a':1,'b':2,'c':3,'d':4}
print(d.values())",Code,Human
3719,"d =  {'a':1,'b':2,'c':3,'d':4}
print(d.keys())",Code,Human
3720,"s = ""I love India   now I will be printed without any space""
for i in s:
    if i==' ': continue
    print(i,end='')",Code,Human
3721,"s = ""hi i love python""

i=0
while s[i]!='t':
    print(s[i],end='')
    i+=1",Code,Human
3722,"sample_str = ""Python is good for datascience""
print(len(sample_str))",Code,Human
3723,"sample_list = [1, 2, 3, 4, 5, 6, 7]
square_list =  [x * x for x in sample_list]
print(square_list)",Code,Human
3724,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}

print(set1.union(set2))",Code,Human
3725,"N = 20
number_list = [ x for x in range(N) if x % 2 == 0]
print(f'List of Even Numbers:', number_list)",Code,Human
3726,"N = 20
number_list = [ x for x in range(N) if x % 2 != 0]
print(f'List of Odd Numbers:', number_list)",Code,Human
3727,"def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))",Code,Human
3728,"remainder = lambda Divident, Divisor: Divident % Divisor
print(remainder(5,2))",Code,Human
3729,"def leapYear(year):
    if (year % 4) == 0:
       if (year % 100) == 0:
           if (year % 400) == 0:
               print(""{0} is a leap year"".format(year))
           else:
               print(""{0} is not a leap year"".format(year))
       else:
           print(""{0} is a leap year"".format(year))
    else:
       print(""{0} is not a leap year"".format(year))",Code,Human
3730,"def fahrenheit(celsius):
    return (celsius * 1.8) + 32",Code,Human
3731,"def celsius(fahrenheit):
    return (fahrenheit - 32) / 1.8",Code,Human
3732,"def factorial(n):
    if n == 1:
        return n
    else:
        return n*factorial(n-1)",Code,Human
3733,"def hcf(x, y):

    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf",Code,Human
3734,"def lcm(x, y):

   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm",Code,Human
3735,"def Armstrong(num):
    sum = 0
    temp = num
    while temp > 0:
       digit = temp % 10
       sum += digit ** 3
       temp //= 10
   
    if num == sum:
       print(num,""is an Armstrong number"")
    else:
       print(num,""is not an Armstrong number"")",Code,Human
3736,"def palindrome(my_str):
    my_str = my_str.casefold()
    rev_str = reversed(my_str)
    if list(my_str) == list(rev_str):
       print(""The string is a palindrome."")
    else:
       print(""The string is not a palindrome."")",Code,Human
3737,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
 string = ''.join(e for e in d if e not in punctuations)",Code,Human
3738,"c = 'p'
 print(""The ASCII value of '"" + c + ""' is"", ord(c))",Code,Human
3739,"a = 1
 b = 2
 a, b = b, a",Code,Human
3740,"x = lambda a, b, c : a + b + c
 print(x(5, 6, 2))",Code,Human
3741,"def isMagic(n): 
    sum = 0
    
    while (n > 0 or sum > 9): 
        if (n == 0): 
            n = sum; 
            sum = 0; 
        sum = sum + n % 10; 
        n = int(n / 10); 
        
    return True if (sum == 1) else False;",Code,Human
3742,"kilometer = [39.2, 36.5, 37.3, 37.8]
 feet = map(lambda x: float(3280.8399)*x, kilometer)
 print(list(feet))",Code,Human
3743,"list_of_list = [[1,2,3],[4,5,6],[7,8]]`
 flatten = [y for x in list_of_list for y in x]",Code,Human
3744,"matrix = [[1,2,3],[4,5,6],[7,8,9]]
 matrixT = [[row[i] for row in matrix] for i in range(len(matrix[0]))]",Code,Human
3745,"string = ""Hello 12345 World""
 numbers = [x for x in string if x.isdigit()]
 print (numbers)",Code,Human
3746,"def binary_search(arr, low, high, x): 
    if high >= low: 
  
        mid = (high + low) // 2
        if arr[mid] == x: 
            return mid 
        elif arr[mid] > x: 
            return binary_search(arr, low, mid - 1, x) 

        else: 
            return binary_search(arr, mid + 1, high, x) 
    else: 
        return -1",Code,Human
3747,"def bubbleSort(arr): 
    n = len(arr) 

    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j]",Code,Human
3748,"A = [64, 25, 12, 22, 11] 

for i in range(len(A)): 

    min_idx = i 
    for j in range(i+1, len(A)): 
        if A[min_idx] > A[j]: 
            min_idx = j 
      
    A[i], A[min_idx] = A[min_idx], A[i] 

print (""Sorted array"") 
for i in range(len(A)): 
    print(""%d"" %A[i])",Code,Human
3749,"def insertionSort(arr): 
    for i in range(1, len(arr)): 
  
        key = arr[i] 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key",Code,Human
3750,"lower = 5
 upper = 20

 print(""Prime numbers between"", lower, ""and"", upper, ""are:"")

 for num in range(lower, upper + 1):
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)",Code,Human
3751,"num = 407
if num > 1:
   for i in range(2,num):
       if (num % i) == 0:
           print(num,""is not a prime number"")
           print(i,""times"",num//i,""is"",num)
           break
   else:
       print(num,""is a prime number"")
       
else:
   print(num,""is not a prime number"")",Code,Human
3752,"def search(arr, n, x): 
    for i in range(0, n): 
        if (arr[i] == x): 
            return i 
    return -1",Code,Human
3753,"def isLucky(n):
    
    isLucky.counter = 2
    next_position = n 
    if isLucky.counter > n:
        return 1
    if n % isLucky.counter == 0:
        return 0
    next_position = next_position - next_position /isLucky.counter
    isLucky.counter = isLucky.counter + 1
    return isLucky(next_position)",Code,Human
3754,"def squareRoot(n): 
        x = n 
        y = 1
        e = 0.000001
        while(x - y > e):  
            x = (x + y)/2
            y = n / x   
        return x",Code,Human
3755,"def decToBinary(n): 
    binaryNum = [0] * n;  
    i = 0; 
    while (n > 0):   
        binaryNum[i] = n % 2; 
        n = int(n / 2); 
        i += 1; 
    for j in range(i - 1, -1, -1): 
        print(binaryNum[j], end = """");",Code,Human
3756,"def binaryToDecimal(n):
    num = n;
    dec_value = 0;
    base = 1;  
    temp = num;
    while(temp):
        last_digit = temp % 10;
        temp = int(temp / 10);
         
        dec_value += last_digit * base;
        base = base * 2;
    return dec_value;",Code,Human
3757,"def decToOctal(n):
    octalNum = [0] * 100
    i = 0
    while (n != 0):
        octalNum[i] = n % 8
        n = int(n / 8)
        i += 1
    for j in range(i - 1, -1, -1):
        print(octalNum[j], end="""")",Code,Human
3758,"def octalToDecimal(n): 
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit * base; 
        base = base * 8; 
  
    return dec_value;",Code,Human
3759,"square_dict = {num: num*num for num in range(1, 11)}
  print(square_dict)",Code,Human
3760,"l1 = [""eat"",""sleep"",""repeat""] 
  for ele in enumerate(l1): 
      print (ele)",Code,Human
3761,"l1 = [""eat"",""sleep"",""repeat""] 
  for count,ele in enumerate(l1,100): 
      print (count,ele )",Code,Human
3762,"def addition(n): 
    return n + n   
  numbers = (1, 2, 3, 4) 
  result = map(addition, numbers) 
  print(list(result))",Code,Human
3763,"def simple_interest(p,t,r):  
    si = (p * t * r)/100    
    return si",Code,Human
3764,"def compound_interest(principle, rate, time): 
    Amount = principle * (pow((1 + rate / 100), time)) 
    CI = Amount - principle 
    print(""Compound interest is"", CI)",Code,Human
3765,"def convert(s): 
     str1 = """" 
     return(str1.join(s))",Code,Human
3766,"def isPerfect( n ): 
     sum = 1
     i = 2
     while i * i <= n: 
         if n % i == 0: 
             sum = sum + i + n/i 
         i += 1
     return (True if sum == n and n!=1 else False)",Code,Human
3767,"def digSum(n): 
    sum = 0
    while(n > 0 or sum > 9): 
      
        if(n == 0): 
            n = sum
            sum = 0         
        sum += n % 10
        n = int(n/10)    
    return sum",Code,Human
3768,"def getSum(n):     
    sum = 0
    for digit in str(n):   
      sum += int(digit)        
    return sum",Code,Human
3769,"def largest(arr,n): 
    max = arr[0] 
    for i in range(1, n): 
        if arr[i] > max: 
            max = arr[i] 
    return max",Code,Human
3770,"def catalan(n): 
    if n <= 1: 
        return 1
    res = 0
    for i in range(n): 
        res += catalan(i) * catalan(n-i-1) 
    return res",Code,Human
3771,"def decToHexa(n): 
    hexaDeciNum = ['0'] * 100; 
    i = 0; 
    while(n != 0):  
        temp = 0;  
        temp = n % 16; 
        if(temp < 10): 
            hexaDeciNum[i] = chr(temp + 48); 
            i = i + 1; 
        else: 
            hexaDeciNum[i] = chr(temp + 55); 
            i = i + 1; 
        n = int(n / 16); 
    j = i - 1; 
    while(j >= 0): 
        print((hexaDeciNum[j]), end = """"); 
        j = j - 1;",Code,Human
3772,"def hexadecimalToDecimal(hexval): 
    length = len(hexval) 
    base = 1
    dec_val = 0
    for i in range(length - 1, -1, -1):  
        if hexval[i] >= '0' and hexval[i] <= '9': 
            dec_val += (ord(hexval[i]) - 48) * base 
            base = base * 16
        elif hexval[i] >= 'A' and hexval[i] <= 'F': 
            dec_val += (ord(hexval[i]) - 55) * base 
            base = base * 16
    return dec_val",Code,Human
3773,"a = ""B""
 b = ""C""
 sum = hex(int(a, 16) + int(b, 16)) 
 print(sum[2:])",Code,Human
3774,"a = ""123""
 b = ""456""
 sum = oct(int(a, 8) + int(b, 8)) 
 print(sum[2:])",Code,Human
3775,"a = ""1101""
 b = ""100""
 sum = bin(int(a, 2) + int(b, 2))  
 print(sum[2:])",Code,Human
3776,"A = {1, 2, 3, 4, 5}
 B = {4, 5, 6, 7, 8}
 print(A | B)",Code,Human
3777,"A = {1, 2, 3, 4, 5}
 B = {4, 5, 6, 7, 8}
 print(A & B)",Code,Human
3778,"A = {1, 2, 3, 4, 5}
 B = {4, 5, 6, 7, 8}
 print(A - B)",Code,Human
3779,"A = {1, 2, 3, 4, 5}
 B = {4, 5, 6, 7, 8}
 print(A ^ B)",Code,Human
3780,"def nCr(n, r): 

    def fact(n): 
        res = 1
        for i in range(2, n+1): 
            res = res * i 
        return res
    
    return (fact(n) / (fact(r)  
                * fact(n - r)))",Code,Human
3781,"def nPr(n, r):  
    
    def fact(n):  
        if (n <= 1): 
            return 1
        return n * fact(n - 1)

    return int(fact(n) /
                fact(n - r))",Code,Human
3782,"def volumeOfEllipsoid(r1, r2, r3): 
    return 1.33 * 22 * r1 * r2 * r3/7",Code,Human
3783,"def area_of_tetrahedron(side): 
    return (1.73205 * 
           (side * side));",Code,Human
3784,"def vol_tetra(side): 
    volume = (side ** 3 / (6 * 1.414)) 
    return round(volume, 2)",Code,Human
3785,"def CubeVolume(d): 
    Volume = (1.73205 * pow(d, 3)) / 9
    return Volume",Code,Human
3786,"def gaussEaster(Y):
    A = Y % 19
    B = Y % 4
    C = Y % 7

    P = int(Y / 100)
    Q = int((13 + 8 * P) / 25)
    M = (15 - Q + P - P // 4) % 30
    N = (4 + P - P // 4) % 7
    D = (19 * A + M) % 30
    E = (2 * B + 4 * C + 6 * D + N) % 7
    days = (22 + D + E)
    if ((D == 29) and (E == 6)):
        print(Y, ""-04-19"")
        return
    elif ((D == 28) and (E == 6)):
        print(Y, ""-04-18"")
        return

    else:
        if (days > 31):
            print(Y, ""-04-"", (days - 31))
            return

        else:
            print(Y, ""-03-"", days)
            return

 #write a python function to print the pascal's triangle
 
 def printPascal(n):  
  
    for line in range(1, n + 1):  
        C = 1; 
        for i in range(1, line + 1):   
            print(C, end = "" "");  
            C = int(C * (line - i) / i);  
        print("""");

 #write a python function to print Hosoya's triangle of height 'n'

 def printHosoya(n): 
    dp = [[0 for i in range(n)]  
             for i in range(n)] 
               
    dp[0][0] = dp[1][0] = dp[1][1] = 1
    for i in range(2, n): 
        for j in range(n):  
            if (i > j): 
                dp[i][j] = (dp[i - 1][j] + 
                            dp[i - 2][j]) 
            else: 
                dp[i][j] = (dp[i - 1][j - 1] +
                            dp[i - 2][j - 2]) 
    for i in range(n): 
        for j in range(i + 1): 
            print(dp[i][j], end = ' ') 
        print() 
  
  #write a python function to print Floyd's triangle
  
  def loydTriangle(n):   
    val = 1
    for i in range(1, n + 1): 
  
        for j in range(1, i + 1): 
            print(val, end = "" "") 
            val += 1       
        print("""") 
        
 #write a python function to print reverese Floyd's triangle
 
 def printReverseFloyd(n): 
  
    curr_val = int(n*(n + 1)/2) 
    for i in range(n + 1, 1, -1): 
        for j in range(i, 1, -1): 
            print(curr_val, end =""  "") 
            curr_val -= 1       
        print("""")",Code,Human
3787,"def reverseFibonacci(n): 
   
    a = [0] * n  
    a[0] = 0 
    a[1] = 1   
    for i in range(2, n):   
        a[i] = a[i - 2] + a[i - 1]  
    for i in range(n - 1, -1 , -1):    
        print(a[i],end="" "")",Code,Human
3788,"def LeibnizHarmonicTriangle(n): 
    C = [[0 for x in range(n + 1)]  
            for y in range(n + 1)]; 
    for i in range(0, n + 1): 
        for j in range(0, min(i, n) + 1): 
            if (j == 0 or j == i): 
                C[i][j] = 1;  
            else: 
                C[i][j] = (C[i - 1][j - 1] + 
                           C[i - 1][j]);  
    for i in range(1, n + 1): 
        for j in range(1, i + 1): 
            print(""1/"", end = """"); 
            print(i * C[i - 1][j - 1],  
                           end = "" ""); 
        print();",Code,Human
3789,"def checkIsAP(arr, n): 
    if (n == 1): return True
    arr.sort() 
    d = arr[1] - arr[0] 
    for i in range(2, n): 
        if (arr[i] - arr[i-1] != d): 
            return False
  
    return True",Code,Human
3790,"def is_geometric(li): 
    if len(li) <= 1: 
        return True
    ratio = li[1]/float(li[0]) 
    for i in range(1, len(li)): 
        if li[i]/float(li[i-1]) != ratio:  
            return False
    return True",Code,Human
3791,"def area_cicumscribed(a): 
    return (a * a * (3.14159265 / 3))",Code,Human
3792,"def octaside(a): 
    if a < 0: 
        return -1
    s = a / (1.414 + 1) 
    return s",Code,Human
3793,"length = 6
  Nonagon_area = 6.1818 * (length ** 2)  
  print(""Area of regular Nonagon is = "", Nonagon_area)",Code,Human
3794,"def dayofweek(d, m, y): 
    t = [ 0, 3, 2, 5, 0, 3, 
          5, 1, 4, 6, 2, 4 ] 
    y -= m < 3
    return (( y + int(y / 4) - int(y / 100) 
             + int(y / 400) + t[m - 1] + d) % 7)",Code,Human
3795,"def MDAS_Factorial( N ):   
    if N <= 2: 
        return N 
    if N <= 4: 
        return N + 3      
    if (N - 4) % 4 == 0: 
        return N + 1
    elif (N - 4) % 4 <= 2: 
         return N + 2
    else: 
         return N - 1",Code,Human
3796,"def findRectNum(n): 
    return n*(n + 1) 
 
 #write a python function to find the sum of N pronic numbers

 def calculateSum(N): 
  
    return (N * (N - 1) // 2 + 
            N * (N - 1) * (2 * 
                 N - 1) // 6); 
  
  #write a python function to find the sum of first N even numbers
  
  def evensum(n): 
    curr = 2
    sum = 0
    i = 1 
    while i <= n: 
        sum += curr  
        curr += 2
        i = i + 1
    return sum",Code,Human
3797,"def check(n): 
  if n % 2 == 1 and n > 5: 
    print('YES') 
  else: 
    print('NO')",Code,Human
3798,"def per(n): 
  
    if (n == 0): 
        return 3; 
    if (n == 1): 
        return 0; 
    if (n == 2): 
        return 2; 
    return per(n - 2) + per(n - 3);",Code,Human
3799,"def BetrothedNumbers(n) : 
      
    for num1 in range (1,n) :  
        sum1 = 1    
        i = 2
        while i * i <= num1 : 
            if (num1 % i == 0) : 
                sum1 = sum1 + i 
                if (i * i != num1) : 
                    sum1 += num1 / i 
            i =i + 1
        if (sum1 > num1) : 
              
            num2 = sum1 - 1
            sum2 = 1
            j = 2
            while j * j <= num2 : 
                if (num2 % j == 0) : 
                    sum2 += j 
                    if (j * j != num2) : 
                        sum2 += num2 / j 
                j = j + 1
            if (sum2 == num1+1) : 
                print ('('+str(num1)+', '+str(num2)+')')",Code,Human
3800,"def extrapolate(d, x): 
    y = (d[0][1] + (x - d[0][0]) / 
        (d[1][0] - d[0][0]) * 
        (d[1][1] - d[0][1]));    
    return y;",Code,Human
3801,"def printCollatz(n): 
    while n != 1: 
        print(n, end = ' ') 
        if n & 1: 
            n = 3 * n + 1
        else: 
            n = n // 2  
    print(n)",Code,Human
3802,"def sequence(n): 
    f = [0, 1, 1] 
    print(f[1], end="" ""), 
    print(f[2], end="" ""), 
    for i in range(3,n+1): 
        f.append( f[f[i - 1]] + f[i - f[i - 1]]) 
        print(f[i], end="" ""), 
     
 #write a python function to find the nth term in a padovan's sequence",Code,Human
3803,"def padovan(n): 
    pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1 
    for i in range(3, n+1): 
        pNext = pPrevPrev + pPrev 
        pPrevPrev = pPrev 
        pPrev = pCurr 
        pCurr = pNext 
  
    return pNext;",Code,Human
3804,"def recaman(n): 
    arr = [0] * n  
    arr[0] = 0
    print(arr[0], end="", "") 
    for i in range(1, n):     
        curr = arr[i-1] - i 
        for j in range(0, i):  
            if ((arr[j] == curr) or curr < 0): 
                curr = arr[i-1] + i 
                break              
        arr[i] = curr 
        print(arr[i], end="", "")",Code,Human
3805,"def printSequence(n) : 
    a = 1
    ans = 2 
    N = 1000000007
    i = 1
    while i <= n : 
        print ans, 
        ans = ((a % N) * (ans % N)) % N 
        a = ans 
        ans = (ans + 1) % N 
        i = i + 1",Code,Human
3806,"def Add(x, y): 
    while (y != 0): 
        carry = x & y 
        x = x ^ y 
        y = carry << 1     
    return x",Code,Human
3807,"def subtract(x, y):  
    while (y != 0): 
        borrow = (~x) & y 
        x = x ^ y 
        y = borrow << 1
      
    return x",Code,Human
3808,"def minSub(N):
    count = 0
    while (N >= 0):
        num = N
        rev = 0
        while (num != 0):
            digit = num % 10
            rev = (rev * 10) + digit
            num = num // 10
        if (N == rev):
            break
        count += 1
        N -= 1
    print(count)",Code,Human
3809,"def isPerfectSquare(n) :
    i = 1
    while(i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True          
        i = i + 1
    return False",Code,Human
3810,"def squareRoot(n): 
        x = n 
        y = 1
        e = 0.000001
        while(x - y > e): 
      
            x = (x + y)/2
            y = n / x 
      
        return x",Code,Human
3811,"def bcdToDecimal(s):  
    length = len(s); 
    check = 0; 
    check0 = 0; 
    num = 0; 
    sum = 0; 
    mul = 1; 
    rev = 0; 
    for i in range(length - 1, -1, -1): 
        sum += (ord(s[i]) - ord('0')) * mul; 
        mul *= 2; 
        check += 1; 
        if (check == 4 or i == 0): 
            if (sum == 0 and check0 == 0): 
                num = 1; 
                check0 = 1; 
            else: 
                num = num * 10 + sum;          
            check = 0; 
            sum = 0; 
            mul = 1; 
    while (num > 0): 
        rev = rev * 10 + (num % 10); 
        num //= 10;        
    if (check0 == 1): 
        return rev - 1;           
    return rev;",Code,Human
3812,"def sexyprime(l, r) : 
    prime=[True] * (r + 1) 
    p = 2
    while(p * p <= r) : 
        if (prime[p] == True) :  
            for i in range( p * 2, r+1 ,p) : 
                   prime[i] = False
        p = p + 1
    for i in range( l,r - 6 + 1) : 
        if (prime[i] and prime[i + 6]) : 
            print(""("", i , "","", i + 6,"")"", end="""")",Code,Human
3813,"def check_duck(num) : 
    n = len(num)   
    i = 0
    while (i < n and num[i] == '0') : 
        i = i + 1
    while (i < n) :  
        if (num[i] == ""0"") : 
            return True 
        i = i + 1
    return False",Code,Human
3814,"def isBuzz(num) : 
  
    return (num % 10 == 7 or num % 7 == 0)",Code,Human
3815,"def checkDivisbility(num): 
    digit = 0
    N = num 
    while (num != 0): 
        digit = num % 10
        num = num // 10
        if (digit == 0 or N % digit != 0): 
            return False
    return True",Code,Human
3816,"def isUgly(n): 
    if (n == 1): 
        return 1
    if (n <= 0): 
        return 0 
    if (n % 2 == 0): 
        return (isUgly(n // 2))       
    if (n % 3 == 0): 
        return (isUgly(n // 3))   
    if (n % 5 == 0): 
        return (isUgly(n // 5)) 
    return 0",Code,Human
3817,"def findNums(n): 
    if (n <= 11): 
        if (n == 8): 
            print(""4 4"", end = "" "") 
        if (n == 10): 
            print(""4 6"", end = "" "") 
        else: 
            print(""-1"", end = "" "") 
    if (n % 2 == 0): 
        print(""4 "", (n - 4), end = "" "") 
    else: 
        print(""9 "", n - 9, end = "" "")",Code,Human
3818,"def find_composite_nos(n) :  
    print(9 * n, 8 * n);",Code,Human
3819,"def bonacciseries(n, m) :  
    a = [0] * m 
    a[n - 1] = 1 
    for i in range(n, m) : 
        for j in range(i - n, i) : 
            a[i] = a[i] + a[j]  
    for i in range(0, m) : 
        print (a[i], end = "" "")",Code,Human
3820,"def count_vowels(sentence):
   count = 0
   for letter in sentence:
      if letter in ""aeiouAEIOU"":
         count += 1
   return count",Code,Human
3821,"def is_palindrome(string):
   return string == string[::-1]",Code,Human
3822,"n1 = 1
n2 = 1
n = 5
for _ in range(n):
   n1, n2 = n2, n1 + n2
print(n2)",Code,Human
3823,"def get_squares(n):
   return [i*i for i in range(n)]",Code,Human
3824,"def filter_even(nums):
   return list(filter(lambda num: num % 2 == 0, nums))",Code,Human
3825,"def filter_odd(nums):
   return list(filter(lambda num: num % 2 == 1, nums))",Code,Human
3826,"from functools import reduce
nums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]
total_sum = reduce(lambda a, b: a + b, nums)
print(f'Sum: {total_sum}')",Code,Human
3827,"numbers = [1, 2, 2, 3, 4, 4, 5, 6]
unique = set(numbers)
print(f'Unique numbers: {list(unique)}')",Code,Human
3828,"string = 'The quick brown fox jumps over the lazy dog'
countmap = {}
for letter in string:
   if letter in countmap:
      countmap[letter] += 1
   else:
      countmap[letter] = 1
print(f'Count of letters: {countmap}')",Code,Human
3829,"def repeat_string(string, frequency):
   return string * frequency",Code,Human
3830,"string = 'The quick brown fox jumps over the lazy dog'
print(string.title())",Code,Human
3831,"def merge_dictionaries(dict1, dict2):
   return {**dict1, **dict2}",Code,Human
3832,"keys = [1, 2, 3]
values = ['aye', 'bee', 'sea']
dictionary = dict(zip(keys, values))",Code,Human
3833,"def invert_dict(dictionary):
   inverted_dict = {value: key for key, value in dictionary.items()}
   return inverted_dict",Code,Human
3834,"from datetime import date
date1 = date(2020, 10, 25)
date2 = date(2020, 12, 25)
print(f'Difference between dates: {(date2 - date1).days}')",Code,Human
3835,"def get_weighted_average(numbers, weightage):
   return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)",Code,Human
3836,"year = 2000
if (year % 4) == 0:
   if (year % 100) == 0:
      if (year % 400) == 0:
         print(""{0} is a leap year"".format(year))
      else:
         print(""{0} is not a leap year"".format(year))
   else:
      print(""{0} is a leap year"".format(year))
else:
   print(""{0} is not a leap year"".format(year))",Code,Human
3837,"num = 407
if num > 1:
   for i in range(2,num):
      if (num % i) == 0:
         print(num,""is not a prime number"")
         break
   else:
      print(num,""is a prime number"")
else:
   print(num,""is not a prime number"")",Code,Human
3838,"lower = 900
upper = 1000
for num in range(lower, upper + 1):
   if num > 1:
      for i in range(2, num):
         if (num % i) == 0:
               break
      else:
         print(num)",Code,Human
3839,"def get_sorted_words(sentence):
   words = [word for word in sentence.split()]
   words.sort()
   return words",Code,Human
3840,"def remove_punctuations(sentence):
   punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
   no_punct = ''
   for char in sentence:
      if char not in punctuations:
         no_punct = no_punct + char
   return no_punct",Code,Human
3841,"def fib(n):
   if n <= 1:
      return n
   else:
      return (fib(n-1) + fib(n-2))",Code,Human
3842,"def sum_of_nums(n):
   if n <= 1:
      return n
   else:
      return n + sum_of_nums(n-1)",Code,Human
3843,"def fact(n):
   if n == 1:
      return n
   else:
      return n * fact(n-1)",Code,Human
3844,"num = 320
for i in range(1, num + 1):
   if num % i == 0:
      print(i)",Code,Human
3845,"def lcm(x, y):
   if x > y:
      greater = x
   else:
      greater = y
   
   while(True):
      if((greater % x == 0) and (greater % y == 0)):
         lcm = greater
         break
      greater += 1
   
   return lcm",Code,Human
3846,"def gcd(x, y):
   if x > y:
      smaller = y
   else:
      smaller = x

   for i in range(1, smaller + 1):
      if((x % i == 0) and (y % i == 0)):
         gcd = i
   
   return gcd",Code,Human
3847,"character = 'x'
print(f'The ASCII value of {character} is {ord(character)}')",Code,Human
3848,"value = 65
print(f'The ASCII value {value} is of the character {chr(value)}')",Code,Human
3849,"def print_binary(dec):
   print(bin(dec))",Code,Human
3850,"def print_octal(dec):
   print(oct(dec))",Code,Human
3851,"def print_hexadecimal(dec):
   print(hex(dec))",Code,Human
3852,"num = 16
sum = 0
while (num > 0):
   sum += num
   num -= 1
print(f'The sum is {sum}')",Code,Human
3853,"def count_lines(filename):
   with open(filename, 'r') as f:
      contents = f.read().split('\n')
      return len(contents)",Code,Human
3854,"from datetime import datetime
now = datetime.now()
print(now)",Code,Human
3855,"import os
filename, extension = os.path.splitext('/path/to/some/file.ext')",Code,Human
3856,"odd = [1, 3, 5, 7, 9]
even = [2, 4, 6, 8, 10]
odd.extend(even)",Code,Human
3857,"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print(random.choice(vowels))",Code,Human
3858,"import random
heads = 0
tails = 0
for i in range(100):
   if(random.choice([True, False])):
      heads += 1
   else:
      tails += 1
print(f'{heads} heads, {tails} tails')",Code,Human
3859,"list_a = [1, 2, 3, 4, 5, 6, 7]
list_b = [2, 4, 6, 8, 10]
print(f'Common elements: { set(list_a).intersection(set(list_b)) }')",Code,Human
3860,"for i in range(20):
   print(i*i)",Code,Human
3861,"sentence = 'The Quick Brown Fox'
lowercase = 0
uppercase = 0
for c in sentence:
   if c.isupper():
      uppercase += 1
   elif c.islower():
      lowercase += 1
   else:
      pass
print(f'Lowercase: {lowercase}, Uppercase: {uppercase}')",Code,Human
3862,"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
   if c.isdigit():
      digits += 1
   elif c.isalpha():
      letters += 1
   else:
      pass
print(f'Digits: {digits}, Letters: {letters}')",Code,Human
3863,"def printn(string, n):
   print(string * n)",Code,Human
3864,"square_dict = {}
for i in range(1, 11):
   square_dict[i] = i*i",Code,Human
3865,"class Person:
   def __init__(self, name):
      self.name = name",Code,Human
3866,"def print_shorter(str1, str2):
   if (len(str1) > len(str2)):
      print(str2)
   else:
      print(str1)",Code,Human
3867,"word_freq = {}
line = 'how many how words does this many have'
for word in line.split():
   word_freq[word] = word_freq.get(word, 0) + 1
print(word_freq)",Code,Human
3868,"def square_numbers(nums):
   return [i*i for i in nums]",Code,Human
3869,"binary_num = '1010101'
decimal_num = int(binary_num, 2)
print(decimal_num)",Code,Human
3870,"octal_num = '17'
decimal_num = int(octal_num, 8)
print(decimal_num)",Code,Human
3871,"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)",Code,Human
3872,"sentence = 'the quick brown fox jumps'
sorted_words = sentence.split(' ')
sorted_words.sort()
print(' '.join(sorted_words))",Code,Human
3873,"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')",Code,Human
3874,"def calculate_rect_properties(width, height):
   return {
      'perimeter': 2 * (width + height),
      'area': width * height
   }",Code,Human
3875,"sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))",Code,Human
3876,"sentence = 'the quick brown fox'
print(sentence[::2])",Code,Human
3877,"sentence = 'the quick brown fox'
print(sentence[::3])",Code,Human
3878,"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_odd_nums = [i for i in nums if i % 2 == 0]",Code,Human
3879,"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_even_nums = [i for i in nums if i % 2 == 1]",Code,Human
3880,"import random
print(random.sample(range(100, 200), 5))",Code,Human
3881,"import random
print(random.sample([i for i in range(10, 100) if i%2 == 0], 5))",Code,Human
3882,"import random
print(random.sample([i for i in range(10, 100) if i%2 == 1], 5))",Code,Human
3883,"import random
print(random.sample([i for i in range(10, 100) if i%4 == 0], 5))",Code,Human
3884,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
sum_list = [a+b for (a,b) in zip(list1, list2)]
print(sum_list)",Code,Human
3885,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
diff_list = [a-b for (a,b) in zip(list1, list2)]
print(diff_list)",Code,Human
3886,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
prod_list = [a*b for (a,b) in zip(list1, list2)]
print(prod_list)",Code,Human
3887,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
quot_list = [a/b for (a,b) in zip(list1, list2)]
print(quot_list)",Code,Human
3888,"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print([random.choice(vowels) for _ in range(5)])",Code,Human
3889,"cube_dict = {}
for i in range(1, 11):
   cube_dict[i] = i ** 3",Code,Human
3890,"import sys
string_var = 'string variable'
print(sys.getsizeof(string_var))",Code,Human
3891,"def join_string_parts(str_list):
   return "" "".join(str_list)",Code,Human
3892,"num = 12345
reversed = int(str(num)[::-1])
print(reversed)",Code,Human
3893,"values = 'one,two,three,four,five'
items = values.split(',')
items.sort()
print(','.join(items))",Code,Human
3894,"sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)",Code,Human
3895,"my_tuple = (1, 2, 3)
n = 3
print(my_tuple * 3)",Code,Human
3896,"num1 = 2
num2 = 4
num3 = 6
print(num1 * num2 * num3)",Code,Human
3897,"n = 10
sum = 0
while n > 0:
   sum += n
   n -= 1
print(sum)",Code,Human
3898,"num = 5
fact = 1
while num > 0:
   fact *= num
   num -= 1
print(fact)",Code,Human
3899,"def get_factors(num):
   factors = []
   for i in range(1, num + 1):
      if num % i == 0:
         factors.append(i)
   return factors",Code,Human
3900,"def is_prod_even(num1, num2):
   prod = num1 * num2
   return not prod % 2",Code,Human
3901,"def is_prod_even(num1, num2):
   sum = num1 + num2
   return not sum % 2",Code,Human
3902,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])",Code,Human
3903,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])",Code,Human
3904,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[4:])",Code,Human
3905,"def make_negative_zero(items):
   return [0 if item < 0 else item for item in items]",Code,Human
3906,"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)",Code,Human
3907,"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)",Code,Human
3908,"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')",Code,Human
3909,"length = 10
width = 5
print(f'Area: {length * width}')",Code,Human
3910,"side = 5
print(f'Area: {side * side}')",Code,Human
3911,"number_dict = {
   1: 'one',
   2: 'two',
   3: 'three',
   4: 'four',
   5: 'five'
}",Code,Human
3912,"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]",Code,Human
3913,"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]

###",Code,Human
3914,,Code,Human
3915,"def make_all_positive(nums):
   return [num if num > 0 else -num for num in nums]",Code,Human
3916,"def make_all_negative(nums):
   return [num if num < 0 else -num for num in nums]",Code,Human
3917,"def get_punctuations(sentence):
   punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
   used_punctuation = set()
   for char in sentence:
      if char in punctuations:
         used_punctuation.add(char)
   return used_punctuation",Code,Human
3918,"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))",Code,Human
3919,"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))",Code,Human
3920,"myset = {1, 2, 4, 7}
mylist = list(myset)",Code,Human
3921,"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}

#1 write a program to get numbers = 1,3,11,42,12,4001
from collections import Iterable
highestnumber = -999
for i in numbers:
  if i > highestnumber:
    highestnumber = i
print(numbers.index(highestnumber))

#2 write a program to get numbers = 1,3,11,42,12,4001
highestnumber = -999
for i in numbers:
  if i > highestnumber:
    highestnumber = i
print(numbers.index(highestnumber))

#3 add 1 to all elements in list python
lst = [1,2,3]
list(map(lambda x:x+1, lst))

#4 add a string to each element of a list python
my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))

#5 add a third dimension matrix dataset python
x = [2D_matrix]",Code,Human
3922,,Code,Human
3923,x = [[[value1]]],Code,Human
3924,"#6 python add all values of another list
a = [1, 2, 3]
b = [4, 5, 6]
a += b

#7 add a value to the start of a list python
var=7
array = [1,2,3,4,5,6]
array.insert(0,var)

#8 print into lowersase an uppercase sentence in python
s = ""Kilometer""
print(s.lower())

#9 sort a dictionary
mydictionary : {1: 1, 7: 2, 4: 2, 3: 1, 8: 1}
sortedDictionary = sorted(mydictionary.keys())

#10 limit decimals to only two decimals in python 
answer = str(round(answer, 2))

#11 print how many keys are in a dictionary python
a = {'foo':42, 'bar':69}
print(len(a))

#11 access index of a character in a string python
foo = 'Hello'
foo.find('lo')

#12 python print last element of list
mylist = [0, 1, 2]
print(myList[-1]) 

#13 how to add a blank line in python
print("""")

#14 how to add element at first position in array python
x = [1,3,4]
a = 2
x.insert(1,a)

#15 how to add extra zeros after decimal in python
format(2.0, '.6f')
'2.000000'

#16 how to add list numbers in python
numbers = [1,2,3,4,5,1,4,5] 
Sum = sum(numbers) 

#17 split list into lists of equal length python
[lst[i:i + n] for i in range(0, len(lst), n)]

#18 how to break out of nested loops python
x_loop_must_break = False

for x in [1, 2, 3]:
    print(f""x is {x}"")
    for y in [1, 2, 3]:
        print(f""y is {y}"")
        if y == 2:
            x_loop_must_break = True
            break
    if x_loop_must_break: break

#19 capitalize first letter in python in list 
my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()

#20 how to check if a list is a subset of another list
if(all(x in test_list for x in sub_list)): 
    flag = True

#21 write a function to check if string is camelcase pythonpython by Breakable Buffalo on Aug 09 2020 Donate
def is_camel_case(s):
    return s != s.lower() and s != s.upper() and ""_"" not in s

#22 how to check if string is in byte formate pythin
isinstance(string, bytes)

#23 how to check nth prime in python
x=int(input())
n,c=1,0
while(c<x):
    n+=1
    for i in range(2,n+1):
        if(n%i==0):
            break
    if(i==n):
        c=c+1

#24 how to convert fahrenheit to celsius in python
Celsius = (Fahrenheit - 32) * 5.0/9.0

#25 print binary of a decimal number
a=6
print(bin(a))

#26 write a python function to convert from base 2 to base 10 in pythonpython by TheRubberDucky on Nov 06 2020 Donate
def getBaseTen(binaryVal):
    count = 0

    binaryVal = binaryVal[::-1]

	for i in range(0, len(binaryVal)):
    	if(binaryVal[i] == ""1""):
            count += 2**i
    
    return count

#27 write a python funtion to execute bash commands
import subprocess
subprocess.call([""sudo"", ""apt"", ""update""])

#27 write a function to generate and print a random number between 0 and 22
import random
n = random.randint(0,22)
print(n)

#28 to get a random element from an array in python
import random
list_ = [1,2,3,4]
random.choice(list_)

#29 print current day in python 
from datetime import date
today = date.today()
print(""Today's date:"", today)

#30 program to count number of cpu cores available 
import os
os.cpu_count()

#30 get rid of all null values in array python
mylist = [1, 2, 3, '', 4]
mylist = [i for i in mylist if i]

#31 get the most common number in python
from statistics import mode
mode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))

#32 print current version of python
import sys
print(sys.version)

#33 write a python function to flatten nested lists
from collections import Iterable
def flatten(lis):
    for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item

#34 write a python function to convert a string  into xml
import xml.etree.ElementTree as ET

root = ET.fromstring(country_data_as_string)

#35 how to open xml file element tree
import xml.etree.ElementTree as ET

tree = ET.parse('filename.xml') 
tree_root = tree.getroot() 

#36 python parse datetime from string
from datetime import datetime

datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')

#37 print list as matrix in python without bracketspython by Bright Butterfly on Jun 14 2020 Donate
data = [7, 7, 7, 7]
print(*data, sep='')

#38 how to read a specific line from a text file in python
line = open(""file.txt"", ""r"").readlines()[7]

#39 how to remove integer from string in python
s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])

#40 write a function to return the nth fibonacci in python
def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

#41 how to sort a list in python using lambda
data = [(""Apples"", 5, ""20""), (""Pears"", 1, ""5""), (""Oranges"", 6, ""10"")]

data.sort(key=lambda x:x[0])

#42 write a function to subtract two matrices in python
matrix1 = [[0, 1, 2], 
           [3, 5, 5], 
           [6, 7, 8]]

matrix2 = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]

def subtractTheMatrix(matrix1, matrix2):
    matrix1Rows = len(matrix1)
    matrix2Rows = len(matrix2)
    matrix1Col = len(matrix1[0])
    matrix2Col = len(matrix2[0])

    #base case
    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

    matrix = []
    rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]
            
    return matrix

#43 write a to time a python script
from datetime import datetime
start = datetime.now()
do_something():...
print(datetime.now() - start)

#44 write a  Python function to find intersection of two sorted arrays 
def printIntersection(arr1, arr2, m, n): 
    i, j = 0, 0
    while i < m and j < n: 
        if arr1[i] < arr2[j]: 
            i += 1
        elif arr2[j] < arr1[i]: 
            j+= 1
        else: 
            print(arr2[j]) 
            j += 1
            i += 1

arr1 = [1, 2, 4, 5, 6] 
arr2 = [2, 3, 5, 7] 
m = len(arr1) 
n = len(arr2) 
printIntersection(arr1, arr2, m, n) 

#46 write Python Function to print leaders in array  
def printLeaders(arr,size):
         
    for i in range(0, size):
        for j in range(i+1, size):
            if arr[i]<arr[j]:
                break
        if j == size-1:  
            print(arr[i])

arr=[16, 17, 4, 3, 5, 2] 
printLeaders(arr, len(arr))

#47 write a python function to print lcm of n numbers python
import math

def LCMofArray(a):
  lcm = a[0]
  for i in range(1,len(a)):
    lcm = lcm*a[i]//math.gcd(lcm, a[i])
  return lcm

arr1 = [1,2,3]
print(""LCM of arr1 elements:"", LCMofArray(arr1))

#48 write a python Program to multiply two matrices and print the result
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]

for i in range(len(X)):
   for j in range(len(Y[0])):
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)
   
#48 write a python program to merge a list of dictionaires
result = {}
for d in L:
    result.update(d)

#49 write a python funvtion to print the merge sort algorithm in python
def mergeSort(myList):
    if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]",Code,Human
3925,"mergeSort(left)
        mergeSort(right)",Code,Human
3926,"i = 0
        j = 0",Code,Human
3927,"k = 0
        
        while i < len(left) and j < len(right):
            if left[i] < right[j]:",Code,Human
3928,myList[k] = left[i],Code,Human
3929,"i += 1
            else:
                myList[k] = right[j]
                j += 1",Code,Human
3930,k += 1,Code,Human
3931,"while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k]=right[j]
            j += 1
            k += 1

myList = [54,26,93,17,77,31,44,55,20]
mergeSort(myList)

#50 write a python function to find the median on an array of numbers
def median(arr):
  
  if len(arr) == 1:
    return arr[0]
    
  else:
    arr = sorted(arr)
    a = arr[0:round(len(arr)/2)]
    b = arr[len(a):len(arr)]
    if len(arr)%2 == 0:
      return (a[len(a)-1]+b[0])/2
    else:
      return a[len(a)-1]

#51 write a python function to find a missing number in a list of consecutive natural numbers
def getMissingNo(A): 
    n = len(A) 
    total = (n + 1)*(n + 2)/2
    sum_of_A = sum(A) 
    return total - sum_of_A 

#52 write a python program to normalize a list of numbers and print the result
a = [2,4,10,6,8,4]
amin, amax = min(a), max(a)
for i, val in enumerate(a):
    a[i] = (val-amin) / (amax-amin)
print(a)

#53  write a python program to permutations of a given string in python and print the result
from itertools import permutations 
import string 
s = ""GEEK""
a = string.ascii_letters 
p = permutations(s) 

d = [] 
for i in list(p): 
    if (i not in d): 
        d.append(i) 
        print(''.join(i)) 

#54 Write a Python function to check if a number is a perfect square
def is_perfect_square(n):
    x = n // 2
    y = set([x])
    while x * x != n:
        x = (x + (n // x)) // 2
        if x in y: return False
        y.add(x)
    return True

#55 Write a Python function to check if a number is a power of a given base.
import math

def isPower (n, base):
    if base == 1 and n != 1:
        return False
    if base == 1 and n == 1:
        return True
    if base == 0 and n != 1:
        return False
    power = int (math.log(n, base) + 0.5)
    return base ** power == n

#56 Write a Python function to find three numbers from an array such that the sum of three numbers equal to zero.
def three_Sum(num):
    if len(num)<3: return []
    num.sort()
    result=[]
    for i in range(len(num)-2):
        left=i+1
        right=len(num)-1
        if i!=0 and num[i]==num[i-1]:continue
        while left<right:
            if num[left]+num[right]==-num[i]:
                result.append([num[i],num[left],num[right]])
                left=left+1
                right=right-1
                while num[left]==num[left-1] and left<right:left=left+1
                while num[right]==num[right+1] and left<right: right=right-1
            elif num[left]+num[right]<-num[i]:
                left=left+1
            else:
                right=right-1
    return result

#57 Write a Python function to find the single number in a list that doesn't occur twice.
def single_number(arr):
    result = 0
    for i in arr:
        result ^= i
    return result

#58 Write a Python function to find the single element in a list where every element appears three times except for one.
def single_number(arr):
    ones, twos = 0, 0
    for x in arr:
        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)
    assert twos == 0
    return ones

#59 Write a function program to add the digits of a positive integer repeatedly until the result has a single digit.
def add_digits(num):
        return (num - 1) % 9 + 1 if num > 0 else 0
    
#60 Write a function program to reverse the digits of an integer.
def reverse_integer(x):
        sign = -1 if x < 0 else 1
        x *= sign",Code,Human
3932,"while x:
            if x % 10 == 0:
                x /= 10
            else:
                break",Code,Human
3933,"x = str(x)
        lst = list(x)",Code,Human
3934,"lst.reverse()
        x = """".join(lst)
        x = int(x)
        return sign*x

#61 Write a Python function to reverse the bits of an integer (32 bits unsigned).
def reverse_Bits(n):
        result = 0
        for i in range(32):
            result <<= 1
            result |= n & 1
            n >>= 1
        return result
    
#62 Write a Python function to check a sequence of numbers is an arithmetic progression or not.
def is_arithmetic(l):
    delta = l[1] - l[0]
    for index in range(len(l) - 1):
        if not (l[index + 1] - l[index] == delta):
             return False
    return True

#63 Python Challenges: Check a sequence of numbers is a geometric progression or not
def is_geometric(li):
    if len(li) <= 1:
        return True",Code,Human
3935,ratio = li[1]/float(li[0]),Code,Human
3936,"for i in range(1, len(li)):
        if li[i]/float(li[i-1]) != ratio: 
            return False
    return True 

#64 Write a Python function to compute the sum of the two reversed numbers and display the sum in reversed form.
def reverse_sum(n1, n2):
    return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])

#65 Write a Python function where you take any positive integer n, if n is even, divide it by 2 to get n / 2. If n is odd, multiply it by 3 and add 1 to obtain 3n + 1. Repeat the process until you reach 1.
def collatz_sequence(x):
    num_seq = [x]
    if x < 1:
       return []
    while x > 1:
       if x % 2 == 0:
         x = x / 2
       else:
         x = 3 * x + 1
       num_seq.append(x)    
    return num_seq

#65 Write a Python function to check if a given string is an anagram of another given string.
def is_anagram(str1, str2):
    list_str1 = list(str1)
    list_str1.sort()
    list_str2 = list(str2)
    list_str2.sort()

    return (list_str1 == list_str2)

#66 Write a Python function to push all zeros to the end of a list.
def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return(x)

#67 Write a Python function to the push the first number to the end of a list.
def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return(x)

#68 Write a Python function to find the length of the last word.
def length_of_last_word(s):
        words = s.split()
        if len(words) == 0:
            return 0
        return len(words[-1])

#69 Write a Python function to add two binary numbers.
def add_binary_nums(x,y):
        max_len = max(len(x), len(y))

        x = x.zfill(max_len)
        y = y.zfill(max_len)

        result = ''
        carry = 0

        for i in range(max_len-1, -1, -1):
            r = carry
            r += 1 if x[i] == '1' else 0
            r += 1 if y[i] == '1' else 0
            result = ('1' if r % 2 == 1 else '0') + result
            carry = 0 if r < 2 else 1       

        if carry !=0 : result = '1' + result

        return result.zfill(max_len)

#70 Write a Python function to find the single number which occurs odd numbers and other numbers occur even number.
def odd_occurrence(arr):",Code,Human
3937,result = 0,Code,Human
3938,for element in arr:,Code,Human
3939,"result = result ^ element
 
    return result

#71 Write a Python function that takes a string and encode it that the amount of symbols would be represented by integer and the symbol.
For example, the string ""AAAABBBCCDAAA"" would be encoded as ""4A3B2C1D3A""
def encode_string(str1):
    encoded = """"
    ctr = 1
    last_char = str1[0]

    for i in range(1, len(str1)):

        if last_char == str1[i]:
            ctr += 1
         
        else:
            encoded += str(ctr) + last_char
            ctr = 0
            last_char = str1[i]
            ctr += 1
    encoded += str(ctr) + last_char
    return encoded

#72 Write a Python function to create a new array such that each element at index i of the new array is the product of all the numbers of a given array of integers except the one at i.
def product(nums):
    new_nums = []

    for i in nums:
        nums_product = 1

        for j in nums:     
            if j != i:
                nums_product = nums_product * j
        new_nums.append(nums_product)

    return new_nums

#73 Write a python function to find the difference between the sum of the squares of the first two hundred natural numbers and the square of the sum.
r = range(1, 201)
a = sum(r)
print (a * a - sum(i*i for i in r))

#74 Write a Python function to compute s the sum of the digits of the number 2 to the power 20.
def digits_sum():
	n = 2**20
	ans = sum(int(c) for c in str(n))
	return str(ans)

#75 Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.
n = 0
for i in range(1,500):
     if not i % 5 or not i % 3:
         n = n + i
print(n)

#76 Write a Python function to converting an integer to a string in any base.
def to_string(n,base):
   conver_tString = ""0123456789ABCDEF""
   if n < base:
      return conver_tString[n]
   else:
      return to_string(n//base,base) + conver_tString[n % base

#77 Write a Python function to calculate the geometric sum of n-1.
def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)

#78 Write a Python function to find the greatest common divisor (gcd) of two integers.
def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return Recurgcd(low, high%low)

#79 Write a program to print which will find all such numbers which are divisible by 7 but are not a multiple of 5,
between 2000 and 3200 (both included).  
l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print ','.join(l)


#80 write a Python program to print the roots of a quadratic equation
import math
a = float(input(""Enter the first coefficient: ""))
b = float(input(""Enter the second coefficient: ""))
c = float(input(""Enter the third coefficient: ""))
if (a!=0.0):
    d = (bb)-(4ac) 
    if (d==0.0):
        print(""The roots are real and equal."") 
        r = -b/(2a)
        print(""The roots are "", r,""and"", r)
    elif(d>0.0):
        print(""The roots are real and distinct."")
        r1 = (-b+(math.sqrt(d)))/(2a) 
        r2 = (-b-(math.sqrt(d)))/(2a)
        print(""The root1 is: "", r1)
        print(""The root2 is: "", r2)
    else:
        print(""The roots are imaginary."")
        rp = -b/(2a) ip = math.sqrt(-d)/(2a)
        print(""The root1 is: "", rp, ""+ i"",ip)
        print(""The root2 is: "", rp, ""- i"",ip)
else:
    print(""Not a quadratic equation.""

#81 Write a Python program to convert a given Bytearray to Hexadecimal string.
def bytearray_to_hexadecimal(list_val):
     result = ''.join('{:02x}'.format(x) for x in list_val)  
     return(result)
     

#82 Write a Python program to count number of substrings with same first and last characters of a given string.
def no_of_substring_with_equalEnds(str1): 
	result = 0; 
	n = len(str1); 
	for i in range(n): 
		for j in range(i, n): 
			if (str1[i] == str1[j]): 
				result = result + 1
	return result
 
#83 Write a Python program to move all spaces to the front of a given string in single traversal.
def moveSpaces(str1): 
    no_spaces = [char for char in str1 if char!=' ']   
    space= len(str1) - len(no_spaces)
    result = ' '*space    
    return result + ''.join(no_spaces)

#84 Write a Python program to find maximum length of consecutive 0’s in a given binary string.
def max_consecutive_0(input_str): 
     return  max(map(len,input_str.split('1')))
str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")

#85 Write a Python program that iterate over elements repeating each as many times as its count.
from collections import Counter
c = Counter(p=4, q=2, r=0, s=-2)
print(list(c.elements()))

#86 Write a Python program to find the second smallest number in a list.
def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1]
  
  
#87 Write a Python function to check whether a list contains a sublist.
def is_Sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False

	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1
				
				if n == len(s):
					sub_set = True

	return sub_set
 
 
#86 Write a Python program to generate groups of five consecutive numbers in a list
l = [[5*i + j for j in range(1,6)] for i in range(5)]
print(l)

#87 Write a Python program to print the list in a list of lists whose sum of elements is the highest.
print(max(num, key=sum))

#88 Write a Python fuction to print the depth of a dictionary.
def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0
dic = {'a':1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))

#89 Write a Python function to pack consecutive duplicates of a given list elements into sublists and print the output.
from itertools import groupby
def pack_consecutive_duplicates(l_nums):
    return [list(group) for key, group in groupby(l_nums)]
n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]
print(""Original list:"") 
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list)) 

#90 Write a Python function to create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters and print the output.
from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]

n_list = [1,1,2,3,4,4,5, 1]
print(""Original list:"") 
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))

#91 Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.
nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)

#92 Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.

size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))

#93 Write a Python function to check if a nested list is a subset of another nested list and print the output.
def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
      

list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]] 
list2 = [[1, 3],[13,15,17]]   
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))

#94 Write a Python function to print all permutations with given repetition number of characters of a given string and print the output.
from itertools import product
def all_repeat(str1, rno):
  chars = list(str1)
  results = []
  for c in product(chars, repeat = rno):
    results.append(c)
  return results
print(all_repeat('xyz', 3))

#95 Write a Python function to find the index of a given string at which a given substring starts. If the substring is not found in the given string return 'Not found' and print the output.
def find_Index(str1, pos):
    if len(pos) > len(str1):
        return 'Not found'

    for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i
                
            elif str1[i + j] != pos[j]:
                break

    return 'Not found

#96 Write a Python program to find the smallest multiple of the first n numbers. Also, display the factors.
def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)

    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
                
#97 Write a Python program to print all permutations of a given string (including duplicates).
def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_lis
    
#98 Write a Python program to multiply two integers without using the '*' operator in python.
def multiply(x, y):
    if y < 0:
        return -multiply(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply(x, y - 1)

#99 Write a Python program to calculate distance between two points using latitude and longitude.
from math import radians, sin, cos, acos

print(""Input coordinates of two points:"")
slat = radians(float(input(""Starting latitude: "")))
slon = radians(float(input(""Ending longitude: "")))
elat = radians(float(input(""Starting latitude: "")))
elon = radians(float(input(""Ending longitude: "")))

dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
print(""The distance is %.2fkm."" % dist)

#99 Write a Python class to convert a roman numeral to an integer.
class Solution:
    def roman_to_int(self, s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val

#100 Write a Python class to convert an integer to a roman numeral.
class Solution:
    def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
            ]
        syb = [
            ""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",
            ""I""
            ]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num",Code,Human
3940,"def merge_lists(lst1, lst2):",Code,Human
3941,res = [],Code,Human
3942,"if len(lst1) == 0 or len(lst2) == 0:
        res.extend(lst1 + lst2)
        return res
    
    last_processed_i_idx = 0
    last_processed_j_idx = 0
    for i_idx, i in enumerate(lst1):
        for j_idx, j in enumerate(lst2, start=last_processed_j_idx + 1):
            if i < j:
                res.append(i)
                last_processed_i_idx = i_idx
                break
            elif i > j:
                res.append(j)
                last_processed_j_idx = j_idx
                continue
            else:
                res.append(i)
                last_processed_i_idx = i_idx
                res.append(j)
                last_processed_j_idx = j_idx
                break
    
    if len(lst1) == last_processed_i_idx:
        res.extend(lst2[last_processed_j_idx + 1:])
    
    if len(lst2) == last_processed_j_idx:
        res.extend(lst1[last_processed_i_idx+ 1:])
    return res",Code,Human
3943,def find_product(lst):,Code,Human
3944,"left = 1
    product = []
    for ele in lst:
        product.append(left)
        left = left * ele",Code,Human
3945,"right = 1
    for i in range(len(lst)-1, -1, -1):
        product[i] = product[i] * right
        right = right * lst[i]

    return product",Code,Human
3946,"def find_second_maximum(lst):
    max = float('-inf')
    sec_max = float('-inf')

    for elem in list:
        if elem > max:
            sec_max = max
            max = elem
        elif elem > sec_max:
            sec_max = elem
    return sec_max",Code,Human
3947,"def right_rotate(lst, n):
    n = n % len(lst)
    return lst[-n:] + lst[:-n]",Code,Human
3948,"def rearrange(lst):
    leftMostPosEle = 0",Code,Human
3949,,Code,Human
3950,for curr in range(len(lst)):,Code,Human
3951,if (lst[curr] < 0):,Code,Human
3952,if (curr is not leftMostPosEle):,Code,Human
3953,"lst[curr], lst[leftMostPosEle] = lst[leftMostPosEle], lst[curr]",Code,Human
3954,"leftMostPosEle += 1
    return lst",Code,Human
3955,"tp=(1,2,3,4,5,6,7,8,9,10)
tp1=tp[:5]
tp2=tp[5:]
print(tp1)
print(tp2)",Code,Human
3956,"s= input()
if s==""yes"" or s==""YES"" or s==""Yes"":
    print(""Yes"")
else:
    print(""No"")",Code,Human
3957,"li = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = filter(lambda x: x%2==0, li)
print(evenNumbers)",Code,Human
3958,"li = [1,2,3,4,5,6,7,8,9,10]
squaredNumbers = map(lambda x: x**2, li)
print(squaredNumbers)",Code,Human
3959,"li = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, li))
print(evenNumbers)",Code,Human
3960,"evenNumbers = filter(lambda x: x%2==0, range(1,21))
print(evenNumbers)",Code,Human
3961,"squaredNumbers = map(lambda x: x**2, range(1,21))
print(squaredNumbers)",Code,Human
3962,"class American(object):
    @staticmethod
    def printNationality():
        print(""America"")

anAmerican = American()
anAmerican.printNationality()
American.printNationality()",Code,Human
3963,"class American(object):
    pass

class NewYorker(American):
    pass",Code,Human
3964,"class Circle(object):
    def __init__(self, r):
        self.radius = r

    def area(self):
        return self.radius**2*3.14",Code,Human
3965,"class Rectangle(object):
    def __init__(self, l, w):
        self.length = l
        self.width  = w

    def area(self):
        return self.length*self.width",Code,Human
3966,"class Shape(object):
    def __init__(self):
        pass

    def area(self):
        return 0

class Square(Shape):
    def __init__(self, l):
        Shape.__init__(self)
        self.length = l

    def area(self):
        return self.length*self.length",Code,Human
3967,raise RuntimeError('something wrong'),Code,Human
3968,"def throws():
    return 5/0

try:
    throws()
except ZeroDivisionError:
    print(""division by zero!"")
except Exception:
    print('Caught an exception')
finally:
    print('In finally block for cleanup')",Code,Human
3969,"class MyError(Exception):
    def __init__(self, msg):
        self.msg = msg",Code,Human
3970,"import re
emailAddress = 'bing@google.com'
pat2 = ""(\w+)@((\w+\.)+(com))""
r2 = re.match(pat2,emailAddress)
print(r2.group(1))",Code,Human
3971,"import re
emailAddress = 'bing@google.com'
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2,emailAddress)
print(r2.group(2))",Code,Human
3972,"import re
s = input()
print(re.findall(""\d+"",s))",Code,Human
3973,"unicodeString = u""hello world!""
print(unicodeString)",Code,Human
3974,"s = input()
u = unicode( s ,""utf-8"")
print(u)",Code,Human
3975,"n=int(input())
sum=0.0
for i in range(1,n+1):
    sum += float(float(i)/(i+1))
print(sum)",Code,Human
3976,"def f(n):
    if n==0:
        return 0
    else:
        return f(n-1)+100",Code,Human
3977,"def fibo(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return f(n-1)+f(n-2)",Code,Human
3978,"def EvenGenerator(n):
    i=0
    while i<=n:
        if i%2==0:
            yield i
        i+=1",Code,Human
3979,"def NumGenerator(n):
    for i in range(n+1):
        if i%5==0 and i%7==0:
            yield i",Code,Human
3980,"li = [2,4,6,8]
for i in li:
    assert i%2==0",Code,Human
3981,"expression = input()
print(eval(expression))",Code,Human
3982,"import math
def bin_search(li, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
        if li[mid]==element:
            index = mid
        elif li[mid]>element:
            top = mid-1
        else:
            bottom = mid+1

    return index",Code,Human
3983,"import math
def bin_search(li, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
        if li[mid]==element:
            index = mid
        elif li[mid]>element:
            top = mid-1
        else:
            bottom = mid+1

    return index",Code,Human
3984,"import random
print(random.random()*100)",Code,Human
3985,"import random
print(random.random()*100-5)",Code,Human
3986,"import random
print(random.choice([i for i in range(11) if i%2==0]))",Code,Human
3987,"import random
print(random.choice([i for i in range(201) if i%5==0 and i%7==0]))",Code,Human
3988,"import random
print(random.sample(range(100), 5))",Code,Human
3989,"import random
print(random.sample([i for i in range(100,201) if i%2==0], 5))",Code,Human
3990,"import random
print(random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5))",Code,Human
3991,"import random
print(random.randrange(7,16))",Code,Human
3992,"import zlib
s = b'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print(t)
print(zlib.decompress(t))",Code,Human
3993,"from timeit import Timer
t = Timer(""for i in range(100):1+1"")
print(t.timeit())",Code,Human
3994,"from random import shuffle
li = [3,6,7,8]
shuffle(li)
print(li)",Code,Human
3995,"from random import shuffle
li = [3,6,7,8]
shuffle(li)
print(li)",Code,Human
3996,"subjects=[""I"", ""You""]
verbs=[""Play"", ""Love""]
objects=[""Hockey"",""Football""]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)",Code,Human
3997,"li = [5,6,77,45,22,12,24]
li = [x for x in li if x%2!=0]
print(li)",Code,Human
3998,"li = [12,24,35,70,88,120,155]
li = [x for x in li if x%5!=0 and x%7!=0]
print(li)",Code,Human
3999,"li = [12,24,35,70,88,120,155]
li = [x for (i,x) in enumerate(li) if i%2!=0]
print(li)",Code,Human
4000,"array = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]
print(array)",Code,Human
4001,"li = [12,24,35,70,88,120,155]
li = [x for (i,x) in enumerate(li) if i not in (0,4,5)]
print(li)",Code,Human
4002,"li = [12,24,35,24,88,120,155]
li = [x for x in li if x!=24]
print(li)",Code,Human
4003,"set1=set([1,3,6,78,35,55])
set2=set([12,24,35,24,88,120,155])
set1 &= set2
li=list(set1)
print(li)",Code,Human
4004,"def removeDuplicate( li ):
    newli=[]
    seen = set()
    for item in li:
        if item not in seen:
            seen.add( item )
            newli.append(item)

    return newli",Code,Human
4005,"class Person(object):
    def getGender( self ):
        return ""Unknown""

class Male( Person ):
    def getGender( self ):
        return ""Male""

class Female( Person ):
    def getGender( self ):
        return ""Female""",Code,Human
4006,"dic = {}
s=input()
for s in s:
    dic[s] = dic.get(s,0)+1
print('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))",Code,Human
4007,"s=input()
s = s[::-1]
print(s)",Code,Human
4008,"s=input()
s = s[::2]
print(s)",Code,Human
4009,"import itertools
print(list(itertools.permutations([1,2,3])))",Code,Human
4010,"def solve(numheads,numlegs):
    ns='No solutions!'
    for i in range(numheads+1):
        j=numheads-i
        if 2*i+4*j==numlegs:
            return i,j
    return ns,ns",Code,Human
4011,,Code,Human
4012,"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print(','.join(l))",Code,Human
4013,,Code,Human
4014,"def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)

x=int(input())
print(fact(x))",Code,Human
4015,"n=int(input())
d=dict()
for i in range(1,n+1):
    d[i]=i*i

print(d)",Code,Human
4016,"values=input()
l=values.split("","")
t=tuple(l)
print(l)
print(t)",Code,Human
4017,"class InputOutString(object):
    def __init__(self):
        self.s = """"

    def getString(self):
        self.s = input()
    
    def printString(self):
        print(self.s.upper())

strObj = InputOutString()
strObj.getString()
strObj.printString()",Code,Human
4018,,Code,Human
4019,,Code,Human
4020,,Code,Human
4021,,Code,Human
4022,"import math
c=50
h=30
value = []
items=[x for x in input().split(',')]
for d in items:
    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))

print(','.join(value))",Code,Human
4023,"input_str = input()
dimensions=[int(x) for x in input_str.split(',')]
rowNum=dimensions[0]
colNum=dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]

for row in range(rowNum):
    for col in range(colNum):
        multilist[row][col]= row*col

print(multilist)",Code,Human
4024,"items=[x for x in input().split(',')]
items.sort()
print(','.join(items))",Code,Human
4025,"lines = []
while True:
    s = input()
    if s:
        lines.append(s.upper())
    else:
        break;

for sentence in lines:
    print(sentence)",Code,Human
4026,"s = input()
words = [word for word in s.split("" "")]
print("" "".join(sorted(list(set(words)))))",Code,Human
4027,"value = []
items=[x for x in input().split(',')]
for p in items:
    intp = int(p, 2)
    if not intp%5:
        value.append(p)

print(','.join(value))",Code,Human
4028,"values = []
for i in range(1000, 3001):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
        values.append(s)
print("","".join(values))",Code,Human
4029,"s = input()
d={""DIGITS"":0, ""LETTERS"":0}
for c in s:
    if c.isdigit():
        d[""DIGITS""]+=1
    elif c.isalpha():
        d[""LETTERS""]+=1
    else:
        pass
print(""LETTERS"", d[""LETTERS""])
print(""DIGITS"", d[""DIGITS""])",Code,Human
4030,"s = input()
d={""UPPER CASE"":0, ""LOWER CASE"":0}
for c in s:
    if c.isupper():
        d[""UPPER CASE""]+=1
    elif c.islower():
        d[""LOWER CASE""]+=1
    else:
        pass
print(""UPPER CASE"", d[""UPPER CASE""])
print(""LOWER CASE"", d[""LOWER CASE""])",Code,Human
4031,"a = input()
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
n4 = int( ""%s%s%s%s"" % (a,a,a,a) )
print(n1+n2+n3+n4)",Code,Human
4032,"values = input()
numbers = [x for x in values.split("","") if int(x)%2!=0]
print("","".join(numbers))",Code,Human
4033,"def putNumbers(n):
    i = 0
    while i<n:
        j=i
        i=i+1
        if j%7==0:
            yield j

for i in reverse(100):
    print(i)",Code,Human
4034,freq = {},Code,Human
4035,"line = input()
for word in line.split():
    freq[word] = freq.get(word,0)+1

words = freq.keys()
words.sort()

for w in words:
    print(""%s:%d"" % (w,freq[w]))",Code,Human
4036,"def square(num):
    return num ** 2",Code,Human
4037,print(abs.__doc__),Code,Human
4038,print(int.__doc__),Code,Human
4039,print(input.__doc__),Code,Human
4040,"class Person:
    name = ""Person""
    
    def __init__(self, name = None):
        self.name = name",Code,Human
4041,"def sum_nums(number1, number2):
	return number1+number2",Code,Human
4042,"def convert_to_str(n):
    print(str(n))",Code,Human
4043,"def sum_of_ints(s1,s2):
    print(int(s1)+int(s2))",Code,Human
4044,"def add(s1,s2):
    print(s1+s2)",Code,Human
4045,"def max_len_str(s1,s2):
    len1 = len(s1)
    len2 = len(s2)
    if len1>len2:
        print(s1)
    elif len2>len1:
        print(s2)
    else:
        print(s1)
        print(s2)",Code,Human
4046,"def even_or_odd_num(n):
    if n%2 == 0:
        print(""It is an even number"")
    else:
        print(""It is an odd number"")",Code,Human
4047,"def print_dict_keys_val_1():
    d=dict()
    d[1]=1
    d[2]=2**2
    d[3]=3**2
    print(d)",Code,Human
4048,"def print_dict_keys_val_2():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	print(d)",Code,Human
4049,"def print_dict_keys_val_3():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for (k,v) in d.items():	
		print(v)",Code,Human
4050,"def print_dict_keys_val_4():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for k in d.keys():	
		print(k)",Code,Human
4051,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print(li)",Code,Human
4052,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print(li[:5])",Code,Human
4053,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print(li[-5:])",Code,Human
4054,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print(li[5:])",Code,Human
4055,"def printTuple():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print(tuple(li))",Code,Human
4056,"def ifPalindrome(inVar):
    revInvar = []
    for _ in range((len(inVar)-1), -1, -1):
        revInvar.append(inVar[_])
    if revInvar == inVar:
        return ""Palindrome""
    else:
        return ""Not a palindrome""",Code,Human
4057,"from datetime import datetime, timedelta
def add_days(n, d = datetime.today()):
  return d + timedelta(n)",Code,Human
4058,"def all_equal(lst):
  return len(set(lst)) == 1",Code,Human
4059,"def all_unique(lst):
  return len(lst) == len(set(lst))",Code,Human
4060,"def average(*args):
  return sum(args, 0.0) / len(args)",Code,Human
4061,"from re import sub
def camel(s):
  s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
  return ''.join([s[0].lower(), s[1:]])",Code,Human
4062,"def capitalize(s, lower_rest = False):
  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])",Code,Human
4063,"def celsius_to_fahrenheit(degrees):
  return ((degrees * 1.8) + 32)",Code,Human
4064,"import re
def words(s, pattern = '[a-zA-Z-]+'):
  return re.findall(pattern, s)",Code,Human
4065,"def values_only(flat_dict):
  return list(flat_dict.values())",Code,Human
4066,"def most_frequent(list):
    return max(set(list), key = list.count)",Code,Human
4067,"n=5
for i in range(1,11):
   print(n,'x',i,'=',n*i)",Code,Human
4068,"def multiplication_table(n):
  for i in range(1,11):
    print(n,'x',i,'=',n*i)",Code,Human
4069,"d=dict()
for x in range(1,11):
    d[x]=x**2
print(d)",Code,Human
4070,"marks = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]
print(""Original list of tuples:"")
print(marks)
marks.sort(key = lambda x: x[1])
print(""\nSorting the List of Tuples:"")
print(marks)",Code,Human
4071,"def median(list):
  list.sort()
  list_length = len(list)
  if list_length % 2 == 0:
    return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2
  return float(list[int(list_length / 2)])",Code,Human
4072,"p = 10000
t = 6
r = 8
si = (p * t * r)/100
print(f'Simple interest is {si}')",Code,Human
4073,"year = 2004
if (year % 4) == 0:
   if (year % 100) == 0:
       if (year % 400) == 0:
           print(f""{year} is a leap year"")
       else:
           print(f""{year} is not a leap year"")
   else:
      print(f""{year} is a leap year"")
else:
   print(f""{year} is not a leap year"")",Code,Human
4074,"def is_leap(year):
  if (year % 4) == 0:
    if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
    else:
        print(f""{year} is a leap year"")
  else:
    print(f""{year} is not a leap year"")",Code,Human
4075,"def check_password_strength(password):
  import re 
  flag = 0
  while True:   
      if (len(password)<8): 
          flag = -1
          break
      elif not re.search(""[a-z]"", password): 
          flag = -1
          break
      elif not re.search(""[A-Z]"", password): 
          flag = -1
          break
      elif not re.search(""[0-9]"", password): 
          flag = -1
          break
      elif not re.search(""[_@$]"", password): 
          flag = -1
          break
      elif re.search(""\s"", password): 
          flag = -1
          break
      else: 
          flag = 0
          print(""Strong Password"") 
          break  
  if flag ==-1: 
      print(""Weak Password"")",Code,Human
4076,"PI = 3.14
radius = float(6)
area = PI * radius * radius
circumference = 2 * PI * radius
print(f'Area Of a Circle {area}')
print(f'Circumference Of a Circle {circumference}')",Code,Human
4077,"def area_of_circle(radius):
  PI = 3.14
  radius = float(radius)
  area = PI * radius * radius
  circumference = 2 * PI * radius
  print(f'Area Of a Circle {area}')
  print(f'Circumference Of a Circle {circumference}')",Code,Human
4078,"def area_of_circle(circumference):
  circumference = float(circumference)
  PI = 3.14
  area = (circumference * circumference)/(4 * PI)
  print(f'Area Of a Circle {area}')",Code,Human
4079,"def area_of_circle(diameter):
  PI = 3.14
  area = (PI/4) * (diameter * diameter)
  print(f'Area Of a Circle {area}')",Code,Human
4080,"import math, random 
def generateOTP() : 
    digits = ""0123456789""
    OTP = """" 
    for i in range(4) : 
        OTP += digits[math.floor(random.random() * 10)] 
    return OTP",Code,Human
4081,"import math, random 
def generateOTP() :  
    digits = ""0123456789""
    OTP = """" 
    for i in range(6) : 
        OTP += digits[math.floor(random.random() * 10)]  
    return OTP",Code,Human
4082,"import math
p1 = [4, 0]
p2 = [6, 6]
distance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )
print(f""The distance between {p1} and {p2} is {distance}"")",Code,Human
4083,"def compound_interest(principle, rate, time): 
    Amount = principle * (pow((1 + rate / 100), time)) 
    CI = Amount - principle 
    print(f""Compound interest is {CI}"")",Code,Human
4084,"def convert_to_minutes(num_hours):
    minutes = num_hours * 60
    return minutes",Code,Human
4085,"def convert_to_seconds(num_hours):
    minutes = num_hours * 60
    seconds = minutes * 60
    return seconds",Code,Human
4086,"def vowel_remover(text):
    string = """"
    for l in text:
        if l.lower() != ""a"" and l.lower() != ""e"" and l.lower() != ""i"" and l.lower() != ""o"" and l.lower() != ""u"":
            string += l
    return string",Code,Human
4087,"for i in range(0,50):
  if((i%2!=0) & (i%3!=0)):
      print(i)",Code,Human
4088,"def odd_numbers(lower,upper):
  for i in range(lower,upper+1):
    if(i%2!=0):
        print(i)",Code,Human
4089,"num = 16
if num < 0:
   print(""Enter a positive number"")
else:
   sum = 0",Code,Human
4090,"while(num > 0):
       sum += num
       num -= 1
   print(""The sum is"", sum)",Code,Human
4091,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, she said ---and went.""
no_punct = """"
for char in my_str:
   if char not in punctuations:
       no_punct = no_punct + char",Code,Human
4092,"def jpeg_res(filename):
   with open(filename,'rb') as img_file:
       img_file.seek(163)
       a = img_file.read(2)
       height = (a[0] << 8) + a[1]
       a = img_file.read(2)
       width = (a[0] << 8) + a[1]
   print(f""The resolution of the image is {width}x{height}"")",Code,Human
4093,"vowels = 'aeiou'
text = 'Hello, have you tried our tutorial section yet?'
text = text.casefold()
count = {}.fromkeys(vowels,0)
for char in text:
   if char in count:
       count[char] += 1
print(count)",Code,Human
4094,"d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}
def is_key_present(x):
  if x in d:
      print('Key is present in the dictionary')
  else:
      print('Key is not present in the dictionary')",Code,Human
4095,"l = []
if not l:
  print(""List is empty"")
else:
  print(""List is not empty"")",Code,Human
4096,"column_names = ['id', 'color', 'style']
column_values = [1, 'red', 'bold']
name_to_value_dict = dict(zip(column_names, column_values))
name_to_value_dict = {key:value for key, value in zip(column_names, column_values)}
name_value_tuples = zip(column_names, column_values) 
name_to_value_dict = {} 
for key, value in name_value_tuples: 
    if key in name_to_value_dict: 
        pass  
    else: 
        name_to_value_dict[key] = value
print(name_to_value_dict)",Code,Human
4097,"my_list = ['a', 'b', 'c', 'd', 'e']
for index, value in enumerate(my_list):
    print('{0}: {1}'.format(index, value))",Code,Human
4098,"dict_1 = {'apple': 9, 'banana': 6}
dict_2 = {'banana': 4, 'orange': 8}
combined_dict = {**dict_1, **dict_2}
print(combined_dict)",Code,Human
4099,"def unique(l):
    if len(l)==len(set(l)):
        print(""All elements are unique"")
    else:
        print(""List has duplicates"")",Code,Human
4100,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'      
def check(email):  
    if(re.search(regex,email)):  
        print(""Valid Email"")         
    else:  
        print(""Invalid Email"")",Code,Human
4101,"from datetime import date
def calculate_age(dtob):
    today = date.today()
    return today.year - dtob.year - ((today.month, today.day) < (dtob.month, dtob.day))",Code,Human
4102,"def is_perfect_square(n):
    x = n // 2
    y = set([x])
    while x * x != n:
        x = (x + (n // x)) // 2
        if x in y: return False
        y.add(x)
    return True",Code,Human
4103,"def drop(a, n = 1):
  return a[n:]",Code,Human
4104,"def check(sentence, words): 
    res = [all([k in s for k in words]) for s in sentence] 
    return [sentence[i] for i in range(0, len(res)) if res[i]]",Code,Human
4105,"lt = [('English', 2), ('Maths', 4), ('Science', '6')] 
out = [item for t in lt for item in t]  
print(out)",Code,Human
4106,"test_string = ""This is a good book""
res = len(test_string.split()) 
print (f""The number of words in string are :{str(res)}"")",Code,Human
4107,"def count_occurrences(lst, val):
  return lst.count(val)",Code,Human
4108,"def byte_size(s):
  return len(s.encode('utf-8'))",Code,Human
4109,"def gcd(num1, num2):
    gcd = 1  
    if num1 % num2 == 0:
        return num2
    for k in range(int(num2 / 2), 0, -1):
        if num1 % k == 0 and num2 % k == 0:
            gcd = k
            break  
    return gcd",Code,Human
4110,"def lcm(num1, num2):
   if num1 > num2:
       z = num1
   else:
       z = num2
   while(True):
       if((z % num1 == 0) and (z % num2 == 0)):
           lcm = z
           break
       z += 1
   return lcm",Code,Human
4111,"str = 'CarBadBoxNumKeyValRayCppSan'
n = 3
chunks = [str[i:i+n] for i in range(0, len(str), n)]
print(chunks)",Code,Human
4112,"def file_read_from_head(fname, nlines):
    from itertools import islice
    with open(fname) as f:
      for line in islice(f, nlines):
        print(line)",Code,Human
4113,"age=23
if age>=18:
        status=""Eligible""
else:
    status=""Not Eligible""
print(""You are "",status,"" for Vote."")",Code,Human
4114,"num = 5
if num > 0:
   print(""It is positive number"")
elif num == 0:
   print(""It is Zero"")
else:
   print(""It is a negative number"")",Code,Human
4115,"num_list = [45, 55, 60, 37, 100, 105, 220]
result = list(filter(lambda x: (x % 15 == 0), num_list))
print(f""Numbers divisible by 15 are {result}"")",Code,Human
4116,"def file_read(fname):
    with open(fname, ""w"") as myfile:
      myfile.write(""Appending line one\n"")
      myfile.write(""Appending line two"")
      txt = open(fname)
      print(txt.read())",Code,Human
4117,"def pad_number(n, l):
  return str(n).zfill(l)",Code,Human
4118,"def pluck(lst, key):
  return [x.get(key) for x in lst]",Code,Human
4119,"def rgb_to_hex(r, g, b):
  return ('{:02X}' * 3).format(r, g, b)",Code,Human
4120,"def reverse(itr):
  return itr[::-1]",Code,Human
4121,"def rads_to_degrees(rad):
  return (rad * 180.0) / 3.14",Code,Human
4122,"def similarity(a, b):
  return [item for item in a if item in b]",Code,Human
4123,"from re import sub
def snake(s):
  return '_'.join(
    sub('([A-Z][a-z]+)', r' \1',
    sub('([A-Z]+)', r' \1',
    s.replace('-', ' '))).split()).lower()",Code,Human
4124,"def sort_by_indexes(lst, indexes, reverse=False):
  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \
          x[0], reverse=reverse)]",Code,Human
4125,"def sort_dict_by_key(d, reverse = False):
  return dict(sorted(d.items(), reverse = reverse))",Code,Human
4126,"def sort_dict_by_value(d, reverse = False):
  return dict(sorted(d.items(), key = lambda x: x[1], reverse = reverse))",Code,Human
4127,"def capitalize(s, lower_rest = False):
  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])",Code,Human
4128,"from math import ceil
def chunk(lst, size):
  return list(
    map(lambda x: lst[x * size:x * size + size],
      list(range(ceil(len(lst) / size)))))",Code,Human
4129,"def sigmoid(x):
  return 1 / (1 + math.exp(-x))",Code,Human
4130,"!touch abc.txt
file = open(""abc.txt"",""r"") 
Counter = 0
Content = file.read() 
CoList = Content.split(""\n"")  
for i in CoList: 
    if i: 
        Counter += 1          
print(f""There are {Counter} number of lines in the file"")",Code,Human
4131,"string=""This is a very good place to Visit""
count=0
for i in string:
      if(i.islower()):
            count=count+1
print(f""The number of lowercase characters is:{count}"")",Code,Human
4132,"import re
text=""Albert""
patterns = '[A-Z]+[a-z]+$'
if re.search(patterns, text):
  print('Found a match!')
else:
  print('Not matched!')",Code,Human
4133,"import os
dir='.'
list = os.listdir(dir) 
number_files = len(list)
print(f'There are {number_files} file in the directory')",Code,Human
4134,"def clamp_number(num, a, b):
  return max(min(num, max(a, b)), min(a, b))",Code,Human
4135,"def every_nth(lst, nth):
  return lst[nth - 1::nth]",Code,Human
4136,"def head(lst):
  return lst[0]",Code,Human
4137,"def have_same_contents(a, b):
  for v in set(a + b):
    if a.count(v) != b.count(v):
      return False
  return True",Code,Human
4138,"def rotate(lst, offset):
  return lst[offset:] + lst[:offset]",Code,Human
4139,"def transpose(lst):
  return list(zip(*lst))",Code,Human
4140,"from datetime import datetime
def to_iso_date(d):
  return d.isoformat()",Code,Human
4141,"def to_roman_numeral(num):
  lookup = [
    (1000, 'M'),
    (900, 'CM'),
    (500, 'D'),
    (400, 'CD'),
    (100, 'C'),
    (90, 'XC'),
    (50, 'L'),
    (40, 'XL'),
    (10, 'X'),
    (9, 'IX'),
    (5, 'V'),
    (4, 'IV'),
    (1, 'I'),
  ]
  res = ''
  for (n, roman) in lookup:
    (d, num) = divmod(num, n)
    res += roman * d
  return res",Code,Human
4142,"def to_binary(n):
  return bin(n)",Code,Human
4143,"def weighted_average(nums, weights):
  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)",Code,Human
4144,"test_list = [[4, 5, 6, 7], [], [], [9, 8, 1], []] 
print(f""The original list is :{test_list} "") 
res = [row for row in test_list if len(row) > 0]
print(f""Filtered Matrix {res}"")",Code,Human
4145,"import math 
def primeFactors(n): 
	while n % 2 == 0: 
		print(2), 
		n = n / 2
	for i in range(3,int(math.sqrt(n))+1,2): 
		while n % i== 0: 
			print(i), 
			n = n / i 
	if n > 2: 
		print(n)",Code,Human
4146,"def sum_of_powers(end, power = 2, start = 1):
  return sum([(i) ** power for i in range(start, end + 1)])",Code,Human
4147,"def oddEvenSort(arr, n): 
	isSorted = 0
	while isSorted == 0: 
		isSorted = 1
		temp = 0
		for i in range(1, n-1, 2): 
			if arr[i] > arr[i+1]: 
				arr[i], arr[i+1] = arr[i+1], arr[i] 
				isSorted = 0
		for i in range(0, n-1, 2): 
			if arr[i] > arr[i+1]: 
				arr[i], arr[i+1] = arr[i+1], arr[i] 
				isSorted = 0	
	return",Code,Human
4148,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    print(factors)
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i",Code,Human
4149,"import random
for x in range(6):
    print('{:04.3f}'.format(random.uniform(x, 100)), end=' ')",Code,Human
4150,"import datetime
dt = datetime.datetime.today().replace(microsecond=0)
dt",Code,Human
4151,"import datetime
unix_timestamp=""1284105682""
print(
    datetime.datetime.fromtimestamp(
        int(unix_timestamp)
    ).strftime('%Y-%m-%d %H:%M:%S')
)",Code,Human
4152,"X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]
result = [[0,0,0],
         [0,0,0],
         [0,0,0]]
for i in range(len(X)):",Code,Human
4153,"for j in range(len(X[0])):
       result[i][j] = X[i][j] + Y[i][j]
for r in result:
   print(r)",Code,Human
4154,"X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]
for i in range(len(X)):
   for j in range(len(Y[0])):
       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
for r in result:
   print(r)",Code,Human
4155,"def days_diff(start, end):
  return (end - start).days",Code,Human
4156,"def decapitalize(s, upper_rest = False):
  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])",Code,Human
4157,"n = 4562; 
rev = 0
while(n > 0): 
    a = n % 10
    rev = rev * 10 + a 
    n = n // 10   
print(rev)",Code,Human
4158,"""""""Python Assignment Codes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/piyushjain220/TSAI/blob/main/NLP/Session8/Python_Assignment_Codes.ipynb
""""""",Code,Human
4159,"str = ""akshayjain""

def longest_non_repeat(str):   
    i=0
    max_length = 1

    for i,c in enumerate(str):       
        start_at = i
        sub_str=[]         
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
        if len(sub_str) > max_length:
            max_length = len(sub_str)
        print(sub_str)
    return max_length

longest_non_repeat(str)",Code,Human
4160,"input_array = [2, 7, 11, 15]
target = 26
result = []

for i, num in enumerate(input_array):
    for j in range(i+1, len(input_array)):
        print(i,j)",Code,Human
4161,"input_array = [0,1,2,4,5,7]
start=0
result = []
while start < len(input_array):
    end = start 
    while end+1<len(input_array) and ((input_array[end+1] - input_array[end]) == 1):
        end = end + 1
    if end!=start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
    else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
    start = end+1

print(result)",Code,Human
4162,"org = [1,2,3,4,5,6,7]
result = org[:]
steps = 3

for idx,num in enumerate(org):
    if idx+steps < len(org):
        result[idx+steps] = org[idx]
    else:
        result[idx+steps-len(org)] = org[idx]

print(result)",Code,Human
4163,"first_array = [1,2,3,4,5,6,7]
second_array = [3,7,2,1,4,6]

def finder(first_array, second_array):
    return(sum(first_array) - sum(second_array))

missing_number = finder(first_array, second_array)

print(missing_number)",Code,Human
4164,"org_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]
i = 0
while i < len(org_intervals)-1:
    if org_intervals[i+1][0] < org_intervals[i][1]:
        org_intervals[i][1]=org_intervals[i+1][1]
        del org_intervals[i+1]
        i = i - 1
    i = i + 1
print(org_intervals)",Code,Human
4165,"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]

length = len(sampleList)
chunkSize  = int(length/3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
  indexes = slice(start, end, 1)
  listChunk = sampleList[indexes]
  mylist = [i for i in listChunk]
  print(""After reversing it "", mylist)
  start = end
  if(i != 2):
    end +=chunkSize
  else:
    end += length - chunkSize",Code,Human
4166,"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')",Code,Human
4167,,Code,Human
4168,"X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]",Code,Human
4169,"Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]",Code,Human
4170,"result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]",Code,Human
4171,for i in range(len(X)):,Code,Human
4172,for j in range(len(Y[0])):,Code,Human
4173,"for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")",Code,Human
4174,"num1 = 12
num2 = 10

ratio = num1 % num2
print(f'remainder:{ratio}')",Code,Human
4175,"number = 1367891
revs_number = 0  
while (number > 0):
  remainder = number % 10
  revs_number = (revs_number * 10) + remainder
  number = number // 10
print(""The reverse number is : {}"".format(revs_number))",Code,Human
4176,"def sumDigits(no):  
    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))   
n = 1234511
print(sumDigits(n))",Code,Human
4177,"my_list = [4,3,2,9,10,44,1]
print(""mid value is "",my_list[int(len(my_list)/2)])",Code,Human
4178,"my_list = [4,3,2,9,10,44,1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")",Code,Human
4179,"my_list = [4,3,2,9,10,44,1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")",Code,Human
4180,"my_list1 = [4,3,2,9,10,44,1]
my_list2 = [5,6,2,8,15,14,12]
print(f""Sum of two list:,{my_list1+my_list2}"")",Code,Human
4181,"my_list1 = [4,3,2,9,10,44,1,9,12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")",Code,Human
4182,"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)",Code,Human
4183,"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)",Code,Human
4184,"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)",Code,Human
4185,"list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)",Code,Human
4186,"word = ""Hello World""
letter=word[0]
print(f""First Charecter in String:{letter}"")",Code,Human
4187,"word = ""Hello World""
letter=word[-1]
print(f""First Charecter in String:{letter}"")",Code,Human
4188,"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")",Code,Human
4189,"thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")",Code,Human
4190,"set1 = {""a"", ""b"" , ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")",Code,Human
4191,"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}

x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")",Code,Human
4192,"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}

x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")",Code,Human
4193,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")",Code,Human
4194,"thisdict = {
  ""brand"": ""Ford"",
  ""model"": ""Mustang"",
  ""year"": 1964
}

print(f""Length of Dictionary:{len(thisdict)}"")",Code,Human
4195,"print(bool(""Hello""))
print(bool(15))",Code,Human
4196,"word = ""Hello World""
print(f""Length of string: {len(word)}"")",Code,Human
4197,"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")",Code,Human
4198,"word = ""Hello World""
ksplit = word.split(' ') 
print(f""Splited Strings: {ksplit}"")",Code,Human
4199,"ten = ""."" * 10
print(f""Ten dots: {ten}"")",Code,Human
4200,"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")

#removes leading characters
word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")

#removes trailing characters
word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")",Code,Human
4201,"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")",Code,Human
4202,"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")",Code,Human
4203,"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")",Code,Human
4204,"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")",Code,Human
4205,"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")",Code,Human
4206,"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")",Code,Human
4207,"n = 100
result = []
a, b = 0 , 1
while b < n:
  result. append( b)
  a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")",Code,Human
4208,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isdigit()):
    digitCount += 1
print('Number of digits: ',digitCount)",Code,Human
4209,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.isalpha()):
    digitCount += 1
print('Number of alphanumeric: ',digitCount)",Code,Human
4210,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.upper()):
    digitCount += 1
print('Number total Upper Case: ',digitCount)",Code,Human
4211,"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0,len(str1)):
  char = str1[i]
  if(char.lower()):
    digitCount += 1
print('Number total lower Case: ',digitCount)",Code,Human
4212,"list1 = [1, 5, 3, 4]

for i in range(len(list1)-1):
  for j in range(i+1,len(list1)):
    if(list1[i] > list1[j]):
      temp = list1[i]
      list1[i] = list1[j]
      list1[j] = temp
print(""Bubble Sorted list: "",list1)",Code,Human
4213,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a*b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")",Code,Human
4214,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [a+b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")",Code,Human
4215,"list1 = [1, 2, 3]
list2 = [5, 6, 7] 
final = [list1[i]*list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")",Code,Human
4216,"s = [1,2,3,4]
print(f""last element from the stack:{s.pop()}"")",Code,Human
4217,"q = [1,2,3,4]
q.insert(0,5)
print(f""Revised List:{q}"")",Code,Human
4218,"v1 = [1,2,3]
v2 = [1,2,3]
s1 = [0,0,0]

for i in range(len(v1)):
  s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")",Code,Human
4219,"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""Final List:{prices}"")",Code,Human
4220,"import json
person_dict = {'name': 'Bob',
'age': 12,
'children': None
}
person_json = json.dumps(person_dict)
print(person_json)",Code,Human
4221,"import json
person_dict = {""name"": ""Bob"",
""languages"": [""English"", ""Fench""],
""married"": True,
""age"": 32
}
with open('person.txt', 'w') as json_file:
  json.dump(person_dict, json_file)",Code,Human
4222,"import json
person_string = '{""name"": ""Bob"", ""languages"": ""English"", ""numbers"": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent = 4, sort_keys=True))",Code,Human
4223,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""Piyush Jain"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""piyushjain220@gmail.com""
}""""""

print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
    print(""Key exist in JSON data"")
    print(student[""name""], ""marks is: "", student[""percentage""])
else:
    print(""Key doesn't exist in JSON data"")",Code,Human
4224,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""Piyush Jain"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""piyushjain220@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
     print(""value is present for given JSON key"")
     print(student.get('email'))
else:
    print(""value is not present for given JSON key"")",Code,Human
4225,"import json
sampleJson = {""id"" : 1, ""name"" : ""value2"", ""age"" : 29}

with open(""sampleJson.json"", ""w"") as write_file:
    json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")",Code,Human
4226,"aList = [1, 2, 3, 4, 5, 6, 7]
aList =  [x * x for x in aList]
print(aList)",Code,Human
4227,"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)",Code,Human
4228,"list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
   
resList = removeValue(list1, 20)
print(resList)",Code,Human
4229,"import random

print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
    print(random.randrange(100, 999, 5), end=', ')",Code,Human
4230,"import random

name = 'pynative'
char = random.choice(name)
print(""random char is "", char)",Code,Human
4231,"import random
import string

def randomString(stringLength):
    """"""Generate a random string of 5 charcters""""""
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for i in range(stringLength))

print (""Random String is "", randomString(5) )",Code,Human
4232,"import random
import time

def getRandomDate(startDate, endDate ):
    print(""Printing random date between"", startDate, "" and "", endDate)
    randomGenerator = random.random()
    dateFormat = '%m/%d/%Y'

    startTime = time.mktime(time.strptime(startDate, dateFormat))
    endTime = time.mktime(time.strptime(endDate, dateFormat))

    randomTime = startTime + randomGenerator * (endTime - startTime)
    randomDate = time.strftime(dateFormat, time.localtime(randomTime))
    return randomDate

print (""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))",Code,Human
4233,"def appendMiddle(s1, s2):
  middleIndex = int(len(s1) /2)
  middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]
  print(""After appending new string in middle"", middleThree)
  
appendMiddle(""Ault"", ""Kelly"")",Code,Human
4234,"str1 = ""PyNaTive""
lower = []
upper = []
for char in str1:
    if char.islower():
        lower.append(char)
    else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)",Code,Human
4235,"import re

inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
  totalMarks+=mark

percentage = totalMarks/len(markList)  
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)",Code,Human
4236,"str1 = ""Apple""
countDict = dict()
for char in str1:
  count = str1.count(char)
  countDict[char]=count
print(countDict)",Code,Human
4237,"str1 = ""PYnative""
print(""Original String is:"", str1)

str1 = str1[::-1]
print(""Reversed String is:"", str1)",Code,Human
4238,"import string

str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)",Code,Human
4239,"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)",Code,Human
4240,"from string import punctuation

str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
    str1 = str1.replace(char, replace_char)

print(""The strings after replacement : "", str1)",Code,Human
4241,"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
  if(item in countDict):
    countDict[item] += 1
  else:
    countDict[item] = 1
  
print(""Printing count of each item  "",countDict)",Code,Human
4242,"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)",Code,Human
4243,"firstSet  = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}

intersection = firstSet.intersection(secondSet)
for item in intersection:
  firstSet.remove(item)
print(""First Set after removing common element "", firstSet)",Code,Human
4244,"speed  ={'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53,
          'july':54, 'Aug':44, 'Sept':54} 

speedList = []
for item in speed.values():
  if item not in speedList:
    speedList.append(item)
print(""unique list"", speedList)",Code,Human
4245,"print('%o,' % (8))",Code,Human
4246,"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)",Code,Human
4247,"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)",Code,Human
4248,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))",Code,Human
4249,"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)",Code,Human
4250,"from datetime import datetime

date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
    delta = date_1 - date_2
else:
    delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")",Code,Human
4251,"def calculateSum(num):
    if num:
        return num + calculateSum(num-1)
    else:
        return 0
res = calculateSum(10)
print(res)",Code,Human
4252,"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)",Code,Human
4253,"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))",Code,Human
4254,"number = 7536
while (number > 0):
    digit = number % 10
    number = number // 10
    print(digit, end="" "")",Code,Human
4255,"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
   return [value for value in sampleList if value != val]
resList = removeValue(list1, num1)
print(resList)",Code,Human
4256,"import random
list = [2,5,8,9,12]
random.shuffle(list)
print (""Printing shuffled list "", list)",Code,Human
4257,"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array,""\n"")",Code,Human
4258,"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)",Code,Human
4259,"import random
num1 =5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))",Code,Human
4260,"import random
randomList = random.choices(range(10, 40, 5), cum_weights=(5, 15, 10, 25, 40, 65), k=6)
print(randomList)",Code,Human
4261,"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)",Code,Human
4262,"import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print(""size of list = "",sys.getsizeof(list1))",Code,Human
4263,"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"", listOne.count(listOne[0]) == len(listOne))",Code,Human
4264,"currentEmployee = {1: 'Scott', 2: ""Eric"", 3:""Kelly""}
formerEmployee  = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)",Code,Human
4265,"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)",Code,Human
4266,"test_str = ""geeksforgeeks""
res = """" 
for idx in range(len(test_str)): 
    if not idx % 2 : 
       res = res + test_str[idx].upper() 
    else: 
       res = res + test_str[idx].lower() 
print(res)",Code,Human
4267,"def return_exponential(num1, num2):
    return num1 ** num2",Code,Human
4268,"def string_split_at_space(string):
    return string.split()",Code,Human
4269,"def char_array(string):
    return list(string)",Code,Human
4270,"def factorial(x):
    prod = 1
    for i in range(1, x + 1):
        prod *= i

    return prod",Code,Human
4271,"def print_numbers(x):
    for i in range(x):
        print(i)",Code,Human
4272,"def concat(s1, s2):
    return s1 + s2",Code,Human
4273,"def every_other_number(lst):
    return lst[::2]",Code,Human
4274,"def every_nth_number(lst, n):
    return lst[::n]",Code,Human
4275,"def create_dictionary(key, value):
    return {str(key): value}",Code,Human
4276,"def update_dictionary(dict, key, value):
    dict[str(key)] = value
    return dict",Code,Human
4277,"def calc_median(arr):
    arr = sorted(arr)
    if len(arr) / 2 == 0:
        return arr[len(arr) / 2]
    else:
        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2",Code,Human
4278,"def return_length(arr):
    return len(arr) + 27",Code,Human
4279,"def return_last(arr):
    return arr[-3]",Code,Human
4280,"def calc_mean(arr):
    sum = 0
    for i in range(len(arr)):
        sum += arr[i]
    return sum / len(arr)",Code,Human
4281,"def sort_insertion(arr):
    for i in range(1, len(arr)):
        tmp = arr[i]

        j = i
        while (j > 0) & (tmp < arr[j - 1]):
            arr[j] = arr[j - 1]
            j = j - 1
        arr[j] = tmp
    return arr",Code,Human
4282,"class BinTree:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key",Code,Human
4283,"class BinaryTreeNode:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key


class Tree:
    def insert(self, root, key):
        if root is None:
            return BinaryTreeNode(key)
        else:
            if root.val == key:
                return root
            elif root.val < key:
                root.right = self.insert(root.right, key)
            else:
                root.left = self.insert(root.left, key)

        return root",Code,Human
4284,"class Cell:
    def __init__(self, val):
        self.val = val
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None",Code,Human
4285,"class Node:
    def __init__(self, val):
        self.val = val
        self.next = None


class LList:
    def __init__(self):
        self.head = None


def create_linked_list(*args):
    linked_list = LList()
    linked_list.head = Node(args[0])
    prev = linked_list.head

    for i in range(1, len(args)):
        entry = Node(args[i])
        prev.next = entry
        prev = entry
    return",Code,Human
4286,"from collections import Counter


def count_tokens(sent):
    sent = list(sent)
    return dict(Counter(sent))",Code,Human
4287,"import string


def remove_punct(s):
    return """".join(ch for ch in s if ch not in set(string.punctuation))",Code,Human
4288,"from functools import reduce


def count_second(lst):
    return reduce(lambda x, y: x + y, lst[::2])",Code,Human
4289,"def comp_power(lst):
    return list(map(lambda x: x ** 1.5, lst))",Code,Human
4290,"def rss(lst1, lst2):
    diff = [lst1[x] - lst2[x] for x in range(len(lst1))]
    return sum(list(map(lambda x: x ** 2, diff)))",Code,Human
4291,"import random


def pi_monte_carlo(n=1000000):
    count = 0
    for _ in range(n):
        x = random.random()
        y = random.random()
        if x ** 2 + y ** 2 <= 1:
            count += 1
    return 4 * count / n


print(pi_monte_carlo())",Code,Human
4292,"import os


def list_files():
    return os.listdir()",Code,Human
4293,"class NewtonRaphsonSolver:
    def __init__(self, f, x, dfdx, min_tol=1e-3):
        self.func = f
        self.x = x
        self.derivative = dfdx
        self.min_tol = min_tol

    def calculate(self):
        func_val = self.func(self.x)
        iterations = 0
        while abs(func_val) > self.min_tol and iterations < 100:
            self.x = self.x - float(func_val) / self.derivative(self.x)
            func_val = self.func(self.x)
            iterations += 1

        if iterations <= 100:
            return self.x
        else:
            return None


def f(x):

    return x ** 4 - 16


def dfdx(x):
    return 4 * x ** 3


nrs = NewtonRaphsonSolver(f, 10, dfdx)
print(nrs.calculate())",Code,Human
4294,"import random


def yield_a_number():
    yield random.randint(0, 1000000)",Code,Human
4295,"def map_reduce(lst):
    return reduce(lambda x, y: x + y, filter(lambda x: x % 2 == 0, lst))


print(map_reduce([1, 2, 3, 4, 5]))",Code,Human
4296,"def sub_list(lst, ind):
    return lst[:ind]


print(sub_list([1, 2, 3, 4, 5, 56], 3))",Code,Human
4297,"def bubblesort(arr):
    n = len(arr)

    for i in range(n - 1):
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr


print(bubblesort([1, 33, 192, 21, 0]))",Code,Human
4298,"def check_assert(item1, item2):
    try:
        assert item1 == item2
        return True
    except AssertionError:
        return False",Code,Human
4299,"from itertools import chain


def check_armstrong(n):
    sum_of_digits = sum(map(lambda x: int(x) ** 3, chain(str(n))))
    if sum_of_digits == n:
        return True
    else:
        return False",Code,Human
4300,"from collections import defaultdict


class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, f, t):
        self.graph[f].append(t)

    def printEdge(self):
        for ed in list(self.graph.keys()):
            print(f""From : {ed}, To : {self.graph[ed]}"")


g = Graph()
g.addEdge(""a"", ""b"")
g.addEdge(""a"", ""e"")
g.addEdge(""b"", ""d"")
g.addEdge(""c"", ""d"")
g.addEdge(""c"", ""a"")
g.printEdge()",Code,Human
4301,"class A:
    def __init__(self):
        print(""My name is GYOBU MASATAKA ONIWA!"")


class B(A):
    def __init__(self):
        super(B, self).__init__()
        print(""as I breath, you WILL not pass the castle gates!"")


tmp = B()

#",Code,Human
4302,"import random


def rand_range(low, high):
    return random.randrange(low, high)",Code,Human
4303,"def sort_by_len(arr):
    return sorted(arr, reverse=True, key=lambda x: len(x))",Code,Human
4304,"def calculate_hcf(x1, x2):
    if x1 == 0:
        return x2
    else:
        return hcf(x2 % x1, x1)",Code,Human
4305,"def hcf(x1, x2):
    if x1 == 0:
        return x2
    else:
        return hcf(x2 % x1, x1)


def lcm_hcf(x1, x2):
    h_c_f = hcf(x1, x2)
    lcm = x1 * x2 / h_c_f
    return lcm, h_c_f


l, h = lcm_hcf(18, 12)

print(f""LCM : {l}, HCF: {h}"")",Code,Human
4306,"def flip_dict(d):
    tmp_dict = {}
    for pair in d.items():
        tmp_dict[pair[1]] = pair[0]
    return tmp_dict


print(flip_dict({""a"": 10, ""b"": 20, ""c"": 15}))",Code,Human
4307,"import string


def return_punct():
    return string.punctuation",Code,Human
4308,"def to_lower(s):
    return s.lower()",Code,Human
4309,"def to_upper(s):
    return s.upper()",Code,Human
4310,"def flip_case(s):
    s = [int(ord(x)) for x in s]
    s = [x - 32 if x >= 97 else x + 32 for x in s]
    s = [chr(x) for x in s]
    return """".join(s)",Code,Human
4311,"import os


def get_cwd():
    return os.getcwd()",Code,Human
4312,"import requests


def read_data(url):
    data = requests.get(url).text
    return data",Code,Human
4313,"import requests


def get_status(url):
    data = requests.get(url)
    return data.status_code",Code,Human
4314,"import requests


def get_encoding(url):
    data = requests.get(url)
    return data.encoding",Code,Human
4315,"import os


def change_dir(path):
    return os.chdir(path)",Code,Human
4316,"import os


def get_env_path(key):
    return os.getenv(key)",Code,Human
4317,"import random


def generate_tf():
    rand = random.random()
    if rand > 0.5:
        yield True
    else:
        yield False",Code,Human
4318,"def normalize(arr):
    return [float(i) / sum(arr) for i in arr]


print(normalize([1, 2, 3, 4, 5]))",Code,Human
4319,"import math


def softmax(arr):
    e_arr = [math.exp(x) for x in arr]
    e_soft = [i / sum(e_arr) for i in e_arr]
    return e_soft


print(softmax([3.0, 1.0, 0.2]))",Code,Human
4320,"def slope_of_a_line(x1, x2, y1, y2):
    del_x = x2 - x1
    del_y = y2 - y1
    return float(del_y) / del_x


print(slope_of_a_line(0, 10, 0, 10))",Code,Human
4321,"import math


def is_perfect_square(num):
    sq_root = round(math.sqrt(num))
    if num == sq_root ** 2:
        return True
    else:
        return False",Code,Human
4322,"def relu(arr):
    return [x if x > 0 else 0 for x in arr]",Code,Human
4323,"def pad_arr_end(arr, pad_len):
    pad_arr = [0] * (pad_len - len(arr))
    return arr.extend(pad_arr)


tmp = [1, 2, 3, 4, 5]
pad_arr_end(tmp, 10)
print(tmp)",Code,Human
4324,"def pad_arr_start(arr, pad_len):
    pad_arr = [0] * (pad_len - len(arr))
    pad_arr.extend(arr)
    return pad_arr


tmp = [1, 2, 3, 4, 5]
x = pad_arr_start(tmp, 10)
print(x)",Code,Human
4325,"import math


def sigmoid(x):
    return 1 / (1 + math.exp(-x))",Code,Human
4326,"import math


def tanh(x):
    return (math.exp(2 * x) - 1) / (math.exp(2 * x) + 1)",Code,Human
4327,"import math


class Ellipse:
    def __init__(self, a, b):
        self.major_axis = b
        self.minor_axis = a

    def area(self):
        return math.pi * self.major_axis * self.minor_axis


ellipse = Ellipse(2, 10)
print(ellipse.area())",Code,Human
4328,"import time


def print_loop_with_delay(sec):
    for i in range(0, 10):
        time.sleep(sec)
        print(i)",Code,Human
4329,"def unique_tokens(st):
    return set(st)",Code,Human
4330,"import math


def st_dev(arr):
    avg = sum(arr) / len(arr)
    ss_dev = sum([(x - avg) ** 2 for x in arr])
    return math.sqrt(ss_dev / (len(arr) - 1))",Code,Human
4331,"import statistics


def mode(arr):
    return statistics.mode(arr)",Code,Human
4332,"def are_all_negative(arr):
    filt_arr = list(filter(lambda x: x < 0, arr))
    if len(filt_arr) == len(arr):
        return True
    else:
        return False",Code,Human
4333,"def sum_upto_one(arr):
    arr_sum = sum(arr)
    try:
        assert float(arr_sum) == 1.0
        return True
    except AssertionError:
        return False",Code,Human
4334,"import random

print(random.choice([i for i in range(11) if i % 2 == 0]))",Code,Human
4335,"import random

print(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))",Code,Human
4336,"import random

print(random.sample(range(100), 5))",Code,Human
4337,"import random

print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))",Code,Human
4338,"import random

print(random.sample([i for i in range(1, 1001) if i % 5 == 0 and i % 7 == 0], 5))",Code,Human
4339,"import random

print(random.randrange(7, 16))",Code,Human
4340,"def len_str(st):
    return len(st)",Code,Human
4341,"from timeit import Timer

t = Timer(""for i in range(100):1+1"")
print(t.timeit())",Code,Human
4342,"from random import shuffle

li = [3, 6, 7, 8]
shuffle(li)
print(li)",Code,Human
4343,"from random import shuffle

li = [3, 6, 7, 8]
shuffle(li)
print(li)",Code,Human
4344,"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)",Code,Human
4345,"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)",Code,Human
4346,"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)",Code,Human
4347,"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)",Code,Human
4348,"array = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]
print(array)",Code,Human
4349,"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)",Code,Human
4350,"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)",Code,Human
4351,"set1 = set([1, 3, 6, 78, 35, 55])
set2 = set([12, 24, 35, 24, 88, 120, 155])
set1 &= set2
li = list(set1)
print(li)",Code,Human
4352,"def removeDuplicate(li):
    newli = []
    seen = set()
    for item in li:
        if item not in seen:
            seen.add(item)
            newli.append(item)
    return newli


li = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]
print(removeDuplicate(li))",Code,Human
4353,"class Person(object):
    def getGender(self):
        return ""Unknown""


class Male(Person):
    def getGender(self):
        return ""Male""


class Female(Person):
    def getGender(self):
        return ""Female""


aMale = Male()
aFemale = Female()
print(aMale.getGender())
print(aFemale.getGender())",Code,Human
4354,"dic = {}
s = ""JRR Tolkien""
for s in s:
    dic[s] = dic.get(s, 0) + 1
print(""\n"".join([""%s,%s"" % (k, v) for k, v in dic.items()]))",Code,Human
4355,"def num_of_words(st):
    return len(st.split())",Code,Human
4356,"def every_alternate_char(s):
    s = s[::2]
    return s",Code,Human
4357,"import itertools

print(list(itertools.permutations([1, 2, 3])))",Code,Human
4358,"def solve(numheads, numlegs):
    ns = ""No solutions!""
    for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
    return ns, ns",Code,Human
4359,"import math


def apply_ceil(num):
    return math.ceil(x)",Code,Human
4360,"import math


def apply_floor(num):
    return math.floor(num)",Code,Human
4361,"def apply_round(num):
    return round(num)",Code,Human
4362,"import math


def OnesComplement(num):
    bits = int(math.floor(math.log(num) / math.log(2)) + 1)
    return ((1 << bits) - 1) ^ num",Code,Human
4363,"def dec2bin(num):
    print(format(num, ""b""))",Code,Human
4364,"def bin2dec(num):
    return int(num, 2)",Code,Human
4365,"def duplicate_array(num, n):
    num = [num] * n
    return num",Code,Human
4366,"import math


def nearest_square(n):
    upp = math.floor(math.sqrt(n))
    low = math.floor(math.sqrt(n))
    upp_diff = upp ** 2 - n
    low_diff = n - low ** 2

    if upp_diff > low_diff:
        return upp
    else:
        return low",Code,Human
4367,"def midpoint(a, b):
    lar = b if b > a else a
    sm = a if b > a else b

    return float(lar + sm) / 2",Code,Human
4368,"def reverse(st):
    return st[::-1]",Code,Human
4369,"def is_palindrome(st):
    st = st.lower()
    rev_st = st[::-1]
    try:
        assert rev_st == st
        return True
    except AssertionError:
        return False


st = ""Nitin""
print(is_palindrome(st))",Code,Human
4370,,Code,Human
4371,"num1 = 5465461
num2 = 8765468
sum = num1 + num2
print(f'Sum: {sum}')",Code,Human
4372,"def add_two_numbers(num1, num2):    
    sum = num1 + num2    
    return sum",Code,Human
4373,"num1 = 123
num2 = 125
num3 = 148
if (num1 >= num2) and (num1 >= num3):   
    largest = num1
elif (num2 >= num1) and (num2 >= num3):   
    largest = num2
else:   largest = num3
print(f'largest:{largest}')",Code,Human
4374,"l = [1,2,3,4,5]
print(len(l))",Code,Human
4375,"def get_list_length(l):
    return len(l)",Code,Human
4376,"t = (1,2,4,5,6)
print(f'list:{list(t)}')",Code,Human
4377,"def convert_tuple2list(t):
    return list(t)",Code,Human
4378,"l = ['a',4,5]
print(f'tuple:{tuple(l)}')",Code,Human
4379,"def list2tuple(l):
    return tuple(l)",Code,Human
4380,"def tuple_lenght(t):
    return len(t)",Code,Human
4381,"t = 1,2,3,4,5
print(f'tuple length: {len(t)}')",Code,Human
4382,"l1 = [1,2,3]
l2 = [4,5,6]

print(f'sum : {l1 + l2}')",Code,Human
4383,"l1 = [1,2,3]
l2 = [4,5,6]
def list_concat(l1,l2):
    return l1 + l2",Code,Human
4384,"def Cel_To_Fah(n): 
    return (n*1.8)+32
n = 20
print(int(Cel_To_Fah(n)))",Code,Human
4385,"def Fahrenheit_to_Kelvin(F): 
    return 273.5 + ((F - 32.0) * (5.0/9.0)) 
F = 100
print(""Temperature in Kelvin ( K ) = {:.3f}"" 
            .format(Fahrenheit_to_Kelvin( F )))",Code,Human
4386,"def Celsius_to_Kelvin(C): 
    return (C + 273.15) 
C = 100 
print(""Temperature in Kelvin ( K ) = "",  
                    Celsius_to_Kelvin(C))",Code,Human
4387,"def Convert(radian): 
    pi = 3.14159
    degree = radian * (180/pi) 
    return degree 
radian = 5
print(""degree ="",(Convert(radian)))",Code,Human
4388,"def rotateMatrix(mat): 
    N = 3  
    i = N - 1;  
    while(i >= 0): 
        j = N - 1; 
        while(j >= 0): 
            print(mat[i][j], end = "" ""); 
            j = j - 1; 
        print(); 
        i = i - 1;",Code,Human
4389,"mat = [[1, 2, 3], 
       [ 4, 5, 6 ], 
       [ 7, 8, 9 ]]; 
rotateMatrix(mat);",Code,Human
4390,"def leftRotate(n, d): 
    INT_BITS = 32
    return (n << d)|(n >> (INT_BITS - d)) 


n = 16
d = 2

print(""Left Rotation of"",n,""by"",d,""is"",end="" "") 
print(leftRotate(n, d))",Code,Human
4391,"def rightRotate(n, d): 
    INT_BITS = 32

    return (n >> d)|(n << (INT_BITS - d)) & 0xFFFFFFFF

n = 16
d = 2

print(""Right Rotation of"",n,""by"",d,""is"",end="" "") 
print(rightRotate(n, d))",Code,Human
4392,"def rotate(input,d): 

    Lfirst = input[0 : d] 
    Lsecond = input[d :] 
    Rfirst = input[0 : len(input)-d] 
    Rsecond = input[len(input)-d : ] 


    print (""Left Rotation : "", (Lsecond + Lfirst) ) 
    print (""Right Rotation : "", (Rsecond + Rfirst)) 

input = 'GeeksforGeeks'
d=2
rotate(input,d)",Code,Human
4393,"ini_string = 'xbzefdgstb'

print (""initial_strings : "", ini_string) 

sstring_strt = ini_string[:2] 
sstring_end = ini_string[3:] 

print (""print resultant substring from start"", sstring_strt) 
print (""print resultant substring from end"", sstring_end)",Code,Human
4394,"ini_string = 'xbzefdgstb'
print (""initial_strings : "", ini_string) 
sstring_alt = ini_string[::2] 
sstring_gap2 = ini_string[::3] 

print (""print resultant substring from start"", sstring_alt) 
print (""print resultant substring from end"", sstring_gap2)",Code,Human
4395,"ini_string = 'xbzefdgstb'
sstring = ini_string[2:7:2] 
print ('resultant substring{sstring}')",Code,Human
4396,"def cyclicRotate(input): 
    print ([input[-1]] + input[0:-1])",Code,Human
4397,"test_list = [5, 6, 2, 3, 9] 
K = 2
res = test_list[K : None] 
print (f""The sliced list is :{str(res)} ""  )",Code,Human
4398,"def Diff(li1, li2):
	return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))

li1 = [10, 15, 20, 25, 30, 35, 40]
li2 = [25, 40, 35]
print(Diff(li1, li2))",Code,Human
4399,"integer = 18
print(f""Round off value : {round(integer , -1)}"")",Code,Human
4400,"print(f""Round off value : {round(51.6)}"")",Code,Human
4401,"a, b = 10, 20
min = a if a < b else b 
print(min)",Code,Human
4402,"a, b = 10, 20
print( (b, a) [a < b] ) 
print({True: a, False: b} [a < b]) 
print((lambda: b, lambda: a)[a < b]())",Code,Human
4403,"print (any([False, True, False, False]))",Code,Human
4404,"print (all([False, True, False, False])) 

#write Python3 code to demonstrate working of Check if tuple has any None value using any() + map() + lambda 
test_tup = (10, 4, 5, 6, None) 
res = any(map(lambda ele: ele is None, test_tup)) 
print(""Does tuple contain any None value ? : "" + str(res))",Code,Human
4405,"test_tup = (10, 4, 5, 6, None) 
print(""The original tuple : "" + str(test_tup))  
res = not all(test_tup) 
print(""Does tuple contain any None value ? : "" + str(res))",Code,Human
4406,"test_list = [(4, 5, 1), (6, 1, 5), (7, 4, 2), (6, 2, 4)] 
print(""The original list is : "" + str(test_list)) 
N = 1
test_list.sort(key = lambda x: x[N]) 
print(""List after sorting tuple by Nth index sort : "" + str(test_list))",Code,Human
4407,"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] 
for record in a: 
	print(record)",Code,Human
4408,"a = [ [2, 4, 6, 8 ], 
    [ 1, 3, 5, 7 ], 
    [ 8, 6, 4, 2 ], 
    [ 7, 5, 3, 1 ] ] 

for i in range(len(a)) : 
    for j in range(len(a[i])) : 
        print(a[i][j], end="" "") 
    print()",Code,Human
4409,"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] 
a.append([5, 10, 15, 20, 25]) 
print(a) 

#write a program for  Extending a sublist 

a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] 
a[0].extend([12, 14, 16, 18]) 
print(a)",Code,Human
4410,"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] 
a[2].reverse() 
print(a)",Code,Human
4411,"string = ""geeks for geeks geeks geeks geeks""

print(string.replace(""geeks"", ""Geeks"")) 

print(string.replace(""geeks"", ""GeeksforGeeks"", 3))",Code,Human
4412,"test_str = ""GFG is good""
print(""The original string is : "" + test_str) 
rep_str = ""best""
res = "" "".join(test_str.split(' ')[:-1] + [rep_str]) 
print(""The String after performing replace : "" + res)",Code,Human
4413,"test_str = ""GFG is good""
print(""The original string is : "" + test_str) 
rep_str = ""best""
res = test_str[: test_str.rfind(' ')] + ' ' + rep_str 
print(""The String after performing replace : "" + res)",Code,Human
4414,"test_list = [1, 4, 5, 6, 7, 8, 9, 12] 
print (""The original list is : "" + str(test_list)) 
test_list = test_list[1 :] + test_list[: 1] 
print (""The list after shift is : "" + str(test_list))",Code,Human
4415,"test_list = [1, 4, 5, 6, 7, 8, 9, 12] 
print (""The original list is : "" + str(test_list)) 
test_list.insert(len(test_list) - 1, test_list.pop(0)) 
print (""The list after shift is : "" + str(test_list))",Code,Human
4416,"def get_rear(sub): 
    return sub[-1] 
test_list = ['gfg', 'is', 'best', 'for', 'geeks'] 
print(""The original list is : "" + str(test_list)) 
test_list.sort(key = get_rear) 
print(""Sorted List : "" + str(test_list))",Code,Human
4417,"test_list = ['gfg', 'is', 'best', 'for', 'geeks'] 

print(""The original list is : "" + str(test_list)) 

res = sorted(test_list, key = lambda sub : sub[-1]) 

print(""Sorted List : "" + str(res))",Code,Human
4418,"test_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] 

print(""The original list : "" + str(test_list)) 

K = 4

res = [sub[ : len(sub) - K] for sub in test_list] 

print(""The list after removing last characters : "" + str(res))",Code,Human
4419,"test_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils'] 

print(""The original list : "" + str(test_list)) 

K = 4

res = list(map(lambda i: i[ : (len(i) - K)], test_list)) 

print(""The list after removing last characters : "" + str(res))",Code,Human
4420,"test_list = ["""", """", ""Akshat"", ""Nikhil""] 

print(""The original list : "" + str(test_list)) 
K = 2
test_list.reverse() 
test_list = iter(test_list) 
for idx in range(0, K): 
    res = next(sub for sub in test_list if sub) 

print(""The Kth non empty string from rear is : "" + str(res))",Code,Human
4421,"test_list = ["""", """", ""Akshat"", ""Nikhil""] 

print(""The original list : "" + str(test_list)) 

K = 2

res = list (filter(None, test_list))[-K] 

print(""The Kth non empty string from rear is : "" + str(res))",Code,Human
4422,"Dict = {1: 'Geeks', 2: 'For', 3: 'Geeks'} 
print(""\nDictionary with the use of Integer Keys: "") 
print(Dict)",Code,Human
4423,"Dict = {'Name': 'Geeks', 1: [1, 2, 3, 4]} 
print(""\nDictionary with the use of Mixed Keys: "") 
print(Dict)",Code,Human
4424,"Dict = {} 
print(""Empty Dictionary: "") 
print(Dict)",Code,Human
4425,"Dict = dict({1: 'Geeks', 2: 'For', 3:'Geeks'}) 
print(""\nDictionary with the use of dict(): "") 
print(Dict)",Code,Human
4426,"Dict = dict([(1, 'Geeks'), (2, 'For')]) 
print(""\nDictionary with each item as a pair: "") 
print(Dict)",Code,Human
4427,"Dict = {1: 'Geeks', 2: 'For', 
        3:{'A' : 'Welcome', 'B' : 'To', 'C' : 'Geeks'}} 

print(Dict)",Code,Human
4428,"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 

print(""Accessing a element using get:"") 
print(Dict.get(3)) 


#write a python Creating a Dictionary and  Accessing element using key 
Dict = {'Dict1': {1: 'Geeks'}, 
    'Dict2': {'Name': 'For'}} 

print(Dict['Dict1']) 
print(Dict['Dict1'][1]) 
print(Dict['Dict2']['Name'])",Code,Human
4429,"Dict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', 
        'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, 
        'B' : {1 : 'Geeks', 2 : 'Life'}} 
print(""Initial Dictionary: "") 
print(Dict) 

del Dict[6] 
print(""\nDeleting a specific key: "") 
print(Dict) 

del Dict['A'][2] 
print(""\nDeleting a key from Nested Dictionary: "") 
print(Dict)",Code,Human
4430,"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 


pop_ele = Dict.popitem() 
print(""\nDictionary after deletion: "" + str(Dict)) 
print(""The arbitrary pair returned is: "" + str(pop_ele))",Code,Human
4431,"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'} 


Dict.clear() 
print(""\nDeleting Entire Dictionary: "") 
print(Dict)",Code,Human
4432,"test_list1 = [{""HpY"" : 22}, {""BirthdaY"" : 2}, ] 
test_list2 = [{""HpY"" : 22}, {""BirthdaY"" : 2}, {""Shambhavi"" : 2019}] 

print (""The original list 1 is : "" + str(test_list1)) 
print (""The original list 2 is : "" + str(test_list2)) 

res = [i for i in test_list1 if i not in test_list2] + [j for j in test_list2 if j not in test_list1] 

print (""The set difference of list is : "" + str(res))",Code,Human
4433,"ini_list = [{'name':'akash', 'd.o.b':'1997-03-02'}, 
            {'name':'manjeet', 'd.o.b':'1997-01-04'}, 
            {'name':'nikhil', 'd.o.b':'1997-09-13'}] 

print (""initial list : "", str(ini_list)) 

ini_list.sort(key = lambda x:x['d.o.b']) 

print (""result"", str(ini_list))",Code,Human
4434,"test_list = [{""Gfg"" : 3, 4 : 9}, {""is"": 8, ""Good"" : 2}, {""Best"": 10, ""CS"" : 1}] 

print(""The original list : "" + str(test_list)) 

res = dict() 
for idx, val in enumerate(test_list): 
    res[idx] = val 

print(""The constructed dictionary : "" + str(res))",Code,Human
4435,"test_list = [{""Gfg"" : 3, 4 : 9}, {""is"": 8, ""Good"" : 2}, {""Best"": 10, ""CS"" : 1}] 

print(""The original list : "" + str(test_list)) 

res = {idx : val for idx, val in enumerate(test_list)} 
print(""The constructed dictionary : "" + str(res))",Code,Human
4436,"test_list = [{'gfg' : 1, 'best' : 2}, {'gfg' : 4, 'best': 5}] 

print(""The original list : "" + str(test_list)) 

res = [tuple(sub[""gfg""] for sub in test_list), 
    tuple(sub[""best""] for sub in test_list)] 

print(""Segregated values of keys are : "" + str(res))",Code,Human
4437,"test_list = [{'gfg' : 1, 'best' : 2}, {'gfg' : 4, 'best': 5}] 

print(""The original list : "" + str(test_list)) 

res = list(zip(*map(dict.values, test_list))) 
 
print(""Segregated values of keys are : "" + str(res))",Code,Human
4438,"test_list = [{""Gfg"" : [6, 7, 8], ""is"" : 9, ""best"" : 10}, 
            {""Gfg"" : [2, 0, 3], ""is"" : 11, ""best"" : 19}, 
            {""Gfg"" : [4, 6, 9], ""is"" : 16, ""best"" : 1}] 
print(""The original list : "" + str(test_list)) 
K = ""Gfg""
idx = 2
res = sorted(test_list, key = lambda ele: ele[K][idx]) 
print(""The required sort order : "" + str(res))",Code,Human
4439,"test_list = [{""Gfg"" : [6, 7, 9], ""is"" : 9, ""best"" : 10}, 
            {""Gfg"" : [2, 0, 3], ""is"" : 11, ""best"" : 19}, 
            {""Gfg"" : [4, 6, 9], ""is"" : 16, ""best"" : 1}] 
print(""The original list : "" + str(test_list)) 
K = ""Gfg""
idx = 2
K2 = ""best""
res = sorted(sorted(test_list, key = lambda ele: ele[K2]), key = lambda ele: ele[K][idx]) 
print(""The required sort order : "" + str(res))",Code,Human
4440,"test_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, 
            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, 
            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] 

print(""The original list is : "" + str(test_list)) 

res = [] 
for idx, sub in enumerate(test_list, start = 0): 
    if idx == 0: 
        res.append(list(sub.keys())) 
        res.append(list(sub.values())) 
    else: 
        res.append(list(sub.values())) 

print(""The converted list : "" + str(res))",Code,Human
4441,"test_list = [{'Nikhil' : 17, 'Akash' : 18, 'Akshat' : 20}, 
            {'Nikhil' : 21, 'Akash' : 30, 'Akshat' : 10}, 
            {'Nikhil' : 31, 'Akash' : 12, 'Akshat' : 19}] 

print(""The original list is : "" + str(test_list)) 

res = [[key for key in test_list[0].keys()], *[list(idx.values()) for idx in test_list ]] 

print(""The converted list : "" + str(res))",Code,Human
4442,"lis = [{ ""name"" : ""Nandini"", ""age"" : 20}, 
{ ""name"" : ""Manjeet"", ""age"" : 20 },
{ ""name"" : ""Nikhil"" , ""age"" : 19 }]

print (""The list printed sorting by age: "")
print (sorted(lis, key = lambda i: i['age']))
print (""\r"")",Code,Human
4443,"test_list = [{""Gfg"" : 4, ""is"" : 8, ""best"" : 9}, 
            {""Gfg"" : 5, ""is"": 8, ""best"" : 1}, 
            {""Gfg"" : 3, ""is"": 7, ""best"" : 6}, 
            {""Gfg"" : 3, ""is"": 7, ""best"" : 5}] 

print(""The original list : "" + str(test_list)) 

K = 15

res = [] 
for sub in test_list: 
    sum = 0
    for key in sub: 
        sum += sub[key] 
    if sum > K: 
        res.append(sub) 

print(""Dictionaries with summation greater than K : "" + str(res))",Code,Human
4444,"dictionary = {""raj"": 2, ""striver"": 3, ""vikram"": 4} 
print(dictionary.values())",Code,Human
4445,"l1 = [""eat"",""sleep"",""repeat""] 
s1 = ""geek""

obj1 = enumerate(l1) 
obj2 = enumerate(s1) 

print (""Return type:"",type(obj1) )
print( list(enumerate(l1)) )

print( list(enumerate(s1,2)) )",Code,Human
4446,"l1 = [""eat"",""sleep"",""repeat""] 

for count,ele in enumerate(l1,100): 
    print (count,ele )",Code,Human
4447,"test_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, 
            {'it' : 5, 'is' : 7, 'best' : 8}, 
            {'CS' : 10}] 

print(""The original list is : "" + str(test_list)) 

res = {} 
for sub in test_list: 
    for key, val in sub.items(): 
        res.setdefault(key, []).append(val) 

print(""The merged values encapsulated dictionary is : "" + str(res))",Code,Human
4448,"test_list = [{'gfg' : 2, 'is' : 4, 'best' : 6}, 
            {'it' : 5, 'is' : 7, 'best' : 8}, 
            {'CS' : 10}] 

print(""The original list is : "" + str(test_list)) 

res = {key: list({sub[key] for sub in test_list if key in sub}) 
    for key in {key for sub in test_list for key in sub}} 

print(""The merged values encapsulated dictionary is : "" + str(res))",Code,Human
4449,"test_dict = {'gfg' : [4, 5, 6], 
            'is' : [8, 8, 9], 
            'CS' : [1, 3, 8], 
            'Maths' : [1, 2]} 
 
print(""The original dictionary : "" + str(test_dict)) 

que_list = ['gfg', 'CS', 'Maths'] 

new_data = [test_dict.pop(ele) for ele in que_list] 
test_dict[""merge_key""] = new_data 
 
print(""The dictionary after merging : "" + str(test_dict))",Code,Human
4450,"def Convert_1(string): 
    li = list(string.split("" "")) 
    return li 
 
str1 = ""Geeks for Geeks""
print(Convert(str1))",Code,Human
4451,"def Convert_2(string): 
    li = list(string.split(""-"")) 
    return li 

str1 = ""Geeks-for-Geeks""
print(Convert(str1))",Code,Human
4452,"def Convert_3(string): 
    list1=[] 
    list1[:0]=string 
    return list1 

str1=""ABCD""
print(Convert(str1))",Code,Human
4453,"test_list = ['4, 1', '3, 2', '5, 3'] 

print(""The original list : "" + str(test_list)) 

res = [tuple(map(int, sub.split(', '))) for sub in test_list] 

print(""The list after conversion to tuple list : "" + str(res))",Code,Human
4454,"test_list = ['4, 1', '3, 2', '5, 3'] 
print(""The original list : "" + str(test_list)) 
res = list(map(eval, test_list)) 
print(""The list after conversion to tuple list : "" + str(res))",Code,Human
4455,"test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')] 
print(""The original list : "" + str(test_list)) 
res = [ (tup1, tup2) for i, tup2 in test_list for tup1 in i ] 
print(""The list tuple combination : "" + str(res))",Code,Human
4456,"test_list = [(5, 6), (2, 4), (5, 7), (2, 5)] 
print(""The original list is : "" + str(test_list)) 
sub_list = [7, 2, 4, 6] 
res = [sub + tuple(sub_list) for sub in test_list] 
print(""The modified list : "" + str(res))",Code,Human
4457,"test_list = [(5, 6), (2, 4), (5, 7), (2, 5)] 
print(""The original list is : "" + str(test_list)) 

sub_list = [7, 2, 4, 6] 
res = [(*sub, *sub_list) for sub in test_list] 
print(""The modified list : "" + str(res))",Code,Human
4458,"test_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), 
                            ('G', 'E', 'E', 'K', 'S')] 
print (""The original list is : "" + str(test_list)) 
res = [''.join(i) for i in test_list] 
print (""The list after conversion to list of string : "" + str(res))",Code,Human
4459,"test_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'), 
                            ('G', 'E', 'E', 'K', 'S')] 
print (""The original list is : "" + str(test_list)) 
res = list(map(''.join, test_list)) 
print (""The list after conversion to list of string : "" + str(res))",Code,Human
4460,"test_tup1 = (3, 4), 
test_tup2 = (5, 6), 
 
print(""The original tuple 1 : "" + str(test_tup1)) 
print(""The original tuple 2 : "" + str(test_tup2)) 
res = test_tup1 + test_tup2 
print(""Tuples after Concatenating : "" + str(res))",Code,Human
4461,"test_tup1 = (3, 4) 
test_tup2 = (5, 6) 

print(""The original tuple 1 : "" + str(test_tup1)) 
print(""The original tuple 2 : "" + str(test_tup2)) 

res = ((test_tup1, ) + (test_tup2, )) 

print(""Tuples after Concatenating : "" + str(res))",Code,Human
4462,"ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 

print(""intial_list"", str(ini_tuple))
result = [i for i in ini_tuple if i[1] <= 100] 
print (""Resultant tuple list: "", str(result))",Code,Human
4463,"ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 
print(""intial_list"", str(ini_tuple)) 
result = list(filter(lambda x: x[1] <= 100, ini_tuple)) 
print (""Resultant tuple list: "", str(result))",Code,Human
4464,"ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 

print(""intial_list"", str(ini_tuple)) 
result = [] 
for i in ini_tuple: 
    if i[1] <= 100: 
        result.append(i) 
print (""Resultant tuple list: "", str(result))",Code,Human
4465,"ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 
print(""intial_list"", str(ini_tuple)) 

result = [] 
for i in ini_tuple: 
    if i[1] <= 100: 
        result.append(i) 
print (""Resultant tuple list: "", str(result))",Code,Human
4466,"listOfTuples = [('string', 'Geeks'), (2, 225), (3, '111'), (4, 'Cyware'), (5, 'Noida')]	 
output = [tuple(j for j in i if not isinstance(j, str)) for i in listOfTuples] 

print(output)",Code,Human
4467,"test_list = [(""45"", ""86""), (""Gfg"", ""1""), (""98"", ""10""), (""Gfg"", ""Best"")] 
print(""The original list is : "" + str(test_list)) 
res = [sub for sub in test_list if all(ele.isdigit() for ele in sub)] 
print(""Filtered Tuples : "" + str(res))",Code,Human
4468,"test_list = [(""45"", ""86""), (""Gfg"", ""1""), (""98"", ""10""), (""Gfg"", ""Best"")] 
print(""The original list is : "" + str(test_list)) 
res = list(filter(lambda sub : all(ele.isdigit() for ele in sub), test_list)) 
print(""Filtered Tuples : "" + str(res))",Code,Human
4469,"test_str = ""geeks4geeks is best""
print(""The original string is : "" + str(test_str)) 
temp = 0
for chr in test_str: 
    if chr.isdigit(): 
        temp = test_str.index(chr) 
print(""Extracted String : "" + str(test_str[0 : temp])) 

1.",Code,Human
4470,"def primeornot(num):
    if num > 1:
        for i in range(2,num):
            if (num % i) == 0:
                print(num,""is not a prime number"")
                break
        else:
            print(num,""is a prime number"")
    else:
        print(num,""is not a prime number"")

primeornot(7)                

2.",Code,Human
4471,"num1 = 5
num2 = 10
temp = num1
num1 = num2
num2 = temp
print(""The value of num1 after swapping: {}"".format(num1))
print(""The value of num2 after swapping: {}"".format(num2))

3.",Code,Human
4472,"def addlist(list1,list2):
    result = list1+list2
    return result

answer = addlist(['cat','dog'],['samsung','oneplus'])

4.",Code,Human
4473,"def reverselist(inlist):    
    inlist = inlist[::-1] 
    return inlist

result = reverselist([1,2])

5.",Code,Human
4474,"def findfactorial(num):
    factorial = 1
    if num < 0:
        print(""Sorry, factorial does not exist for negative numbers"")
    elif num == 0:
        print(""The factorial of 0 is 1"")
    else:
        for i in range(1,num+1):
            factorial = factorial*i
        print(""The factorial of"",num,""is"",factorial)
        
findfactorial(3)        

6.",Code,Human
4475,"def largest(arr):
    max = arr[0]
    n = len(arr)
    for i in range(1,n):
        if arr[i] > max:
            max = arr[i]
        return max

largest([1,20,3])    

7.",Code,Human
4476,"def isPalindrome(s):
    if (s == s[::-1]):
        print(""Given string is palindrome"")
    else:
        print(""Given string is not palindrome"")

s = ""malayalam""
isPalindrome(s)

8.
#Write a function to convert Kilometers to Miles
def Kilometers_to_Miles(km):
    conv_fac = 0.621371
    miles = km * conv_fac
    return miles

9. 
#Write a function to convert Miles to Kilometers
def Miles_to_Kilometers(m):
    conv_fac = 0.621371
    kilometers = m / conv_fac
    return kilometers    

10. 
#Write a function to Convert Celsius To Fahrenheit
def Celsius_To_Fahrenheit(c):
    fahrenheit = (c * 1.8) + 32
    return fahrenheit

11.
#Write a fucntion to convert Fahrenheit to Celsius
def Fahrenheit_to_Celsius(f):
    celsius = (f - 32) / 1.8
    return celsius

12.
#Convert Decimal to Binary, Octal and Hexadecimal
dec = 344
print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")
print(oct(dec), ""in octal."")
print(hex(dec), ""in hexadecimal."")

13.
#Find ASCII Value of Character
c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))


14.
#Multiply Two Matrices
X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]

result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]

for i in range(len(X)):

   for j in range(len(Y[0])):

       for k in range(len(Y)):
           result[i][j] += X[i][k] * Y[k][j]

for r in result:
   print(r)",Code,Human
4477,"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))
print ','.join(l)",Code,Human
4478,"def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)
x=int(raw_input())
print fact(x)",Code,Human
4479,"n=int(raw_input())
d=dict()
for i in range(1,n+1):
    d[i]=i*i
print d",Code,Human
4480,"values=raw_input()
l=values.split("","")
t=tuple(l)
print l
print t",Code,Human
4481,"class InputOutString(object):
    def __init__(self):
        self.s = """"
    def getString(self):
        self.s = raw_input()
strObj = InputOutString()
strObj.getString()",Code,Human
4482,"import math
c=50
h=30
value = []
items=[x for x in raw_input().split(',')]
for d in items:
    value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))
print ','.join(value)",Code,Human
4483,"input_str = raw_input()
dimensions=[int(x) for x in input_str.split(',')]
rowNum=dimensions[0]
colNum=dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]
for row in range(rowNum):
    for col in range(colNum):
        multilist[row][col]= row*col
print multilist",Code,Human
4484,"items=[x for x in raw_input().split(',')]
items.sort()
print ','.join(items)",Code,Human
4485,"lines = []
while True:
    s = raw_input()
    if s:
        lines.append(s.upper())
    else:
        break;
for sentence in lines:
    print sentence",Code,Human
4486,"s = raw_input()
words = [word for word in s.split("" "")]
print "" "".join(sorted(list(set(words))))",Code,Human
4487,"value = []
items=[x for x in raw_input().split(',')]
for p in items:
    intp = int(p, 2)
    if not intp%5:
        value.append(p)
print ','.join(value)",Code,Human
4488,"values = []
for i in range(1000, 3001):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
        values.append(s)
print "","".join(values)",Code,Human
4489,"s = raw_input()
d={""DIGITS"":0, ""LETTERS"":0}
for c in s:
    if c.isdigit():
        d[""DIGITS""]+=1
    elif c.isalpha():
        d[""LETTERS""]+=1
    else:
        pass
print ""LETTERS"", d[""LETTERS""]
print ""DIGITS"", d[""DIGITS""]",Code,Human
4490,"s = raw_input()
d={""UPPER CASE"":0, ""LOWER CASE"":0}
for c in s:
    if c.isupper():
        d[""UPPER CASE""]+=1
    elif c.islower():
        d[""LOWER CASE""]+=1
    else:
        pass
print ""UPPER CASE"", d[""UPPER CASE""]
print ""LOWER CASE"", d[""LOWER CASE""]",Code,Human
4491,"a = raw_input()
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
n4 = int( ""%s%s%s%s"" % (a,a,a,a) )
print n1+n2+n3+n4",Code,Human
4492,"values = raw_input()
numbers = [x for x in values.split("","") if int(x)%2!=0]
print "","".join(numbers)",Code,Human
4493,"netAmount = 0
while True:
    s = raw_input()
    if not s:
        break
    values = s.split("" "")
    operation = values[0]
    amount = int(values[1])
    if operation==""D"":
        netAmount+=amount
    elif operation==""W"":
        netAmount-=amount
    else:
        pass
print netAmount

Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.

def putNumbers(n):
    i = 0
    while i<n:
        j=i
        i=i+1
        if j%7==0:
            yield j
for i in reverse(100):
    print i

A robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:
import math
pos = [0,0]
while True:
    s = raw_input()
    if not s:
        break
    movement = s.split("" "")
    direction = movement[0]
    steps = int(movement[1])
    if direction==""UP"":
        pos[0]+=steps
    elif direction==""DOWN"":
        pos[0]-=steps
    elif direction==""LEFT"":
        pos[1]-=steps
    elif direction==""RIGHT"":
        pos[1]+=steps
    else:
        pass
print int(round(math.sqrt(pos[1]**2+pos[0]**2)))",Code,Human
4494,"freq = {}  
line = raw_input()
for word in line.split():
    freq[word] = freq.get(word,0)+1
words = freq.keys()
words.sort()
for w in words:
    print ""%s:%d"" % (w,freq[w])",Code,Human
4495,"def square(num):
    return num ** 2",Code,Human
4496,"def cube(num):
    return num ** 3",Code,Human
4497,"class Person:    
    name = ""Person""
    def __init__(self, name = None):
        self.name = name
jeffrey = Person(""Jeffrey"")
print ""%s name is %s"" % (Person.name, jeffrey.name)
nico = Person()
nico.name = ""Nico""
print ""%s name is %s"" % (Person.name, nico.name)",Code,Human
4498,"def SumFunction(number1, number2):
	return number1+number2",Code,Human
4499,"def printValue(n):
	print str(n)",Code,Human
4500,"def printValue(n):
	print str(n)",Code,Human
4501,"def printValue(s1,s2):
	print int(s1)+int(s2)",Code,Human
4502,"def printValue(s1,s2):
	print s1+s2",Code,Human
4503,"def printValue(s1,s2):
	len1 = len(s1)
	len2 = len(s2)
	if len1>len2:
		print s1
	elif len2>len1:
		print s2
	else:
		print s1
		print s2",Code,Human
4504,"def checkValue(n):
	if n%2 == 0:
		print ""It is an even number""
	else:
		print ""It is an odd number""",Code,Human
4505,"def printDict():
	d=dict()
	d[1]=1
	d[2]=2**2
	d[3]=3**2
	print d",Code,Human
4506,"def printDict():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	print d",Code,Human
4507,"def printDict():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for (k,v) in d.items():	
		print v",Code,Human
4508,"def printDict():
	d=dict()
	for i in range(1,21):
		d[i]=i**2
	for k in d.keys():	
		print k",Code,Human
4509,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li",Code,Human
4510,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li[:5]",Code,Human
4511,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li[-5:]",Code,Human
4512,"def printList():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print li[5:]",Code,Human
4513,"def printTuple():
	li=list()
	for i in range(1,21):
		li.append(i**2)
	print tuple(li)",Code,Human
4514,"tp=(1,2,3,4,5,6,7,8,9,10)
tp1=tp[:5]
tp2=tp[5:]
print tp1
print tp2",Code,Human
4515,"tp=(1,2,3,4,5,6,7,8,9,10)
li=list()
for i in tp:
	if tp[i]%2==0:
		li.append(tp[i])
tp2=tuple(li)
print tp2",Code,Human
4516,"s= raw_input()
if s==""yes"" or s==""YES"" or s==""Yes"":
    print ""Yes""
else:
    print ""No""",Code,Human
4517,"li = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = filter(lambda x: x%2==0, li)
print evenNumbers",Code,Human
4518,"li = [1,2,3,4,5,6,7,8,9,10]
squaredNumbers = map(lambda x: x**2, li)
print squaredNumbers",Code,Human
4519,"li = [1,2,3,4,5,6,7,8,9,10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, li))
print evenNumbers",Code,Human
4520,"evenNumbers = filter(lambda x: x%2==0, range(1,21))
print evenNumbers",Code,Human
4521,"squaredNumbers = map(lambda x: x**2, range(1,21))
print squaredNumbers",Code,Human
4522,"class American(object):
    @staticmethod
    def printNationality():
        print ""America""
anAmerican = American()
anAmerican.printNationality()
American.printNationality()",Code,Human
4523,"class American(object):
    pass
class NewYorker(American):
    pass
anAmerican = American()
aNewYorker = NewYorker()
print anAmerican
print aNewYorker",Code,Human
4524,"class Circle(object):
    def __init__(self, r):
        self.radius = r
    def area(self):
        return self.radius**2*3.14
aCircle = Circle(2)
print aCircle.area()",Code,Human
4525,"class Rectangle(object):
    def __init__(self, l, w):
        self.length = l
        self.width  = w
    def area(self):
        return self.length*self.width
aRectangle = Rectangle(2,10)
print aRectangle.area()",Code,Human
4526,"class Shape(object):
    def __init__(self):
        pass
    def area(self):
        return 0
class Square(Shape):
    def __init__(self, l):
        Shape.__init__(self)
        self.length = l
    def area(self):
        return self.length*self.length
aSquare= Square(3)
print aSquare.area()",Code,Human
4527,raise RuntimeError('something wrong'),Code,Human
4528,"def throws():
    return 5/0
try:
    throws()
except ZeroDivisionError:
    print ""division by zero!""
except Exception, err:
    print 'Caught an exception'
finally:
    print 'In finally block for cleanup'",Code,Human
4529,"class MyError(Exception):
    def __init__(self, msg):
        self.msg = msg
error = MyError(""something wrong"")",Code,Human
4530,"import re
emailAddress = raw_input()
pat2 = ""(\w+)@((\w+\.)+(com))""
r2 = re.match(pat2,emailAddress)
print r2.group(1)",Code,Human
4531,"import re
emailAddress = raw_input()
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2,emailAddress)
print r2.group(2)",Code,Human
4532,"import re
s = raw_input()
print re.findall(""\d+"",s)",Code,Human
4533,"unicodeString = u""hello world!""
print unicodeString",Code,Human
4534,"s = raw_input()
u = unicode( s ,""utf-8"")
print u",Code,Human
4535,"n=int(raw_input())
sum=0.0
for i in range(1,n+1):
    sum += float(float(i)/(i+1))
print sum",Code,Human
4536,"def f(n):
    if n==0:
        return 0
    else:
        return f(n-1)+100
n=int(raw_input())
print f(n)",Code,Human
4537,"Solution:
def f(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return f(n-1)+f(n-2)",Code,Human
4538,"def f(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return f(n-1)+f(n-2)
n=int(raw_input())
values = [str(f(x)) for x in range(0, n+1)]
print "","".join(values)",Code,Human
4539,"def EvenGenerator(n):
    i=0
    while i<=n:
        if i%2==0:
            yield i
        i+=1
n=int(raw_input())
values = []
for i in EvenGenerator(n):
    values.append(str(i))
print "","".join(values)",Code,Human
4540,"def NumGenerator(n):
    for i in range(n+1):
        if i%5==0 and i%7==0:
            yield i
n=int(raw_input())
values = []
for i in NumGenerator(n):
    values.append(str(i))
print "","".join(values)",Code,Human
4541,"li = [2,4,6,8]
for i in li:
    assert i%2==0",Code,Human
4542,"expression = raw_input()
print eval(expression)",Code,Human
4543,"import math
def bin_search(li, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
        if li[mid]==element:
            index = mid
        elif li[mid]>element:
            top = mid-1
        else:
            bottom = mid+1
    return index

li=[2,5,7,9,11,17,222]
print bin_search(li,11)
print bin_search(li,12)",Code,Human
4544,"import math
def bin_search(li, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
        if li[mid]==element:
            index = mid
        elif li[mid]>element:
            top = mid-1
        else:
            bottom = mid+1
    return index",Code,Human
4545,"import random
print random.random()*100",Code,Human
4546,"import random
print random.random()*100-5",Code,Human
4547,"import random
print random.choice([i for i in range(11) if i%2==0])",Code,Human
4548,"import random
print random.choice([i for i in range(201) if i%5==0 and i%7==0])",Code,Human
4549,"import random
print random.sample(range(100), 5)",Code,Human
4550,"import random
print random.sample([i for i in range(100,201) if i%2==0], 5)",Code,Human
4551,"import random
print random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5)",Code,Human
4552,"import random
print random.randrange(7,16)",Code,Human
4553,"import zlib
s = 'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print t
print zlib.decompress(t)",Code,Human
4554,"from timeit import Timer
t = Timer(""for i in range(100):1+1"")
print t.timeit()",Code,Human
4555,"from random import shuffle
li = [3,6,7,8]
shuffle(li)
print li",Code,Human
4556,"from random import shuffle
li = [3,6,7,8]
shuffle(li)
print li",Code,Human
4557,"subjects=[""I"", ""You""]
verbs=[""Play"", ""Love""]
objects=[""Hockey"",""Football""]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print sentence",Code,Human
4558,"li = [5,6,77,45,22,12,24]
li = [x for x in li if x%2!=0]
print li",Code,Human
4559,"li = [12,24,35,70,88,120,155]
li = [x for x in li if x%5!=0 and x%7!=0]
print li",Code,Human
4560,"li = [12,24,35,70,88,120,155]
li = [x for (i,x) in enumerate(li) if i%2!=0]
print li",Code,Human
4561,"array = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]
print array",Code,Human
4562,"li = [12,24,35,70,88,120,155]
li = [x for (i,x) in enumerate(li) if i not in (0,4,5)]
print li",Code,Human
4563,"li = [12,24,35,24,88,120,155]
li = [x for x in li if x!=24]
print li",Code,Human
4564,"set1=set([1,3,6,78,35,55])
set2=set([12,24,35,24,88,120,155])
set1 &= set2
li=list(set1)
print li",Code,Human
4565,"def removeDuplicate( li ):
    newli=[]
    seen = set()
    for item in li:
        if item not in seen:
            seen.add( item )
            newli.append(item)
    return newli
li=[12,24,35,24,88,120,155,88,120,155]
print removeDuplicate(li)",Code,Human
4566,"class Person(object):
    def getGender( self ):
        return ""Unknown""
class Male( Person ):
    def getGender( self ):
        return ""Male""
class Female( Person ):
    def getGender( self ):
        return ""Female""
aMale = Male()
aFemale= Female()
print aMale.getGender()
print aFemale.getGender()",Code,Human
4567,"dic = {}
s=raw_input()
for s in s:
    dic[s] = dic.get(s,0)+1
print '\n'.join(['%s,%s' % (k, v) for k, v in dic.items()])",Code,Human
4568,"s=raw_input()
s = s[::-1]
print s",Code,Human
4569,"s=raw_input()
s = s[::2]
print s",Code,Human
4570,"import itertools
print list(itertools.permutations([1,2,3]))",Code,Human
4571,"def solve(numheads,numlegs):
    ns='No solutions!'
    for i in range(numheads+1):
        j=numheads-i
        if 2*i+4*j==numlegs:
            return i,j
    return ns,ns",Code,Human
4572,"st = ""AmmarAdil""
count = {}
for a in st:
    if a in count:
        count[a]+=1
    else:
        count[a] = 1
print('Count', count)",Code,Human
4573,"st = ""ammaradil""
vowle = ['a', 'e', 'i', 'o', 'u']
count = 0

for s in st:
    if s in vowle:
        count = count+1

print(""Count"", count)",Code,Human
4574,"st = ""ammar adil""

upper_st = st.upper()
print(""Upper Case"", upper_st)",Code,Human
4575,"st = ""AMMAR ADIL""

lower_st = st.lower()
print(""Lower Case"", lower_st)",Code,Human
4576,"a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

union_both = a.union(b)
print(""Union"", union_both)",Code,Human
4577,"a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

intersection_both = a.intersection(b)
print(""Intersection"", intersection_both)",Code,Human
4578,"a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]

for i in a:
    row = '|'
    for b in i:
        row = row + ' ' + str(b)
    print(row + ' ' + '|')",Code,Human
4579,"rows = 2
cols = 3
M = []
while len(M) < rows:
    M.append([])
    while len(M[-1]) < cols:
        M[-1].append(0.0)

print(""Zero Matrix"")
for i in range(rows):
    row = '|'
    for b in range(cols):
        row = row + ' ' + str(M[i][b])
    print(row + ' ' + '|')",Code,Human
4580,"dim = 3
M = []
while len(M) < dim:
    M.append([])
    while len(M[-1]) < dim:
        M[-1].append(0.0)

for i in range(dim):
    M[i][i] = 1.0

print('Identity Matrix')
for i in range(dim):
    row = '|'
    for b in range(dim):
        row = row + ' ' + str(M[i][b])
    print(row + ' ' + '|')",Code,Human
4581,"M = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
rows = len(M)
cols = len(M[0])

MC = []
while len(MC) < rows:
    MC.append([])
    while len(MC[-1]) < cols:
        MC[-1].append(0.0)

for i in range(rows):
    for j in range(cols):
        MC[i][j] = M[i][j]

print(""Copied Array"")
for i in range(rows):
    row = '|'
    for b in range(cols):
        row = row + ' ' + str(MC[i][b])
    print(row + ' ' + '|')",Code,Human
4582,"M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

if not isinstance(M[0], list):
    M = [M]

rows = len(M)
cols = len(M[0])

MT = []
while len(MT) < dim:
    MT.append([])
    while len(MT[-1]) < dim:
        MT[-1].append(0.0)

for i in range(rows):
    for j in range(cols):
        MT[j][i] = M[i][j]

print(""Transpose Array"")
for i in range(rows):
    row = '|'
    for b in range(cols):
        row = row + ' ' + str(MT[i][b])
    print(row + ' ' + '|')",Code,Human
4583,"A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if rowsA != rowsB or colsA != colsB:
    raise ArithmeticError('Matrices are NOT the same size.')

C = []
while len(C) < rowsA:
    C.append([])
    while len(C[-1]) < colsB:
        C[-1].append(0.0)

for i in range(rowsA):
    for j in range(colsB):
        C[i][j] = A[i][j] + B[i][j]

print(""Added Array"")
for i in range(rowsA):
    row = '|'
    for b in range(colsA):
        row = row + ' ' + str(C[i][b])
    print(row + ' ' + '|')",Code,Human
4584,"A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if rowsA != rowsB or colsA != colsB:
    raise ArithmeticError('Matrices are NOT the same size.')

C = []
while len(C) < rowsA:
    C.append([])
    while len(C[-1]) < colsB:
        C[-1].append(0.0)

for i in range(rowsA):
    for j in range(colsB):
        C[i][j] = A[i][j] - B[i][j]

print(""Subtracted Array"")
for i in range(rowsA):
    row = '|'
    for b in range(colsA):
        row = row + ' ' + str(C[i][b])
    print(row + ' ' + '|')",Code,Human
4585,"rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])

if colsA != rowsB:
    raise ArithmeticError('Number of A columns must equal number of B rows.')

C = []
while len(C) < rowsA:
    C.append([])
    while len(C[-1]) < colsB:
        C[-1].append(0.0)

for i in range(rowsA):
    for j in range(colsB):
        total = 0
        for ii in range(colsA):
            total += A[i][ii] * B[ii][j]
        C[i][j] = total

print(""Multiplied Array"")
for i in range(rowsA):
    row = '|'
    for b in range(colsA):
        row = row + ' ' + str(C[i][b])
    print(row + ' ' + '|')",Code,Human
4586,"myTuple = (""John"", ""Peter"", ""Vicky"")
x = ""#"".join(myTuple)
print(x)",Code,Human
4587,"txt = ""     banana     ""
x = txt.strip()
print(""of all fruits"", x, ""is my favorite"")",Code,Human
4588,"txt = "",,,,,rrttgg.....banana....rrr""
x = txt.strip("",.grt"")
print(x)",Code,Human
4589,"txt = ""Thank you for the music\nWelcome to the jungle""
x = txt.splitlines()
print(x)",Code,Human
4590,"txt = ""Hello, welcome to my world.""
x = txt.index(""welcome"")
print(x)",Code,Human
4591,"import math

number = 34.564
ce = math.ceil(number)
print('Ceil', ce)",Code,Human
4592,"import math

number = 34.564
fa = math.fabs(number)
print('Fabs', fa)",Code,Human
4593,"import math

number = 8
fa = math.factorial(number)
print('Factorial', fa)",Code,Human
4594,"import math

number = 3

print('Exponential', math.exp(number))",Code,Human
4595,"import math

num = 5
base = 7

print(""Log_x_b"", math.log(num, base))",Code,Human
4596,"import math

num = 45
print(""Cosine"", math.cos(num))",Code,Human
4597,"import math

num = 45
print(""Sin"", math.sin(num))",Code,Human
4598,"import math

num = 45
print(""Tangent"", math.tan(num))",Code,Human
4599,a = 60,Code,Human
4600,b = 13,Code,Human
4601,c = a & b,Code,Human
4602,"print(""AND"", c)",Code,Human
4603,"a = 60
b = 13

c = a | b
print(""OR"", c)",Code,Human
4604,"a = 60
b = 13

c = a ^ b
print(""XOR"", c)",Code,Human
4605,"a = 60

c = ~a
print(""Binary Ones Complement"", c)",Code,Human
4606,"c = a << 2
print(""Binary Left Shift"", c)",Code,Human
4607,"c = a >> 2
print(""Binary Right Shift"", c)",Code,Human
