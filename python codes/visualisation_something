import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix

def main():
    # Load your data into a DataFrame, assuming it's named 'data'
    data = pd.read_csv('ai.csv')  # Replace 'your_data.csv' with the actual file path
    
    # Drop rows with NaN values
    data = data.dropna()

    # Separate features (X) and target variable (Y)
    X = data.drop(columns=['Content'])  # Adjust 'target_column' with the name of your target column
    Y = data['Content']

    # Encode categorical variables
    label_encoder = LabelEncoder()
    X_encoded = X.apply(label_encoder.fit_transform)

    # Split the data into training and testing sets
    X_train, X_test, Y_train, Y_test = train_test_split(X_encoded, Y, test_size=0.25, random_state=1)

    # Feature scaling
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)

    # Initialize and train the Random Forest Classifier
    forest = RandomForestClassifier(n_estimators=10, criterion='entropy', random_state=1)
    forest.fit(X_train, Y_train)

    # Test model accuracy on testing data
    testing_accuracy = forest.score(X_test, Y_test)
    print('Model test accuracy =', testing_accuracy)

    # Generate confusion matrix
    cm = confusion_matrix(Y_test, forest.predict(X_test))
    print('Confusion Matrix:')
    print(cm)

if __name__ == "__main__":
    main()
